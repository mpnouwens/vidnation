{"ast":null,"code":"import*as React from'react';import{useSubscription}from'use-subscription';import useNavigation from\"./useNavigation\";export default function useIsFocused(){var navigation=useNavigation();var getCurrentValue=React.useCallback(navigation.isFocused,[navigation]);var subscribe=React.useCallback(function(callback){var unsubscribeFocus=navigation.addListener('focus',callback);var unsubscribeBlur=navigation.addListener('blur',callback);return function(){unsubscribeFocus();unsubscribeBlur();};},[navigation]);return useSubscription({getCurrentValue:getCurrentValue,subscribe:subscribe});}","map":{"version":3,"mappings":"AAAA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,CACA,OAASC,eAAT,KAAgC,kBAAhC,CACA,MAAOC,cAAP,uBAOA,cAAe,SAASC,aAAT,EAAiC,CAC9C,GAAMC,WAAU,CAAGF,aAAa,EAAhC,CAEA,GAAMG,gBAAe,CAAGL,KAAK,CAACM,WAAN,CAAkBF,UAAU,CAACG,SAA7B,CAAwC,CAACH,UAAD,CAAxC,CAAxB,CACA,GAAMI,UAAS,CAAGR,KAAK,CAACM,WAAN,CACfG,iBAAD,CAA0B,CACxB,GAAMC,iBAAgB,CAAGN,UAAU,CAACO,WAAX,CAAuB,OAAvB,CAAgCF,QAAhC,CAAzB,CAEA,GAAMG,gBAAe,CAAGR,UAAU,CAACO,WAAX,CAAuB,MAAvB,CAA+BF,QAA/B,CAAxB,CAEA,MAAO,WAAM,CACXC,gBAAgB,GAChBE,eAAe,GAChB,CAHD,CAID,CAVe,CAWhB,CAACR,UAAD,CAXgB,CAAlB,CAcA,MAAOH,gBAAe,CAAC,CACrBI,eADqB,CACrBA,eADqB,CAErBG,mBAFqB,CAAD,CAAtB,CAID","names":["React","useSubscription","useNavigation","useIsFocused","navigation","getCurrentValue","useCallback","isFocused","subscribe","callback","unsubscribeFocus","addListener","unsubscribeBlur"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/@react-navigation/core/lib/module/useIsFocused.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useSubscription } from 'use-subscription';\nimport useNavigation from './useNavigation';\n\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n * It uses `use-subscription` under the hood for safer use in concurrent mode.\n */\nexport default function useIsFocused(): boolean {\n  const navigation = useNavigation();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const getCurrentValue = React.useCallback(navigation.isFocused, [navigation]);\n  const subscribe = React.useCallback(\n    (callback: () => void) => {\n      const unsubscribeFocus = navigation.addListener('focus', callback);\n\n      const unsubscribeBlur = navigation.addListener('blur', callback);\n\n      return () => {\n        unsubscribeFocus();\n        unsubscribeBlur();\n      };\n    },\n    [navigation]\n  );\n\n  return useSubscription({\n    getCurrentValue,\n    subscribe,\n  });\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}