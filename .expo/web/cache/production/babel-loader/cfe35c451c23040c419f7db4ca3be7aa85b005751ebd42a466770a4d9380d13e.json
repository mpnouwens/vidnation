{"ast":null,"code":"import{CodedError}from'@unimodules/react-native-adapter';import compareVersions from'compare-versions';var postedWarnings={};export default function deprecate(library,deprecatedAPI){var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var currentVersion=options.currentVersion,versionToRemove=options.versionToRemove,replacement=options.replacement;var code=codeFromLibrary(library);var key=code+\":\"+deprecatedAPI+\":\"+replacement;if(!postedWarnings[key]){postedWarnings[key]=true;}if(!currentVersion||!versionToRemove||compareVersions(currentVersion,versionToRemove)>=0){var _message=\"`\"+deprecatedAPI+\"` has been removed\";if(versionToRemove){_message=_message+\" as of version \\\"\"+versionToRemove+\"\\\"\";}if(replacement&&replacement.length){_message=_message+\" please migrate to: `\"+replacement+\"`\";}throw new CodedError(\"ERR_DEPRECATED_API\",prependLibrary(library,_message));}var message=\"`\"+deprecatedAPI+\"` has been deprecated\";if(replacement&&replacement.length){message=message+\" in favor of `\"+replacement+\"`\";}if(versionToRemove&&versionToRemove.length){message=message+\" and will be removed in version \\\"\"+versionToRemove+\"\\\"\";}console.warn(prependLibrary(library,message));}function prependLibrary(library,message){return library+\": \"+message;}function codeFromLibrary(library){var code=library.replace(/[-.]/g,'_').toUpperCase();return code;}","map":{"version":3,"mappings":"AAAA,OAASA,UAAU,KAAQ,kCAAkC,CAC7D,MAAOC,gBAAe,KAAM,kBAAkB,CAE9C,GAAMC,eAAc,CAA+B,EAAE,CAKrD,cAAc,SAAUC,UAAS,CAC/BC,OAAe,CACfC,aAAqB,CAKf,IAJNC,mEAII,EAAE,IAEEC,eAAc,CAAmCD,OAAO,CAAxDC,cAAc,CAAEC,eAAe,CAAkBF,OAAO,CAAxCE,eAAe,CAAEC,WAAW,CAAKH,OAAO,CAAvBG,WAAW,CACpD,GAAMC,KAAI,CAAGC,eAAe,CAACP,OAAO,CAAC,CACrC,GAAMQ,IAAG,CAAMF,IAAI,KAAIL,aAAa,KAAII,WAAa,CACrD,GAAI,CAACP,cAAc,CAACU,GAAG,CAAC,CAAE,CACxBV,cAAc,CAACU,GAAG,CAAC,CAAG,IAAI,EAG5B,GACE,CAACL,cAAc,EACf,CAACC,eAAe,EAChBP,eAAe,CAACM,cAAc,CAAEC,eAAe,CAAC,EAAI,CAAC,CACrD,CACA,GAAIK,SAAO,KAAQR,aAAa,qBAAqB,CACrD,GAAIG,eAAe,CAAE,CACnBK,QAAO,CAAMA,QAAO,qBAAmBL,eAAe,KAAG,EAE3D,GAAIC,WAAW,EAAIA,WAAW,CAACK,MAAM,CAAE,CACrCD,QAAO,CAAMA,QAAO,yBAAyBJ,WAAW,IAAI,EAG9D,KAAM,IAAIT,WAAU,sBAAuBe,cAAc,CAACX,OAAO,CAAES,QAAO,CAAC,CAAC,EAG9E,GAAIA,QAAO,KAAQR,aAAa,wBAAwB,CACxD,GAAII,WAAW,EAAIA,WAAW,CAACK,MAAM,CAAE,CACrCD,OAAO,CAAMA,OAAO,kBAAkBJ,WAAW,IAAI,EAEvD,GAAID,eAAe,EAAIA,eAAe,CAACM,MAAM,CAAE,CAC7CD,OAAO,CAAMA,OAAO,sCAAoCL,eAAe,KAAG,EAE5EQ,OAAO,CAACC,IAAI,CAACF,cAAc,CAACX,OAAO,CAAES,OAAO,CAAC,CAAC,CAChD,CAEA,QAASE,eAAc,CAACX,OAAe,CAAES,OAAe,EACtD,MAAUT,QAAO,MAAKS,OAAO,CAC/B,CAOA,QAASF,gBAAe,CAACP,OAAe,EACtC,GAAMM,KAAI,CAAGN,OAAO,CAACc,OAAO,CAAC,OAAO,CAAE,GAAG,CAAC,CAACC,WAAW,EAAE,CACxD,MAAOT,KAAI,CACb","names":["CodedError","compareVersions","postedWarnings","deprecate","library","deprecatedAPI","options","currentVersion","versionToRemove","replacement","code","codeFromLibrary","key","message","length","prependLibrary","console","warn","replace","toUpperCase"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/@unimodules/core/src/deprecate.ts"],"sourcesContent":["import { CodedError } from '@unimodules/react-native-adapter';\nimport compareVersions from 'compare-versions';\n\nconst postedWarnings: { [key: string]: boolean } = {};\n\n/**\n * Used for deprecating values and throwing an error if a given version of Expo has passed.\n */\nexport default function deprecate(\n  library: string,\n  deprecatedAPI: string,\n  options: {\n    replacement?: string;\n    currentVersion?: string;\n    versionToRemove?: string;\n  } = {}\n): void {\n  const { currentVersion, versionToRemove, replacement } = options;\n  const code = codeFromLibrary(library);\n  const key = `${code}:${deprecatedAPI}:${replacement}`;\n  if (!postedWarnings[key]) {\n    postedWarnings[key] = true;\n  }\n\n  if (\n    !currentVersion ||\n    !versionToRemove ||\n    compareVersions(currentVersion, versionToRemove) >= 0\n  ) {\n    let message = `\\`${deprecatedAPI}\\` has been removed`;\n    if (versionToRemove) {\n      message = `${message} as of version \"${versionToRemove}\"`;\n    }\n    if (replacement && replacement.length) {\n      message = `${message} please migrate to: \\`${replacement}\\``;\n    }\n\n    throw new CodedError(`ERR_DEPRECATED_API`, prependLibrary(library, message));\n  }\n\n  let message = `\\`${deprecatedAPI}\\` has been deprecated`;\n  if (replacement && replacement.length) {\n    message = `${message} in favor of \\`${replacement}\\``;\n  }\n  if (versionToRemove && versionToRemove.length) {\n    message = `${message} and will be removed in version \"${versionToRemove}\"`;\n  }\n  console.warn(prependLibrary(library, message));\n}\n\nfunction prependLibrary(library: string, message: string): string {\n  return `${library}: ${message}`;\n}\n\n/**\n * Transform format:\n * Expo.AR -> EXPO_AR\n * expo-ar -> EXPO_AR\n */\nfunction codeFromLibrary(library: string): string {\n  const code = library.replace(/[-.]/g, '_').toUpperCase();\n  return code;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}