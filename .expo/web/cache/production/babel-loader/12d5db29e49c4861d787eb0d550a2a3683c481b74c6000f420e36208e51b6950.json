{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import*as React from'react';import{SafeAreaProvider,SafeAreaConsumer,initialWindowSafeAreaInsets}from'react-native-safe-area-context';import{getStatusBarHeight,getBottomSpace}from'react-native-iphone-x-helper';var initialSafeAreaInsets=_objectSpread({top:getStatusBarHeight(true),bottom:getBottomSpace(),right:0,left:0},initialWindowSafeAreaInsets);export default function SafeAreaProviderCompat(_ref){var children=_ref.children;return React.createElement(SafeAreaConsumer,null,function(insets){if(insets){return children;}return React.createElement(SafeAreaProvider,{initialSafeAreaInsets:initialSafeAreaInsets},children);});}","map":{"version":3,"mappings":"w0BAAA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,CACA,OACEC,gBADF,CAEEC,gBAFF,CAGEC,2BAHF,KAIO,gCAJP,CAKA,OACEC,kBADF,CAEEC,cAFF,KAGO,8BAHP,CAQA,GAAMC,sBAAqB,gBAEzBC,GAAG,CAAEH,kBAAkB,CAAC,IAAD,CAFK,CAG5BI,MAAM,CAAEH,cAAc,EAHM,CAI5BI,KAAK,CAAE,CAJqB,CAK5BC,IAAI,CAAE,CALsB,EAQzBP,4BARL,CAeA,cAAe,SAASQ,uBAAT,MAAqD,IAAnBC,wBAC/C,MACEZ,qBAACE,gBAAD,MACIW,eAAD,CAAY,CACX,GAAIA,MAAJ,CAAY,CAIV,MAAOD,SAAP,CACD,CAED,MACEZ,qBAACC,gBAAD,EAAkBK,qBAAqB,CAAEA,qBAAzC,EACGM,QADH,CADF,CAKD,CAdH,CADF,CAkBD","names":["React","SafeAreaProvider","SafeAreaConsumer","initialWindowSafeAreaInsets","getStatusBarHeight","getBottomSpace","initialSafeAreaInsets","top","bottom","right","left","SafeAreaProviderCompat","children","insets"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/@react-navigation/bottom-tabs/lib/module/views/SafeAreaProviderCompat.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  SafeAreaProvider,\n  SafeAreaConsumer,\n  initialWindowSafeAreaInsets,\n} from 'react-native-safe-area-context';\nimport {\n  getStatusBarHeight,\n  getBottomSpace,\n} from 'react-native-iphone-x-helper';\n\n// The provider component for safe area initializes asynchornously\n// Until the insets are available, there'll be blank screen\n// To avoid the blank screen, we specify some initial values\nconst initialSafeAreaInsets = {\n  // Approximate values which are good enough for most cases\n  top: getStatusBarHeight(true),\n  bottom: getBottomSpace(),\n  right: 0,\n  left: 0,\n  // If we are on a newer version of the library, we can get the correct window insets\n  // The component might not be filling the window, but this is good enough for most cases\n  ...initialWindowSafeAreaInsets,\n};\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport default function SafeAreaProviderCompat({ children }: Props) {\n  return (\n    <SafeAreaConsumer>\n      {(insets) => {\n        if (insets) {\n          // If we already have insets, don't wrap the stack in another safe area provider\n          // This avoids an issue with updates at the cost of potentially incorrect values\n          // https://github.com/react-navigation/react-navigation/issues/174\n          return children;\n        }\n\n        return (\n          <SafeAreaProvider initialSafeAreaInsets={initialSafeAreaInsets}>\n            {children}\n          </SafeAreaProvider>\n        );\n      }}\n    </SafeAreaConsumer>\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}