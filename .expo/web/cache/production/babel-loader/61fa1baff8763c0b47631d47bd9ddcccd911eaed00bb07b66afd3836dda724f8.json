{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import*as React from'react';import SceneView from\"./SceneView\";import NavigationBuilderContext from\"./NavigationBuilderContext\";import useNavigationCache from\"./useNavigationCache\";import NavigationContext from\"./NavigationContext\";import NavigationRouteContext from\"./NavigationRouteContext\";export default function useDescriptors(_ref){var state=_ref.state,screens=_ref.screens,navigation=_ref.navigation,screenOptions=_ref.screenOptions,onAction=_ref.onAction,getState=_ref.getState,setState=_ref.setState,addListener=_ref.addListener,addKeyedListener=_ref.addKeyedListener,onRouteFocus=_ref.onRouteFocus,router=_ref.router,emitter=_ref.emitter;var _React$useState=React.useState({}),_React$useState2=_slicedToArray(_React$useState,2),options=_React$useState2[0],setOptions=_React$useState2[1];var _React$useContext=React.useContext(NavigationBuilderContext),onDispatchAction=_React$useContext.onDispatchAction,onOptionsChange=_React$useContext.onOptionsChange;var context=React.useMemo(function(){return{navigation:navigation,onAction:onAction,addListener:addListener,addKeyedListener:addKeyedListener,onRouteFocus:onRouteFocus,onDispatchAction:onDispatchAction,onOptionsChange:onOptionsChange};},[navigation,onAction,addListener,addKeyedListener,onRouteFocus,onDispatchAction,onOptionsChange]);var navigations=useNavigationCache({state:state,getState:getState,navigation:navigation,setOptions:setOptions,router:router,emitter:emitter});return state.routes.reduce(function(acc,route){var screen=screens[route.name];var navigation=navigations[route.key];var routeOptions=_objectSpread(_objectSpread(_objectSpread({},typeof screenOptions==='object'||screenOptions==null?screenOptions:screenOptions({route:route,navigation:navigation})),typeof screen.options==='object'||screen.options==null?screen.options:screen.options({route:route,navigation:navigation})),options[route.key]);acc[route.key]={navigation:navigation,render:function render(){return React.createElement(NavigationBuilderContext.Provider,{key:route.key,value:context},React.createElement(NavigationContext.Provider,{value:navigation},React.createElement(NavigationRouteContext.Provider,{value:route},React.createElement(SceneView,{navigation:navigation,route:route,screen:screen,getState:getState,setState:setState,options:routeOptions}))));},options:routeOptions};return acc;},{});}","map":{"version":3,"mappings":"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","names":["React","SceneView","NavigationBuilderContext","useNavigationCache","NavigationContext","NavigationRouteContext","useDescriptors","state","screens","navigation","screenOptions","onAction","getState","setState","addListener","addKeyedListener","onRouteFocus","router","emitter","useState","options","setOptions","useContext","onDispatchAction","onOptionsChange","context","useMemo","navigations","routes","reduce","acc","route","screen","name","key","routeOptions","render","Provider","value"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/@react-navigation/core/lib/module/useDescriptors.tsx"],"sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport SceneView from './SceneView';\nimport NavigationBuilderContext, {\n  AddListener,\n  AddKeyedListener,\n} from './NavigationBuilderContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type {\n  Descriptor,\n  NavigationHelpers,\n  RouteConfig,\n  RouteProp,\n  EventMapBase,\n} from './types';\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n      }) => ScreenOptions);\n  onAction: (\n    action: NavigationAction,\n    visitedNavigators?: Set<string>\n  ) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addListener: AddListener;\n  addKeyedListener: AddKeyedListener;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<any>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    }),\n    [\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  return state.routes.reduce<\n    Record<string, Descriptor<ParamListBase, string, State, ScreenOptions>>\n  >((acc, route) => {\n    const screen = screens[route.name];\n    const navigation = navigations[route.key];\n\n    const routeOptions = {\n      // The default `screenOptions` passed to the navigator\n      ...(typeof screenOptions === 'object' || screenOptions == null\n        ? screenOptions\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screenOptions({\n            route,\n            navigation,\n          })),\n      // The `options` prop passed to `Screen` elements\n      ...(typeof screen.options === 'object' || screen.options == null\n        ? screen.options\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screen.options({\n            route,\n            navigation,\n          })),\n      // The options set via `navigation.setOptions`\n      ...options[route.key],\n    };\n\n    acc[route.key] = {\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  getState={getState}\n                  setState={setState}\n                  options={routeOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: routeOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}