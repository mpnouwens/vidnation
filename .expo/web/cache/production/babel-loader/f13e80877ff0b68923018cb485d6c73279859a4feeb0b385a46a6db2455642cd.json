{"ast":null,"code":"import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import{NavigationHelpersContext}from'@react-navigation/core';import useLinkTo from\"./useLinkTo\";export default function useLinkProps(_ref){var to=_ref.to,action=_ref.action;var navigation=React.useContext(NavigationHelpersContext);var linkTo=useLinkTo();var onPress=function onPress(e){var _e$currentTarget;var shouldHandle=false;if(Platform.OS!=='web'||!e){shouldHandle=e?!e.defaultPrevented:true;}else if(!e.defaultPrevented&&!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)&&(e.button==null||e.button===0)&&[undefined,null,'','self'].includes((_e$currentTarget=e.currentTarget)===null||_e$currentTarget===void 0?void 0:_e$currentTarget.target)){e.preventDefault();shouldHandle=true;}if(shouldHandle){if(action){if(navigation){navigation.dispatch(action);}else{throw new Error(\"Couldn't find a navigation object.\");}}else{if(typeof to!=='string'){throw new Error(\"To 'to' option is invalid (found '\".concat(String(to),\"'. It must be a valid string for navigation.\"));}linkTo(to);}}};return{href:to,accessibilityRole:'link',onPress:onPress};}","map":{"version":3,"mappings":"AAAA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,8DAEA,OAEEC,wBAFF,KAGO,wBAHP,CAIA,MAAOC,UAAP,mBAaA,cAAe,SAASC,aAAT,MAA6C,IAArBC,GAAF,MAAEA,EAAF,CAAMC,mBACzC,GAAMC,WAAU,CAAGN,KAAK,CAACO,UAAN,CAAiBN,wBAAjB,CAAnB,CACA,GAAMO,OAAM,CAAGN,SAAS,EAAxB,CAEA,GAAMO,QAAO,CACXC,QADID,QAAO,CACXC,CADc,CAEX,sBACH,GAAIC,aAAY,CAAG,KAAnB,CAEA,GAAIC,QAAQ,CAACC,EAAT,GAAgB,KAAhB,EAAyB,CAACH,CAA9B,CAAiC,CAC/BC,YAAY,CAAGD,CAAC,CAAG,CAACA,CAAC,CAACI,gBAAN,CAAyB,IAAzC,CACD,CAFD,IAEO,IACL,CAACJ,CAAC,CAACI,gBAAH,EAEA,EAAEJ,CAAC,CAACK,OAAF,EAAaL,CAAC,CAACM,MAAf,EAAyBN,CAAC,CAACO,OAA3B,EAAsCP,CAAC,CAACQ,QAA1C,CAFA,GAICR,CAAC,CAACS,MAAF,EAAY,IAAZ,EAAoBT,CAAC,CAACS,MAAF,GAAa,CAJlC,GAMA,CAACC,SAAD,CAAY,IAAZ,CAAkB,EAAlB,CAAsB,MAAtB,EAA8BC,QAA9B,mBAAuCX,CAAC,CAACY,aAAzC,2CAAuCC,iBAAiBC,MAAxD,CAPK,CAQL,CACAd,CAAC,CAACe,cAAF,GACAd,YAAY,CAAG,IAAf,CACD,CAED,GAAIA,YAAJ,CAAkB,CAChB,GAAIN,MAAJ,CAAY,CACV,GAAIC,UAAJ,CAAgB,CACdA,UAAU,CAACoB,QAAX,CAAoBrB,MAApB,EACD,CAFD,IAEO,CACL,KAAM,IAAIsB,MAAJ,CAAU,oCAAV,CAAN,CACD,CACF,CAND,IAMO,CACL,GAAI,MAAOvB,GAAP,GAAc,QAAlB,CAA4B,CAC1B,KAAM,IAAIuB,MAAJ,6CACiCC,MAAM,CACzCxB,EADyC,CADvC,iDAAN,CAKD,CAEDI,MAAM,CAACJ,EAAD,CAAN,CACD,CACF,CACF,CAvCD,CAyCA,MAAO,CACLyB,IAAI,CAAEzB,EADD,CAEL0B,iBAAiB,CAAE,MAFd,CAGLrB,eAHK,CAAP,CAKD","names":["React","NavigationHelpersContext","useLinkTo","useLinkProps","to","action","navigation","useContext","linkTo","onPress","e","shouldHandle","Platform","OS","defaultPrevented","metaKey","altKey","ctrlKey","shiftKey","button","undefined","includes","currentTarget","_e$currentTarget","target","preventDefault","dispatch","Error","String","href","accessibilityRole"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/@react-navigation/native/lib/module/useLinkProps.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform, GestureResponderEvent } from 'react-native';\nimport {\n  NavigationAction,\n  NavigationHelpersContext,\n} from '@react-navigation/core';\nimport useLinkTo from './useLinkTo';\n\ntype Props = {\n  to: string;\n  action?: NavigationAction;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps({ to, action }: Props) {\n  const navigation = React.useContext(NavigationHelpersContext);\n  const linkTo = useLinkTo();\n\n  const onPress = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (\n      !e.defaultPrevented && // onPress prevented default\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      (e.button == null || e.button === 0) && // ignore everything but left clicks\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      [undefined, null, '', 'self'].includes(e.currentTarget?.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object.\");\n        }\n      } else {\n        if (typeof to !== 'string') {\n          throw new Error(\n            `To 'to' option is invalid (found '${String(\n              to\n            )}'. It must be a valid string for navigation.`\n          );\n        }\n\n        linkTo(to);\n      }\n    }\n  };\n\n  return {\n    href: to,\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}