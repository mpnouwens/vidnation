{"ast":null,"code":"import Dimensions from\"../Dimensions\";var PixelRatio=function(){function PixelRatio(){}PixelRatio.get=function get(){return Dimensions.get('window').scale;};PixelRatio.getFontScale=function getFontScale(){return Dimensions.get('window').fontScale||PixelRatio.get();};PixelRatio.getPixelSizeForLayoutSize=function getPixelSizeForLayoutSize(layoutSize){return Math.round(layoutSize*PixelRatio.get());};PixelRatio.roundToNearestPixel=function roundToNearestPixel(layoutSize){var ratio=PixelRatio.get();return Math.round(layoutSize*ratio)/ratio;};return PixelRatio;}();export{PixelRatio as default};","map":{"version":3,"names":["Dimensions","PixelRatio","get","scale","getFontScale","fontScale","getPixelSizeForLayoutSize","layoutSize","Math","round","roundToNearestPixel","ratio","default"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/react-native-web/dist/exports/PixelRatio/index.js"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport Dimensions from '../Dimensions';\n/**\n * PixelRatio gives access to the device pixel density.\n */\n\nvar PixelRatio =\n/*#__PURE__*/\nfunction () {\n  function PixelRatio() {}\n\n  /**\n   * Returns the device pixel density.\n   */\n  PixelRatio.get = function get() {\n    return Dimensions.get('window').scale;\n  }\n  /**\n   * No equivalent for Web\n   */\n  ;\n\n  PixelRatio.getFontScale = function getFontScale() {\n    return Dimensions.get('window').fontScale || PixelRatio.get();\n  }\n  /**\n   * Converts a layout size (dp) to pixel size (px).\n   * Guaranteed to return an integer number.\n   */\n  ;\n\n  PixelRatio.getPixelSizeForLayoutSize = function getPixelSizeForLayoutSize(layoutSize) {\n    return Math.round(layoutSize * PixelRatio.get());\n  }\n  /**\n   * Rounds a layout size (dp) to the nearest layout size that corresponds to\n   * an integer number of pixels. For example, on a device with a PixelRatio\n   * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to\n   * exactly (8.33 * 3) = 25 pixels.\n   */\n  ;\n\n  PixelRatio.roundToNearestPixel = function roundToNearestPixel(layoutSize) {\n    var ratio = PixelRatio.get();\n    return Math.round(layoutSize * ratio) / ratio;\n  };\n\n  return PixelRatio;\n}();\n\nexport { PixelRatio as default };"],"mappings":"AASA,MAAOA,WAAU,qBAKjB,GAAIC,WAAU,CAEd,UAAY,CACV,QAASA,WAAU,EAAG,CAAC,CAKvBA,UAAU,CAACC,GAAG,CAAG,QAASA,IAAG,EAAG,CAC9B,MAAOF,WAAU,CAACE,GAAG,CAAC,QAAQ,CAAC,CAACC,KAAK,CACvC,CAAC,CAMDF,UAAU,CAACG,YAAY,CAAG,QAASA,aAAY,EAAG,CAChD,MAAOJ,WAAU,CAACE,GAAG,CAAC,QAAQ,CAAC,CAACG,SAAS,EAAIJ,UAAU,CAACC,GAAG,EAAE,CAC/D,CAAC,CAODD,UAAU,CAACK,yBAAyB,CAAG,QAASA,0BAAyB,CAACC,UAAU,CAAE,CACpF,MAAOC,KAAI,CAACC,KAAK,CAACF,UAAU,CAAGN,UAAU,CAACC,GAAG,EAAE,CAAC,CAClD,CAAC,CASDD,UAAU,CAACS,mBAAmB,CAAG,QAASA,oBAAmB,CAACH,UAAU,CAAE,CACxE,GAAII,MAAK,CAAGV,UAAU,CAACC,GAAG,EAAE,CAC5B,MAAOM,KAAI,CAACC,KAAK,CAACF,UAAU,CAAGI,KAAK,CAAC,CAAGA,KAAK,CAC/C,CAAC,CAED,MAAOV,WAAU,CACnB,CAAC,EAAE,CAEH,OAASA,UAAU,GAAIW,QAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}