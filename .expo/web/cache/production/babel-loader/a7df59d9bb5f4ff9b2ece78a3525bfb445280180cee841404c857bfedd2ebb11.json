{"ast":null,"code":"import*as React from'react';import{getStateFromPath,getActionFromState,NavigationContext}from'@react-navigation/core';import LinkingContext from\"./LinkingContext\";export default function useLinkTo(){var navigation=React.useContext(NavigationContext);var linking=React.useContext(LinkingContext);var linkTo=React.useCallback(function(path){if(!path.startsWith('/')){throw new Error(\"The path must start with '/' (\".concat(path,\").\"));}if(navigation===undefined){throw new Error(\"Couldn't find a navigation object. Is your component inside a screen in a navigator?\");}var options=linking.options;var state=(options===null||options===void 0?void 0:options.getStateFromPath)?options.getStateFromPath(path,options.config):getStateFromPath(path,options===null||options===void 0?void 0:options.config);if(state){var root=navigation;var current;while(current=root.dangerouslyGetParent()){root=current;}var action=getActionFromState(state);if(action!==undefined){root.dispatch(action);}else{root.reset(state);}}else{throw new Error('Failed to parse the path to a navigation state.');}},[linking,navigation]);return linkTo;}","map":{"version":3,"mappings":"AAAA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,CACA,OACEC,gBADF,CAEEC,kBAFF,CAGEC,iBAHF,KAIO,wBAJP,CAKA,MAAOC,eAAP,wBAEA,cAAe,SAASC,UAAT,EAAqB,CAClC,GAAMC,WAAU,CAAGN,KAAK,CAACO,UAAN,CAAiBJ,iBAAjB,CAAnB,CACA,GAAMK,QAAO,CAAGR,KAAK,CAACO,UAAN,CAAiBH,cAAjB,CAAhB,CAEA,GAAMK,OAAM,CAAGT,KAAK,CAACU,WAAN,CACZC,aAAD,CAAkB,CAChB,GAAI,CAACA,IAAI,CAACC,UAAL,CAAgB,GAAhB,CAAL,CAA2B,CACzB,KAAM,IAAIC,MAAJ,yCAA2CF,IAA3C,OAAN,CACD,CAED,GAAIL,UAAU,GAAKQ,SAAnB,CAA8B,CAC5B,KAAM,IAAID,MAAJ,CACJ,sFADI,CAAN,CAGD,IAEOE,SAAYP,OAApB,CAAQO,QAER,GAAMC,MAAK,CAAG,QAAO,OAAP,SAAO,SAAP,eAAO,CAAEf,gBAAT,EACVc,OAAO,CAACd,gBAAR,CAAyBU,IAAzB,CAA+BI,OAAO,CAACE,MAAvC,CADU,CAEVhB,gBAAgB,CAACU,IAAD,CAAOI,OAAP,SAAOA,OAAP,iBAAOA,OAAO,CAAEE,MAAhB,CAFpB,CAIA,GAAID,KAAJ,CAAW,CACT,GAAIE,KAAI,CAAGZ,UAAX,CACA,GAAIa,QAAJ,CAGA,MAAQA,OAAO,CAAGD,IAAI,CAACE,oBAAL,EAAlB,CAAgD,CAC9CF,IAAI,CAAGC,OAAP,CACD,CAED,GAAME,OAAM,CAAGnB,kBAAkB,CAACc,KAAD,CAAjC,CAEA,GAAIK,MAAM,GAAKP,SAAf,CAA0B,CACxBI,IAAI,CAACI,QAAL,CAAcD,MAAd,EACD,CAFD,IAEO,CACLH,IAAI,CAACK,KAAL,CAAWP,KAAX,EACD,CACF,CAhBD,IAgBO,CACL,KAAM,IAAIH,MAAJ,CAAU,iDAAV,CAAN,CACD,CACF,CArCY,CAsCb,CAACL,OAAD,CAAUF,UAAV,CAtCa,CAAf,CAyCA,MAAOG,OAAP,CACD","names":["React","getStateFromPath","getActionFromState","NavigationContext","LinkingContext","useLinkTo","navigation","useContext","linking","linkTo","useCallback","path","startsWith","Error","undefined","options","state","config","root","current","dangerouslyGetParent","action","dispatch","reset"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/@react-navigation/native/lib/module/useLinkTo.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  getStateFromPath,\n  getActionFromState,\n  NavigationContext,\n} from '@react-navigation/core';\nimport LinkingContext from './LinkingContext';\n\nexport default function useLinkTo() {\n  const navigation = React.useContext(NavigationContext);\n  const linking = React.useContext(LinkingContext);\n\n  const linkTo = React.useCallback(\n    (path: string) => {\n      if (!path.startsWith('/')) {\n        throw new Error(`The path must start with '/' (${path}).`);\n      }\n\n      if (navigation === undefined) {\n        throw new Error(\n          \"Couldn't find a navigation object. Is your component inside a screen in a navigator?\"\n        );\n      }\n\n      const { options } = linking;\n\n      const state = options?.getStateFromPath\n        ? options.getStateFromPath(path, options.config)\n        : getStateFromPath(path, options?.config);\n\n      if (state) {\n        let root = navigation;\n        let current;\n\n        // Traverse up to get the root navigation\n        while ((current = root.dangerouslyGetParent())) {\n          root = current;\n        }\n\n        const action = getActionFromState(state);\n\n        if (action !== undefined) {\n          root.dispatch(action);\n        } else {\n          root.reset(state);\n        }\n      } else {\n        throw new Error('Failed to parse the path to a navigation state.');\n      }\n    },\n    [linking, navigation]\n  );\n\n  return linkTo;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}