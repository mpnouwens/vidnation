{"ast":null,"code":"'use strict';import EmitterSubscription from\"./EmitterSubscription\";import EventSubscriptionVendor from\"./EventSubscriptionVendor\";import invariant from'fbjs/lib/invariant';var sparseFilterPredicate=function sparseFilterPredicate(){return true;};var EventEmitter=function(){function EventEmitter(subscriber){this._subscriber=subscriber||new EventSubscriptionVendor();}var _proto=EventEmitter.prototype;_proto.addListener=function addListener(eventType,listener,context){return this._subscriber.addSubscription(eventType,new EmitterSubscription(this,this._subscriber,listener,context));};_proto.once=function once(eventType,listener,context){var _this=this;return this.addListener(eventType,function(){_this.removeCurrentListener();for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}listener.apply(context,args);});};_proto.removeAllListeners=function removeAllListeners(eventType){this._subscriber.removeAllSubscriptions(eventType);};_proto.removeCurrentListener=function removeCurrentListener(){invariant(!!this._currentSubscription,'Not in an emitting cycle; there is no current subscription');this.removeSubscription(this._currentSubscription);};_proto.removeSubscription=function removeSubscription(subscription){invariant(subscription.emitter===this,'Subscription does not belong to this emitter.');this._subscriber.removeSubscription(subscription);};_proto.listeners=function listeners(eventType){var subscriptions=this._subscriber.getSubscriptionsForType(eventType);return subscriptions?subscriptions.filter(sparseFilterPredicate).map(function(subscription){return subscription.listener;}):[];};_proto.emit=function emit(eventType){var subscriptions=this._subscriber.getSubscriptionsForType(eventType);if(subscriptions){for(var i=0,l=subscriptions.length;i<l;i++){var subscription=subscriptions[i];if(subscription&&subscription.listener){this._currentSubscription=subscription;subscription.listener.apply(subscription.context,Array.prototype.slice.call(arguments,1));}}this._currentSubscription=null;}};_proto.removeListener=function removeListener(eventType,listener){var subscriptions=this._subscriber.getSubscriptionsForType(eventType);if(subscriptions){for(var i=0,l=subscriptions.length;i<l;i++){var subscription=subscriptions[i];if(subscription&&subscription.listener===listener){subscription.remove();}}}};return EventEmitter;}();export default EventEmitter;","map":{"version":3,"names":["EmitterSubscription","EventSubscriptionVendor","invariant","sparseFilterPredicate","EventEmitter","subscriber","_subscriber","_proto","prototype","addListener","eventType","listener","context","addSubscription","once","_this","removeCurrentListener","_len","arguments","length","args","Array","_key","apply","removeAllListeners","removeAllSubscriptions","_currentSubscription","removeSubscription","subscription","emitter","listeners","subscriptions","getSubscriptionsForType","filter","map","emit","i","l","slice","call","removeListener","remove"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/react-native-web/dist/vendor/react-native/emitter/EventEmitter.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @typecheck\n */\n'use strict';\n\nimport EmitterSubscription from './EmitterSubscription';\nimport EventSubscriptionVendor from './EventSubscriptionVendor';\nimport invariant from 'fbjs/lib/invariant';\n\nvar sparseFilterPredicate = function sparseFilterPredicate() {\n  return true;\n};\n/**\n * @class EventEmitter\n * @description\n * An EventEmitter is responsible for managing a set of listeners and publishing\n * events to them when it is told that such events happened. In addition to the\n * data for the given event it also sends a event control object which allows\n * the listeners/handlers to prevent the default behavior of the given event.\n *\n * The emitter is designed to be generic enough to support all the different\n * contexts in which one might want to emit events. It is a simple multicast\n * mechanism on top of which extra functionality can be composed. For example, a\n * more advanced emitter may use an EventHolder and EventFactory.\n */\n\n\nvar EventEmitter =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   *\n   * @param {EventSubscriptionVendor} subscriber - Optional subscriber instance\n   *   to use. If omitted, a new subscriber will be created for the emitter.\n   */\n  function EventEmitter(subscriber) {\n    this._subscriber = subscriber || new EventSubscriptionVendor();\n  }\n  /**\n   * Adds a listener to be invoked when events of the specified type are\n   * emitted. An optional calling context may be provided. The data arguments\n   * emitted will be passed to the listener function.\n   *\n   * TODO: Annotate the listener arg's type. This is tricky because listeners\n   *       can be invoked with varargs.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n\n\n  var _proto = EventEmitter.prototype;\n\n  _proto.addListener = function addListener(eventType, listener, context) {\n    return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));\n  }\n  /**\n   * Similar to addListener, except that the listener is removed after it is\n   * invoked once.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke only once when the\n   *   specified event is emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n  ;\n\n  _proto.once = function once(eventType, listener, context) {\n    var _this = this;\n\n    return this.addListener(eventType, function () {\n      _this.removeCurrentListener();\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      listener.apply(context, args);\n    });\n  }\n  /**\n   * Removes all of the registered listeners, including those registered as\n   * listener maps.\n   *\n   * @param {?string} eventType - Optional name of the event whose registered\n   *   listeners to remove\n   */\n  ;\n\n  _proto.removeAllListeners = function removeAllListeners(eventType) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  }\n  /**\n   * Provides an API that can be called during an eventing cycle to remove the\n   * last listener that was invoked. This allows a developer to provide an event\n   * object that can remove the listener (or listener map) during the\n   * invocation.\n   *\n   * If it is called when not inside of an emitting cycle it will throw.\n   *\n   * @throws {Error} When called not during an eventing cycle\n   *\n   * @example\n   *   var subscription = emitter.addListenerMap({\n   *     someEvent: function(data, event) {\n   *       console.log(data);\n   *       emitter.removeCurrentListener();\n   *     }\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   *   emitter.emit('someEvent', 'def'); // does not log anything\n   */\n  ;\n\n  _proto.removeCurrentListener = function removeCurrentListener() {\n    invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');\n    this.removeSubscription(this._currentSubscription);\n  }\n  /**\n   * Removes a specific subscription. Called by the `remove()` method of the\n   * subscription itself to ensure any necessary cleanup is performed.\n   */\n  ;\n\n  _proto.removeSubscription = function removeSubscription(subscription) {\n    invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n\n    this._subscriber.removeSubscription(subscription);\n  }\n  /**\n   * Returns an array of listeners that are currently registered for the given\n   * event.\n   *\n   * @param {string} eventType - Name of the event to query\n   * @returns {array}\n   */\n  ;\n\n  _proto.listeners = function listeners(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    return subscriptions ? subscriptions // We filter out missing entries because the array is sparse.\n    // \"callbackfn is called only for elements of the array which actually\n    // exist; it is not called for missing elements of the array.\"\n    // https://www.ecma-international.org/ecma-262/9.0/index.html#sec-array.prototype.filter\n    .filter(sparseFilterPredicate).map(function (subscription) {\n      return subscription.listener;\n    }) : [];\n  }\n  /**\n   * Emits an event of the given type with the given data. All handlers of that\n   * particular type will be notified.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\n   *\n   * @example\n   *   emitter.addListener('someEvent', function(message) {\n   *     console.log(message);\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   */\n  ;\n\n  _proto.emit = function emit(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i]; // The subscription may have been removed during this event loop.\n\n        if (subscription && subscription.listener) {\n          this._currentSubscription = subscription;\n          subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));\n        }\n      }\n\n      this._currentSubscription = null;\n    }\n  }\n  /**\n   * Removes the given listener for event of specific type.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   *\n   * @example\n   *   emitter.removeListener('someEvent', function(message) {\n   *     console.log(message);\n   *   }); // removes the listener if already registered\n   *\n   */\n  ;\n\n  _proto.removeListener = function removeListener(eventType, listener) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i]; // The subscription may have been removed during this event loop.\n        // its listener matches the listener in method parameters\n\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  };\n\n  return EventEmitter;\n}();\n\nexport default EventEmitter;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}