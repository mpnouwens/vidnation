{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";var _jsxFileName=\"/Users/brentvatne/code/react-native-appearance/src/index.tsx\";import React,{useMemo}from'react';import NativeEventEmitter from\"react-native-web/dist/exports/NativeEventEmitter\";import{EventEmitter}from'fbemitter';import{useSubscription}from'use-subscription';export*from\"./Appearance.types\";import{NativeAppearance,NativeAppearanceProvider}from\"./NativeAppearance\";var eventEmitter=new EventEmitter();var appearancePreferences=NativeAppearance.initialPreferences;var nativeEventEmitter=new NativeEventEmitter(NativeAppearance);nativeEventEmitter.addListener('appearanceChanged',function(newAppearance){Appearance.set(newAppearance);});export var Appearance=function(){function Appearance(){_classCallCheck(this,Appearance);}_createClass(Appearance,null,[{key:\"getColorScheme\",value:function getColorScheme(){return appearancePreferences.colorScheme;}},{key:\"set\",value:function set(preferences){var colorScheme=preferences.colorScheme;if(appearancePreferences.colorScheme!==colorScheme){appearancePreferences={colorScheme:colorScheme};eventEmitter.emit('change',preferences);}}},{key:\"addChangeListener\",value:function addChangeListener(listener){return eventEmitter.addListener('change',listener);}}]);return Appearance;}();export var AppearanceProvider=function AppearanceProvider(props){return React.createElement(NativeAppearanceProvider,_extends({style:{flex:1}},props,{__source:{fileName:_jsxFileName,lineNumber:70}}));};export function useColorScheme(){var subscription=useMemo(function(){return{getCurrentValue:function getCurrentValue(){return Appearance.getColorScheme();},subscribe:function subscribe(callback){var eventSubscription=Appearance.addChangeListener(callback);return function(){return eventSubscription.remove();};}};},[]);return useSubscription(subscription);}","map":{"version":3,"mappings":"qQAAA,MAAOA,MAAP,EAAgBC,OAAhB,KAA+B,OAA/B,CACA,iFACA,OAASC,YAAT,KAAgD,WAAhD,CACA,OAASC,eAAT,KAAgC,kBAAhC,CAEA,gCAGA,OAASC,gBAAT,CAA2BC,wBAA3B,0BAGA,GAAMC,aAAY,CAAG,GAAIJ,aAAJ,EAArB,CAGA,GAAIK,sBAA4C,CAAGH,gBAAgB,CAACI,kBAApE,CAGA,GAAMC,mBAAkB,CAAG,GAAIC,mBAAJ,CAAuBN,gBAAvB,CAA3B,CACAK,kBAAkB,CAACE,WAAnB,CAA+B,mBAA/B,CAAoD,SAACC,aAAD,CAA0C,CAC5FC,UAAU,CAACC,GAAX,CAAeF,aAAf,EACD,CAFD,EAIA,UAAaC,WAAb,uJAa2C,CACvC,MAAON,sBAAqB,CAACQ,WAA7B,CACD,CAfH,gCAwBaC,WAxBb,CAwBuD,IAC7CD,YAD6C,CAC7BC,WAD6B,CAC7CD,WAD6C,CAInD,GAAIR,qBAAqB,CAACQ,WAAtB,GAAsCA,WAA1C,CAAuD,CACrDR,qBAAqB,CAAG,CAAEQ,WAAW,CAAXA,WAAF,CAAxB,CACAT,YAAY,CAACW,IAAb,CAAkB,QAAlB,CAA4BD,WAA5B,EACD,CACF,CAhCH,4DAqC2BE,QArC3B,CAqC4E,CACxE,MAAOZ,aAAY,CAACK,WAAb,CAAyB,QAAzB,CAAmCO,QAAnC,CAAP,CACD,CAvCH,0BA8CA,MAAO,IAAMC,mBAAkB,CAAG,QAArBA,mBAAqB,CAACC,KAAD,QAChCpB,qBAACK,wBAAD,WAA0BgB,KAAK,CAAE,CAAEC,IAAI,CAAE,CAAR,CAAjC,EAAkDF,KAAlD,mDADgC,EAA3B,CAOP,MAAO,SAASG,eAAT,EAA2C,CAChD,GAAMC,aAAY,CAAGvB,OAAO,CAC1B,iBAAO,CACLwB,eAAe,CAAE,iCAAMZ,WAAU,CAACa,cAAX,EAAN,EADZ,CAELC,SAAS,CAAE,mBAACC,QAAD,CAAkC,CAC3C,GAAIC,kBAAiB,CAAGhB,UAAU,CAACiB,iBAAX,CAA6BF,QAA7B,CAAxB,CACA,MAAO,kBAAMC,kBAAiB,CAACE,MAAlB,EAAN,EAAP,CACD,CALI,CAAP,EAD0B,CAQ1B,EAR0B,CAA5B,CAWA,MAAO5B,gBAAe,CAAkBqB,YAAlB,CAAtB,CACD","names":["React","useMemo","EventEmitter","useSubscription","NativeAppearance","NativeAppearanceProvider","eventEmitter","appearancePreferences","initialPreferences","nativeEventEmitter","NativeEventEmitter","addListener","newAppearance","Appearance","set","colorScheme","preferences","emit","listener","AppearanceProvider","props","style","flex","useColorScheme","subscription","getCurrentValue","getColorScheme","subscribe","callback","eventSubscription","addChangeListener","remove"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/react-native-appearance/lib/module/index.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { NativeEventEmitter } from 'react-native';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\nimport { useSubscription } from 'use-subscription';\nimport { AppearancePreferences, ColorSchemeName, AppearanceListener } from './Appearance.types';\nexport * from './Appearance.types';\n\n// Native modules\nimport { NativeAppearance, NativeAppearanceProvider } from './NativeAppearance';\n\n// Initialize the user-facing event emitter\nconst eventEmitter = new EventEmitter();\n\n// Initialize preferences synchronously\nlet appearancePreferences: AppearancePreferences = NativeAppearance.initialPreferences;\n\n// Initialize the native event emitter\nconst nativeEventEmitter = new NativeEventEmitter(NativeAppearance);\nnativeEventEmitter.addListener('appearanceChanged', (newAppearance: AppearancePreferences) => {\n  Appearance.set(newAppearance);\n});\n\nexport class Appearance {\n  /**\n   * Note: Although appearance is available immediately, it may change (e.g\n   * Dark Mode) so any rendering logic or styles that depend on this should try\n   * to call this function on every render, rather than caching the value (for\n   * example, using inline styles rather than setting a value in a\n   * `StyleSheet`).\n   *\n   * Example: `const colorScheme = Appearance.get('colorScheme');`\n   *\n   * @param {string} preference Name of preference (e.g. 'colorScheme').\n   * @returns {ColorSchemeName} Value for the preference.\n   */\n  static getColorScheme(): ColorSchemeName {\n    return appearancePreferences.colorScheme;\n  }\n\n  /**\n   * This should only be called from native code by sending the\n   * appearanceChanged event.\n   *\n   * @param {object} appearancePreferences Simple string-keyed object of\n   * appearance preferences to set.\n   */\n  static set(preferences: AppearancePreferences): void {\n    let { colorScheme } = preferences;\n\n    // Don't bother emitting if it's the same value\n    if (appearancePreferences.colorScheme !== colorScheme) {\n      appearancePreferences = { colorScheme };\n      eventEmitter.emit('change', preferences);\n    }\n  }\n\n  /**\n   * Add an event handler that is fired when appearance preferences change.\n   */\n  static addChangeListener(listener: AppearanceListener): EventSubscription {\n    return eventEmitter.addListener('change', listener);\n  }\n}\n\n/**\n * Temporarily require a Provider since the upstream implementation uses root view customizations\n * to accomplish this same behavior\n */\nexport const AppearanceProvider = (props: { children: any }) => (\n  <NativeAppearanceProvider style={{ flex: 1 }} {...props} />\n);\n\n/**\n * Subscribe to color scheme updates\n */\nexport function useColorScheme(): ColorSchemeName {\n  const subscription = useMemo(\n    () => ({\n      getCurrentValue: () => Appearance.getColorScheme(),\n      subscribe: (callback: AppearanceListener) => {\n        let eventSubscription = Appearance.addChangeListener(callback);\n        return () => eventSubscription.remove();\n      },\n    }),\n    [],\n  );\n\n  return useSubscription<ColorSchemeName>(subscription);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}