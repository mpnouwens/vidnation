{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";var _jsxFileName=\"/Users/brentvatne/code/react-native-appearance/src/NativeAppearance.web.tsx\";import*as React from'react';import View from\"react-native-web/dist/exports/View\";import SyntheticPlatformEmitter from\"./web/SyntheticPlatformEmitter\";function getQuery(){if(typeof window==='undefined'||!window.matchMedia)return null;return window.matchMedia('(prefers-color-scheme: dark)');}function isMediaQueryList(query){return query&&query.addListener&&query.removeListener&&typeof query.matches==='boolean';}export var NativeAppearance={get name(){return'NativeAppearance';},get initialPreferences(){var query=getQuery();if(isMediaQueryList(query)){return{colorScheme:query.matches?'dark':'light'};}return{colorScheme:'no-preference'};}};export function NativeAppearanceProvider(props){React.useEffect(function(){var query=getQuery();function listener(_ref){var matches=_ref.matches;var colorScheme=matches?'dark':'light';SyntheticPlatformEmitter.emit('appearanceChanged',{colorScheme:colorScheme});}if(query)query.addListener(listener);return function(){if(query){query.removeListener(listener);}};},[]);return React.createElement(View,_extends({style:{flex:1}},props,{__source:{fileName:_jsxFileName,lineNumber:51}}));};","map":{"version":3,"mappings":"oJAAA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,CACA,qDAIA,MAAOC,yBAAP,sCAEA,QAASC,SAAT,EAA2C,CACzC,GAAI,MAAOC,OAAP,GAAkB,WAAlB,EAAiC,CAACA,MAAM,CAACC,UAA7C,CAAyD,MAAO,KAAP,CACzD,MAAOD,OAAM,CAACC,UAAP,CAAkB,8BAAlB,CAAP,CACD,CAED,QAASC,iBAAT,CAA0BC,KAA1B,CAA+D,CAC7D,MAAOA,MAAK,EAAIA,KAAK,CAACC,WAAf,EAA8BD,KAAK,CAACE,cAApC,EAAsD,MAAOF,MAAK,CAACG,OAAb,GAAyB,SAAtF,CACD,CAED,MAAO,IAAMC,iBAAgB,CAAG,CAC9B,GAAIC,KAAJ,EAAmB,CACjB,MAAO,kBAAP,CACD,CAH6B,CAI9B,GAAIC,mBAAJ,EAAgD,CAC9C,GAAMN,MAAK,CAAGJ,QAAQ,EAAtB,CACA,GAAIG,gBAAgB,CAACC,KAAD,CAApB,CAA6B,CAC3B,MAAO,CAAEO,WAAW,CAAEP,KAAK,CAACG,OAAN,CAAgB,MAAhB,CAAyB,OAAxC,CAAP,CACD,CACD,MAAO,CAAEI,WAAW,CAAE,eAAf,CAAP,CACD,CAV6B,CAAzB,CAaP,MAAO,SAASC,yBAAT,CAAkCC,KAAlC,CAA8C,CACnDf,KAAK,CAACgB,SAAN,CAAgB,UAAM,CACpB,GAAMV,MAAK,CAAGJ,QAAQ,EAAtB,CAEA,QAASe,SAAT,MAAoD,IAAhCR,QAAgC,MAAhCA,OAAgC,CAClD,GAAMI,YAAW,CAAGJ,OAAO,CAAG,MAAH,CAAY,OAAvC,CACAR,wBAAwB,CAACiB,IAAzB,CAA8B,mBAA9B,CAAmD,CACjDL,WAAW,CAAXA,WADiD,CAAnD,EAGD,CAED,GAAIP,KAAJ,CACEA,KAAK,CAACC,WAAN,CAAkBU,QAAlB,EAEF,MAAO,WAAM,CACX,GAAIX,KAAJ,CAAW,CACTA,KAAK,CAACE,cAAN,CAAqBS,QAArB,EACD,CACF,CAJD,CAKD,CAlBD,CAkBG,EAlBH,EAoBA,MAAOjB,qBAACmB,IAAD,WAAMC,KAAK,CAAE,CAAEC,IAAI,CAAE,CAAR,CAAb,EAA8BN,KAA9B,mDAAP,CACD","names":["React","SyntheticPlatformEmitter","getQuery","window","matchMedia","isMediaQueryList","query","addListener","removeListener","matches","NativeAppearance","name","initialPreferences","colorScheme","NativeAppearanceProvider","props","useEffect","listener","emit","View","style","flex"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/react-native-appearance/lib/module/NativeAppearance.web.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View } from 'react-native';\n\nimport { AppearancePreferences } from './Appearance.types';\n// @ts-ignore\nimport SyntheticPlatformEmitter from './web/SyntheticPlatformEmitter';\n\nfunction getQuery(): MediaQueryList | null {\n  if (typeof window === 'undefined' || !window.matchMedia) return null;\n  return window.matchMedia('(prefers-color-scheme: dark)');\n}\n\nfunction isMediaQueryList(query: any): query is MediaQueryList {\n  return query && query.addListener && query.removeListener && typeof query.matches === 'boolean';\n}\n\nexport const NativeAppearance = {\n  get name(): string {\n    return 'NativeAppearance';\n  },\n  get initialPreferences(): AppearancePreferences {\n    const query = getQuery();\n    if (isMediaQueryList(query)) {\n      return { colorScheme: query.matches ? 'dark' : 'light' }\n    }\n    return { colorScheme: 'no-preference' };\n  },\n};\n\nexport function NativeAppearanceProvider(props: any) {\n  React.useEffect(() => {\n    const query = getQuery();\n\n    function listener({ matches }: MediaQueryListEvent) {\n      const colorScheme = matches ? 'dark' : 'light';\n      SyntheticPlatformEmitter.emit('appearanceChanged', {\n        colorScheme,\n      });\n    }\n\n    if (query)\n      query.addListener(listener);\n\n    return () => {\n      if (query) {\n        query.removeListener(listener)\n      }\n    }\n  }, []);\n\n  return <View style={{ flex: 1 }} {...props} />\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}