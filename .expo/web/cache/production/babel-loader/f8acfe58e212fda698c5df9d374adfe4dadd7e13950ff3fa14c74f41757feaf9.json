{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _defineProperty2 from\"@babel/runtime/helpers/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty2(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import View from\"react-native-web/dist/exports/View\";import Platform from\"react-native-web/dist/exports/Platform\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import{SafeAreaConsumer}from'react-native-safe-area-context';import{NavigationHelpersContext,StackActions}from'@react-navigation/native';import{GestureHandlerRootView}from\"../GestureHandler\";import CardStack from\"./CardStack\";import KeyboardManager from\"../KeyboardManager\";import HeaderContainer from\"../Header/HeaderContainer\";import SafeAreaProviderCompat from\"../SafeAreaProviderCompat\";var GestureHandlerWrapper=GestureHandlerRootView!==null&&GestureHandlerRootView!==void 0?GestureHandlerRootView:View;var isArrayEqual=function isArrayEqual(a,b){return a.length===b.length&&a.every(function(it,index){return it===b[index];});};var StackView=function(_React$Component){_inherits(StackView,_React$Component);var _super=_createSuper(StackView);function StackView(){var _this;_classCallCheck(this,StackView);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty(_assertThisInitialized(_this),\"state\",{routes:[],previousRoutes:[],previousDescriptors:{},openingRouteKeys:[],closingRouteKeys:[],replacingRouteKeys:[],descriptors:{}});_defineProperty(_assertThisInitialized(_this),\"getGesturesEnabled\",function(_ref){var route=_ref.route;var descriptor=_this.state.descriptors[route.key];if(descriptor){var _descriptor$options=descriptor.options,gestureEnabled=_descriptor$options.gestureEnabled,animationEnabled=_descriptor$options.animationEnabled;if(animationEnabled===false){return false;}return gestureEnabled!==false;}return false;});_defineProperty(_assertThisInitialized(_this),\"getPreviousRoute\",function(_ref2){var route=_ref2.route;var _this$state=_this.state,closingRouteKeys=_this$state.closingRouteKeys,replacingRouteKeys=_this$state.replacingRouteKeys;var routes=_this.state.routes.filter(function(r){return r.key===route.key||!closingRouteKeys.includes(r.key)&&!replacingRouteKeys.includes(r.key);});var index=routes.findIndex(function(r){return r.key===route.key;});return routes[index-1];});_defineProperty(_assertThisInitialized(_this),\"renderScene\",function(_ref3){var route=_ref3.route;var descriptor=_this.state.descriptors[route.key]||_this.props.descriptors[route.key];if(!descriptor){return null;}return descriptor.render();});_defineProperty(_assertThisInitialized(_this),\"renderHeader\",function(props){return React.createElement(HeaderContainer,props);});_defineProperty(_assertThisInitialized(_this),\"handleOpenRoute\",function(_ref4){var route=_ref4.route;var _this$props=_this.props,state=_this$props.state,navigation=_this$props.navigation;var _this$state2=_this.state,closingRouteKeys=_this$state2.closingRouteKeys,replacingRouteKeys=_this$state2.replacingRouteKeys;if(closingRouteKeys.some(function(key){return key===route.key;})&&replacingRouteKeys.every(function(key){return key!==route.key;})&&state.routeNames.includes(route.name)&&!state.routes.some(function(r){return r.key===route.key;})){navigation.navigate(route);}else{_this.setState(function(state){return{routes:state.replacingRouteKeys.length?state.routes.filter(function(r){return!state.replacingRouteKeys.includes(r.key);}):state.routes,openingRouteKeys:state.openingRouteKeys.filter(function(key){return key!==route.key;}),closingRouteKeys:state.closingRouteKeys.filter(function(key){return key!==route.key;}),replacingRouteKeys:[]};});}});_defineProperty(_assertThisInitialized(_this),\"handleCloseRoute\",function(_ref5){var route=_ref5.route;var _this$props2=_this.props,state=_this$props2.state,navigation=_this$props2.navigation;if(state.routes.some(function(r){return r.key===route.key;})){navigation.dispatch(_objectSpread(_objectSpread({},StackActions.pop()),{},{source:route.key,target:state.key}));}else{_this.setState(function(state){return{routes:state.routes.filter(function(r){return r.key!==route.key;}),openingRouteKeys:state.openingRouteKeys.filter(function(key){return key!==route.key;}),closingRouteKeys:state.closingRouteKeys.filter(function(key){return key!==route.key;})};});}});_defineProperty(_assertThisInitialized(_this),\"handleTransitionStart\",function(_ref6,closing){var route=_ref6.route;return _this.props.navigation.emit({type:'transitionStart',data:{closing:closing},target:route.key});});_defineProperty(_assertThisInitialized(_this),\"handleTransitionEnd\",function(_ref7,closing){var route=_ref7.route;return _this.props.navigation.emit({type:'transitionEnd',data:{closing:closing},target:route.key});});_defineProperty(_assertThisInitialized(_this),\"handleGestureStart\",function(_ref8){var route=_ref8.route;_this.props.navigation.emit({type:'gestureStart',target:route.key});});_defineProperty(_assertThisInitialized(_this),\"handleGestureEnd\",function(_ref9){var route=_ref9.route;_this.props.navigation.emit({type:'gestureEnd',target:route.key});});_defineProperty(_assertThisInitialized(_this),\"handleGestureCancel\",function(_ref10){var route=_ref10.route;_this.props.navigation.emit({type:'gestureCancel',target:route.key});});return _this;}_createClass(StackView,[{key:\"render\",value:function render(){var _this2=this;var _this$props3=this.props,state=_this$props3.state,navigation=_this$props3.navigation,keyboardHandlingEnabled=_this$props3.keyboardHandlingEnabled,_this$props3$mode=_this$props3.mode,mode=_this$props3$mode===void 0?'card':_this$props3$mode,_this$props3$headerMo=_this$props3.headerMode,headerMode=_this$props3$headerMo===void 0?mode==='card'&&Platform.OS==='ios'?'float':'screen':_this$props3$headerMo,_=_this$props3.descriptors,rest=_objectWithoutProperties(_this$props3,[\"state\",\"navigation\",\"keyboardHandlingEnabled\",\"mode\",\"headerMode\",\"descriptors\"]);var _this$state3=this.state,routes=_this$state3.routes,descriptors=_this$state3.descriptors,openingRouteKeys=_this$state3.openingRouteKeys,closingRouteKeys=_this$state3.closingRouteKeys;return React.createElement(NavigationHelpersContext.Provider,{value:navigation},React.createElement(GestureHandlerWrapper,{style:styles.container},React.createElement(SafeAreaProviderCompat,null,React.createElement(SafeAreaConsumer,null,function(insets){return React.createElement(KeyboardManager,{enabled:keyboardHandlingEnabled!==false},function(props){return React.createElement(CardStack,_extends({mode:mode,insets:insets,getPreviousRoute:_this2.getPreviousRoute,getGesturesEnabled:_this2.getGesturesEnabled,routes:routes,openingRouteKeys:openingRouteKeys,closingRouteKeys:closingRouteKeys,onOpenRoute:_this2.handleOpenRoute,onCloseRoute:_this2.handleCloseRoute,onTransitionStart:_this2.handleTransitionStart,onTransitionEnd:_this2.handleTransitionEnd,renderHeader:_this2.renderHeader,renderScene:_this2.renderScene,headerMode:headerMode,state:state,descriptors:descriptors,onGestureStart:_this2.handleGestureStart,onGestureEnd:_this2.handleGestureEnd,onGestureCancel:_this2.handleGestureCancel},rest,props));});}))));}}],[{key:\"getDerivedStateFromProps\",value:function getDerivedStateFromProps(props,state){if((props.state.routes===state.previousRoutes||isArrayEqual(props.state.routes.map(function(r){return r.key;}),state.previousRoutes.map(function(r){return r.key;})))&&state.routes.length){var _routes=state.routes;var _previousRoutes=state.previousRoutes;var _descriptors=props.descriptors;var previousDescriptors=state.previousDescriptors;if(props.descriptors!==state.previousDescriptors){_descriptors=state.routes.reduce(function(acc,route){acc[route.key]=props.descriptors[route.key]||state.descriptors[route.key];return acc;},{});previousDescriptors=props.descriptors;}if(props.state.routes!==state.previousRoutes){var map=props.state.routes.reduce(function(acc,route){acc[route.key]=route;return acc;},{});_routes=state.routes.map(function(route){return map[route.key]||route;});_previousRoutes=props.state.routes;}return{routes:_routes,previousRoutes:_previousRoutes,descriptors:_descriptors,previousDescriptors:previousDescriptors};}var routes=props.state.index<props.state.routes.length-1?props.state.routes.slice(0,props.state.index+1):props.state.routes;var openingRouteKeys=state.openingRouteKeys,closingRouteKeys=state.closingRouteKeys,replacingRouteKeys=state.replacingRouteKeys,previousRoutes=state.previousRoutes;var previousFocusedRoute=previousRoutes[previousRoutes.length-1];var nextFocusedRoute=routes[routes.length-1];var isAnimationEnabled=function isAnimationEnabled(key){var descriptor=props.descriptors[key]||state.descriptors[key];return descriptor?descriptor.options.animationEnabled!==false:true;};var getAnimationTypeForReplace=function getAnimationTypeForReplace(key){var _descriptor$options$a;var descriptor=props.descriptors[key]||state.descriptors[key];return(_descriptor$options$a=descriptor.options.animationTypeForReplace)!==null&&_descriptor$options$a!==void 0?_descriptor$options$a:'push';};if(previousFocusedRoute&&previousFocusedRoute.key!==nextFocusedRoute.key){if(!previousRoutes.some(function(r){return r.key===nextFocusedRoute.key;})){if(isAnimationEnabled(nextFocusedRoute.key)&&!openingRouteKeys.includes(nextFocusedRoute.key)){openingRouteKeys=[].concat(_toConsumableArray(openingRouteKeys),[nextFocusedRoute.key]);closingRouteKeys=closingRouteKeys.filter(function(key){return key!==nextFocusedRoute.key;});replacingRouteKeys=replacingRouteKeys.filter(function(key){return key!==nextFocusedRoute.key;});if(!routes.some(function(r){return r.key===previousFocusedRoute.key;})){openingRouteKeys=openingRouteKeys.filter(function(key){return key!==previousFocusedRoute.key;});if(getAnimationTypeForReplace(nextFocusedRoute.key)==='pop'){closingRouteKeys=[].concat(_toConsumableArray(closingRouteKeys),[previousFocusedRoute.key]);openingRouteKeys=openingRouteKeys.filter(function(key){return key!==nextFocusedRoute.key;});routes=[].concat(_toConsumableArray(routes),[previousFocusedRoute]);}else{replacingRouteKeys=[].concat(_toConsumableArray(replacingRouteKeys),[previousFocusedRoute.key]);closingRouteKeys=closingRouteKeys.filter(function(key){return key!==previousFocusedRoute.key;});routes=routes.slice();routes.splice(routes.length-1,0,previousFocusedRoute);}}}}else if(!routes.some(function(r){return r.key===previousFocusedRoute.key;})){if(isAnimationEnabled(previousFocusedRoute.key)&&!closingRouteKeys.includes(previousFocusedRoute.key)){closingRouteKeys=[].concat(_toConsumableArray(closingRouteKeys),[previousFocusedRoute.key]);openingRouteKeys=openingRouteKeys.filter(function(key){return key!==previousFocusedRoute.key;});replacingRouteKeys=replacingRouteKeys.filter(function(key){return key!==previousFocusedRoute.key;});routes=[].concat(_toConsumableArray(routes),[previousFocusedRoute]);}}else{}}else if(replacingRouteKeys.length||closingRouteKeys.length){var _routes2;routes=routes.slice();(_routes2=routes).splice.apply(_routes2,[routes.length-1,0].concat(_toConsumableArray(state.routes.filter(function(_ref11){var key=_ref11.key;return isAnimationEnabled(key)?replacingRouteKeys.includes(key)||closingRouteKeys.includes(key):false;}))));}if(!routes.length){throw new Error('There should always be at least one route in the navigation state.');}var descriptors=routes.reduce(function(acc,route){acc[route.key]=props.descriptors[route.key]||state.descriptors[route.key];return acc;},{});return{routes:routes,previousRoutes:props.state.routes,previousDescriptors:props.descriptors,openingRouteKeys:openingRouteKeys,closingRouteKeys:closingRouteKeys,replacingRouteKeys:replacingRouteKeys,descriptors:descriptors};}}]);return StackView;}(React.Component);export{StackView as default};var styles=StyleSheet.create({container:{flex:1}});","map":{"version":3,"mappings":"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","names":["React","SafeAreaConsumer","NavigationHelpersContext","StackActions","GestureHandlerRootView","CardStack","KeyboardManager","HeaderContainer","SafeAreaProviderCompat","GestureHandlerWrapper","View","isArrayEqual","a","b","length","every","it","index","StackView","routes","previousRoutes","previousDescriptors","openingRouteKeys","closingRouteKeys","replacingRouteKeys","descriptors","route","descriptor","state","key","options","gestureEnabled","animationEnabled","filter","r","includes","findIndex","props","render","navigation","some","routeNames","name","navigate","setState","dispatch","pop","source","target","closing","emit","type","data","keyboardHandlingEnabled","mode","headerMode","Platform","OS","_","rest","Provider","value","style","styles","container","insets","enabled","getPreviousRoute","getGesturesEnabled","onOpenRoute","handleOpenRoute","onCloseRoute","handleCloseRoute","onTransitionStart","handleTransitionStart","onTransitionEnd","handleTransitionEnd","renderHeader","renderScene","onGestureStart","handleGestureStart","onGestureEnd","handleGestureEnd","onGestureCancel","handleGestureCancel","map","reduce","acc","slice","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","getAnimationTypeForReplace","animationTypeForReplace","splice","Error","Component","StyleSheet","create","flex"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/@react-navigation/stack/lib/module/views/Stack/StackView.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, Platform, StyleSheet } from 'react-native';\nimport { SafeAreaConsumer, EdgeInsets } from 'react-native-safe-area-context';\nimport {\n  NavigationHelpersContext,\n  StackActions,\n  StackNavigationState,\n  Route,\n} from '@react-navigation/native';\n\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport CardStack from './CardStack';\nimport KeyboardManager from '../KeyboardManager';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport SafeAreaProviderCompat from '../SafeAreaProviderCompat';\nimport type {\n  StackNavigationHelpers,\n  StackNavigationConfig,\n  StackDescriptorMap,\n} from '../../types';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      (props.state.routes === state.previousRoutes ||\n        isArrayEqual(\n          props.state.routes.map((r) => r.key),\n          state.previousRoutes.map((r) => r.key)\n        )) &&\n      state.routes.length\n    ) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\n          acc[route.key] =\n            props.descriptors[route.key] || state.descriptors[route.key];\n\n          return acc;\n        }, {});\n\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\n          (acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          },\n          {}\n        );\n\n        routes = state.routes.map((route) => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors,\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.some((r) => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              (key) => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                (key) => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                (key) => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getGesturesEnabled = ({ route }: { route: Route<string> }) => {\n    const descriptor = this.state.descriptors[route.key];\n\n    if (descriptor) {\n      const { gestureEnabled, animationEnabled } = descriptor.options;\n\n      if (animationEnabled === false) {\n        // When animation is disabled, also disable gestures\n        // The gesture to dismiss a route will look weird when not animated\n        return false;\n      }\n\n      return gestureEnabled !== false;\n    }\n\n    return false;\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      (r) =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex((r) => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    return descriptor.render();\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n\n    if (\n      closingRouteKeys.some((key) => key === route.key) &&\n      replacingRouteKeys.every((key) => key !== route.key) &&\n      state.routeNames.includes(route.name) &&\n      !state.routes.some((r) => r.key === route.key)\n    ) {\n      // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n      // So we need to add this route back to the state\n      navigation.navigate(route);\n    } else {\n      this.setState((state) => ({\n        routes: state.replacingRouteKeys.length\n          ? state.routes.filter(\n              (r) => !state.replacingRouteKeys.includes(r.key)\n            )\n          : state.routes,\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        replacingRouteKeys: [],\n      }));\n    }\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.some((r) => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      navigation.dispatch({\n        ...StackActions.pop(),\n        source: route.key,\n        target: state.key,\n      });\n    } else {\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState((state) => ({\n        routes: state.routes.filter((r) => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionStart',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionEnd',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleGestureStart = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureStart',\n      target: route.key,\n    });\n  };\n\n  private handleGestureEnd = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureEnd',\n      target: route.key,\n    });\n  };\n\n  private handleGestureCancel = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureCancel',\n      target: route.key,\n    });\n  };\n\n  render() {\n    const {\n      state,\n      navigation,\n      keyboardHandlingEnabled,\n      mode = 'card',\n      headerMode = mode === 'card' && Platform.OS === 'ios'\n        ? 'float'\n        : 'screen',\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n    } = this.state;\n\n    return (\n      <NavigationHelpersContext.Provider value={navigation}>\n        <GestureHandlerWrapper style={styles.container}>\n          <SafeAreaProviderCompat>\n            <SafeAreaConsumer>\n              {(insets) => (\n                <KeyboardManager enabled={keyboardHandlingEnabled !== false}>\n                  {(props) => (\n                    <CardStack\n                      mode={mode}\n                      insets={insets as EdgeInsets}\n                      getPreviousRoute={this.getPreviousRoute}\n                      getGesturesEnabled={this.getGesturesEnabled}\n                      routes={routes}\n                      openingRouteKeys={openingRouteKeys}\n                      closingRouteKeys={closingRouteKeys}\n                      onOpenRoute={this.handleOpenRoute}\n                      onCloseRoute={this.handleCloseRoute}\n                      onTransitionStart={this.handleTransitionStart}\n                      onTransitionEnd={this.handleTransitionEnd}\n                      renderHeader={this.renderHeader}\n                      renderScene={this.renderScene}\n                      headerMode={headerMode}\n                      state={state}\n                      descriptors={descriptors}\n                      onGestureStart={this.handleGestureStart}\n                      onGestureEnd={this.handleGestureEnd}\n                      onGestureCancel={this.handleGestureCancel}\n                      {...rest}\n                      {...props}\n                    />\n                  )}\n                </KeyboardManager>\n              )}\n            </SafeAreaConsumer>\n          </SafeAreaProviderCompat>\n        </GestureHandlerWrapper>\n      </NavigationHelpersContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}