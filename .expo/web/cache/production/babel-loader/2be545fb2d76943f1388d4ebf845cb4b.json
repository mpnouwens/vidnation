{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import TouchableNativeFeedback from\"react-native-web/dist/exports/TouchableNativeFeedback\";import TouchableOpacity from\"react-native-web/dist/exports/TouchableOpacity\";import View from\"react-native-web/dist/exports/View\";var ANDROID_VERSION_LOLLIPOP=21;export default function TouchableItem(_ref){var _ref$borderless=_ref.borderless,borderless=_ref$borderless===void 0?false:_ref$borderless,_ref$pressColor=_ref.pressColor,pressColor=_ref$pressColor===void 0?'rgba(0, 0, 0, .32)':_ref$pressColor,style=_ref.style,children=_ref.children,rest=_objectWithoutProperties(_ref,[\"borderless\",\"pressColor\",\"style\",\"children\"]);if(Platform.OS==='android'&&Platform.Version>=ANDROID_VERSION_LOLLIPOP){return React.createElement(TouchableNativeFeedback,_extends({},rest,{useForeground:TouchableNativeFeedback.canUseNativeForeground(),background:TouchableNativeFeedback.Ripple(pressColor,borderless)}),React.createElement(View,{style:style},React.Children.only(children)));}else{return React.createElement(TouchableOpacity,_extends({style:style},rest),children);}}","map":{"version":3,"sources":["TouchableItem.tsx"],"names":["ANDROID_VERSION_LOLLIPOP","borderless","pressColor","rest","Platform","TouchableNativeFeedback","style","React"],"mappings":"4WAOA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,0RAkBA,GAAMA,CAAAA,wBAAwB,CAA9B,EAAA,CAEA,cAAe,SAAA,CAAA,aAAA,MAML,0BALRC,UAKQ,CALRA,UAKQ,0BAN4B,KAM5B,sCAJRC,UAIQ,CAJRA,UAIQ,0BAN4B,oBAM5B,iBAN4B,KAM5B,MAN4B,KAM5B,CAN4B,QAM5B,MAN4B,QAM5B,CADLC,IACK,+EASR,GACEC,QAAQ,CAARA,EAAAA,GAAAA,SAAAA,EACAA,QAAQ,CAARA,OAAAA,EAFF,wBAAA,CAGE,CACA,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,uBAAA,CAAA,QAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAEE,aAAa,CAAEC,uBAAuB,CAFxC,sBAEiBA,EAFjB,CAGE,UAAU,CAAEA,uBAAuB,CAAvBA,MAAAA,CAAAA,UAAAA,CAAAA,UAAAA,CAHd,CAAA,CAAA,CAKE,KAAA,CAAA,aAAA,CAAA,IAAA,CAAA,CAAM,KAAK,CAAEC,KAAb,CAAA,CAAqBC,KAAK,CAALA,QAAAA,CAAAA,IAAAA,CANzB,QAMyBA,CAArB,CALF,CADF,CAJF,CAAA,IAaO,CACL,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,gBAAA,CAAA,QAAA,CAAA,CAAkB,KAAK,CAAED,KAAzB,CAAA,CAAA,IAAA,CAAA,CADF,QACE,CADF,CAKD,CACF","sourcesContent":["/**\n * TouchableItem provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity to handle platform differences.\n *\n * On Android, you can pass the props of TouchableNativeFeedback.\n * On other platforms, you can pass the props of TouchableOpacity.\n */\nimport * as React from 'react';\nimport {\n  Platform,\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  View,\n  ViewProps,\n} from 'react-native';\n\nexport type Props = ViewProps & {\n  pressColor?: string;\n  disabled?: boolean;\n  borderless?: boolean;\n  delayPressIn?: number;\n  onPress?: () => void;\n  children: React.ReactNode;\n};\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\n\nexport default function TouchableItem({\n  borderless = false,\n  pressColor = 'rgba(0, 0, 0, .32)',\n  style,\n  children,\n  ...rest\n}: Props) {\n  /*\n   * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\n   * therefore only enable it on Android Lollipop and above.\n   *\n   * All touchables on Android should have the ripple effect according to\n   * platform design guidelines.\n   * We need to pass the background prop to specify a borderless ripple effect.\n   */\n  if (\n    Platform.OS === 'android' &&\n    Platform.Version >= ANDROID_VERSION_LOLLIPOP\n  ) {\n    return (\n      <TouchableNativeFeedback\n        {...rest}\n        useForeground={TouchableNativeFeedback.canUseNativeForeground()}\n        background={TouchableNativeFeedback.Ripple(pressColor, borderless)}\n      >\n        <View style={style}>{React.Children.only(children)}</View>\n      </TouchableNativeFeedback>\n    );\n  } else {\n    return (\n      <TouchableOpacity style={style} {...rest}>\n        {children}\n      </TouchableOpacity>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}