{"ast":null,"code":"'use strict';var NEWTON_ITERATIONS=4;var NEWTON_MIN_SLOPE=0.001;var SUBDIVISION_PRECISION=0.0000001;var SUBDIVISION_MAX_ITERATIONS=10;var kSplineTableSize=11;var kSampleStepSize=1.0/(kSplineTableSize-1.0);var float32ArraySupported=typeof Float32Array==='function';function A(aA1,aA2){return 1.0-3.0*aA2+3.0*aA1;}function B(aA1,aA2){return 3.0*aA2-6.0*aA1;}function C(aA1){return 3.0*aA1;}function calcBezier(aT,aA1,aA2){return((A(aA1,aA2)*aT+B(aA1,aA2))*aT+C(aA1))*aT;}function getSlope(aT,aA1,aA2){return 3.0*A(aA1,aA2)*aT*aT+2.0*B(aA1,aA2)*aT+C(aA1);}function binarySubdivide(aX,_aA,_aB,mX1,mX2){var currentX,currentT,i=0,aA=_aA,aB=_aB;do{currentT=aA+(aB-aA)/2.0;currentX=calcBezier(currentT,mX1,mX2)-aX;if(currentX>0.0){aB=currentT;}else{aA=currentT;}}while(Math.abs(currentX)>SUBDIVISION_PRECISION&&++i<SUBDIVISION_MAX_ITERATIONS);return currentT;}function newtonRaphsonIterate(aX,_aGuessT,mX1,mX2){var aGuessT=_aGuessT;for(var i=0;i<NEWTON_ITERATIONS;++i){var currentSlope=getSlope(aGuessT,mX1,mX2);if(currentSlope===0.0){return aGuessT;}var currentX=calcBezier(aGuessT,mX1,mX2)-aX;aGuessT-=currentX/currentSlope;}return aGuessT;}module.exports=function bezier(mX1,mY1,mX2,mY2){if(!(mX1>=0&&mX1<=1&&mX2>=0&&mX2<=1)){throw new Error('bezier x values must be in [0, 1] range');}var sampleValues=float32ArraySupported?new Float32Array(kSplineTableSize):new Array(kSplineTableSize);if(mX1!==mY1||mX2!==mY2){for(var i=0;i<kSplineTableSize;++i){sampleValues[i]=calcBezier(i*kSampleStepSize,mX1,mX2);}}function getTForX(aX){var intervalStart=0.0;var currentSample=1;var lastSample=kSplineTableSize-1;for(;currentSample!==lastSample&&sampleValues[currentSample]<=aX;++currentSample){intervalStart+=kSampleStepSize;}--currentSample;var dist=(aX-sampleValues[currentSample])/(sampleValues[currentSample+1]-sampleValues[currentSample]);var guessForT=intervalStart+dist*kSampleStepSize;var initialSlope=getSlope(guessForT,mX1,mX2);if(initialSlope>=NEWTON_MIN_SLOPE){return newtonRaphsonIterate(aX,guessForT,mX1,mX2);}else if(initialSlope===0.0){return guessForT;}else{return binarySubdivide(aX,intervalStart,intervalStart+kSampleStepSize,mX1,mX2);}}return function BezierEasing(x){if(mX1===mY1&&mX2===mY2){return x;}if(x===0){return 0;}if(x===1){return 1;}return calcBezier(getTForX(x),mY1,mY2);};};","map":{"version":3,"names":["NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","float32ArraySupported","Float32Array","A","aA1","aA2","B","C","calcBezier","aT","getSlope","binarySubdivide","aX","_aA","_aB","mX1","mX2","currentX","currentT","i","aA","aB","Math","abs","newtonRaphsonIterate","_aGuessT","aGuessT","currentSlope","module","exports","bezier","mY1","mY2","Error","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","BezierEasing","x"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/react-native-web/dist/vendor/react-native/Animated/bezier.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * BezierEasing - use bezier curve for transition easing function\n * https://github.com/gre/bezier-easing\n *\n * \n * @format\n * @copyright 2014-2015 GaÃ«tan Renaudeau. MIT License.\n */\n'use strict'; // These values are established by empiricism with tests (tradeoff: performance VS precision)\n\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A(aA1, aA2) {\n  return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\n\nfunction B(aA1, aA2) {\n  return 3.0 * aA2 - 6.0 * aA1;\n}\n\nfunction C(aA1) {\n  return 3.0 * aA1;\n} // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n\n\nfunction calcBezier(aT, aA1, aA2) {\n  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n} // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n\n\nfunction getSlope(aT, aA1, aA2) {\n  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n}\n\nfunction binarySubdivide(aX, _aA, _aB, mX1, mX2) {\n  var currentX,\n      currentT,\n      i = 0,\n      aA = _aA,\n      aB = _aB;\n\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n\n  return currentT;\n}\n\nfunction newtonRaphsonIterate(aX, _aGuessT, mX1, mX2) {\n  var aGuessT = _aGuessT;\n\n  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n    var currentSlope = getSlope(aGuessT, mX1, mX2);\n\n    if (currentSlope === 0.0) {\n      return aGuessT;\n    }\n\n    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n    aGuessT -= currentX / currentSlope;\n  }\n\n  return aGuessT;\n}\n\nmodule.exports = function bezier(mX1, mY1, mX2, mY2) {\n  if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n    throw new Error('bezier x values must be in [0, 1] range');\n  } // Precompute samples table\n\n\n  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n\n  if (mX1 !== mY1 || mX2 !== mY2) {\n    for (var i = 0; i < kSplineTableSize; ++i) {\n      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  function getTForX(aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = kSplineTableSize - 1;\n\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += kSampleStepSize;\n    }\n\n    --currentSample; // Interpolate to provide an initial guess for t\n\n    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  return function BezierEasing(x) {\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x; // linear\n    } // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n\n\n    if (x === 0) {\n      return 0;\n    }\n\n    if (x === 1) {\n      return 1;\n    }\n\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}