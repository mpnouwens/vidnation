{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import*as React from'react';import NavigationStateContext from\"./NavigationStateContext\";import StaticContainer from\"./StaticContainer\";import EnsureSingleNavigator from\"./EnsureSingleNavigator\";import useOptionsGetters from\"./useOptionsGetters\";export default function SceneView(_ref){var screen=_ref.screen,route=_ref.route,navigation=_ref.navigation,getState=_ref.getState,setState=_ref.setState,options=_ref.options;var navigatorKeyRef=React.useRef();var getKey=React.useCallback(function(){return navigatorKeyRef.current;},[]);var _useOptionsGetters=useOptionsGetters({key:route.key,options:options,navigation:navigation}),addOptionsGetter=_useOptionsGetters.addOptionsGetter;var setKey=React.useCallback(function(key){navigatorKeyRef.current=key;},[]);var getCurrentState=React.useCallback(function(){var state=getState();var currentRoute=state.routes.find(function(r){return r.key===route.key;});return currentRoute?currentRoute.state:undefined;},[getState,route.key]);var setCurrentState=React.useCallback(function(child){var state=getState();setState(_objectSpread(_objectSpread({},state),{},{routes:state.routes.map(function(r){return r.key===route.key?_objectSpread(_objectSpread({},r),{},{state:child}):r;})}));},[getState,route.key,setState]);var isInitialRef=React.useRef(true);React.useEffect(function(){isInitialRef.current=false;});var getIsInitial=React.useCallback(function(){return isInitialRef.current;},[]);var context=React.useMemo(function(){return{state:route.state,getState:getCurrentState,setState:setCurrentState,getKey:getKey,setKey:setKey,getIsInitial:getIsInitial,addOptionsGetter:addOptionsGetter};},[route.state,getCurrentState,setCurrentState,getKey,setKey,getIsInitial,addOptionsGetter]);var ScreenComponent=screen.getComponent?screen.getComponent():screen.component;return React.createElement(NavigationStateContext.Provider,{value:context},React.createElement(EnsureSingleNavigator,null,React.createElement(StaticContainer,{name:screen.name,render:ScreenComponent||screen.children,navigation:navigation,route:route},ScreenComponent!==undefined?React.createElement(ScreenComponent,{navigation:navigation,route:route}):screen.children!==undefined?screen.children({navigation:navigation,route:route}):null)));}","map":{"version":3,"mappings":"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","names":["React","NavigationStateContext","StaticContainer","EnsureSingleNavigator","useOptionsGetters","SceneView","screen","route","navigation","getState","setState","options","navigatorKeyRef","useRef","getKey","useCallback","current","key","addOptionsGetter","setKey","getCurrentState","state","currentRoute","routes","find","r","undefined","setCurrentState","child","map","isInitialRef","useEffect","getIsInitial","context","useMemo","ScreenComponent","getComponent","component","Provider","value","name","render","children"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/@react-navigation/core/lib/module/SceneView.tsx"],"sourcesContent":["import * as React from 'react';\nimport type {\n  Route,\n  ParamListBase,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport NavigationStateContext from './NavigationStateContext';\nimport StaticContainer from './StaticContainer';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport useOptionsGetters from './useOptionsGetters';\nimport type { NavigationProp, RouteConfig, EventMapBase } from './types';\n\ntype Props<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  screen: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\n  navigation: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n  route: Route<string> & {\n    state?: NavigationState | PartialState<NavigationState>;\n  };\n  getState: () => State;\n  setState: (state: State) => void;\n  options: object;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  screen,\n  route,\n  navigation,\n  getState,\n  setState,\n  options,\n}: Props<State, ScreenOptions, EventMap>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n  const { addOptionsGetter } = useOptionsGetters({\n    key: route.key,\n    options,\n    navigation,\n  });\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const isInitialRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isInitialRef.current = false;\n  });\n\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n  const context = React.useMemo(\n    () => ({\n      state: route.state,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    }),\n    [\n      route.state,\n      getCurrentState,\n      setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    ]\n  );\n\n  const ScreenComponent = screen.getComponent\n    ? screen.getComponent()\n    : screen.component;\n\n  return (\n    <NavigationStateContext.Provider value={context}>\n      <EnsureSingleNavigator>\n        <StaticContainer\n          name={screen.name}\n          render={ScreenComponent || screen.children}\n          navigation={navigation}\n          route={route}\n        >\n          {ScreenComponent !== undefined ? (\n            <ScreenComponent navigation={navigation} route={route} />\n          ) : screen.children !== undefined ? (\n            screen.children({ navigation, route })\n          ) : null}\n        </StaticContainer>\n      </EnsureSingleNavigator>\n    </NavigationStateContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}