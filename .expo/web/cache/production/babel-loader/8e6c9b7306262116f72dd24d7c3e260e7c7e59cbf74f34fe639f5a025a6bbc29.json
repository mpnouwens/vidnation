{"ast":null,"code":"import NativeModules from\"react-native-web/dist/exports/NativeModules\";import{getAssetByID}from\"./AssetRegistry\";import AssetSourceResolver from\"./AssetSourceResolver\";var _customSourceTransformer;var _serverURL;var _scriptURL;var _sourceCodeScriptURL;function getSourceCodeScriptURL(){if(_sourceCodeScriptURL){return _sourceCodeScriptURL;}var sourceCode=nativeExtensions&&nativeExtensions.SourceCode;if(!sourceCode){sourceCode=NativeModules&&NativeModules.SourceCode;}_sourceCodeScriptURL=sourceCode.scriptURL;return _sourceCodeScriptURL;}function getDevServerURL(){if(_serverURL===undefined){var sourceCodeScriptURL=getSourceCodeScriptURL();var match=sourceCodeScriptURL&&sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);if(match){_serverURL=match[0];}else{_serverURL=null;}}return _serverURL;}function _coerceLocalScriptURL(scriptURL){if(scriptURL){if(scriptURL.startsWith('assets://')){return null;}scriptURL=scriptURL.substring(0,scriptURL.lastIndexOf('/')+1);if(!scriptURL.includes('://')){scriptURL='file://'+scriptURL;}}return null;}function getScriptURL(){if(_scriptURL===undefined){_scriptURL=_coerceLocalScriptURL(getSourceCodeScriptURL());}return _scriptURL;}export function setCustomSourceTransformer(transformer){_customSourceTransformer=transformer;}export default function resolveAssetSource(source){if(typeof source==='object'){return source;}var asset=getAssetByID(source);if(!asset){return undefined;}var resolver=new AssetSourceResolver(getDevServerURL(),getScriptURL(),asset);if(_customSourceTransformer){return _customSourceTransformer(resolver);}return resolver.defaultAsset();}Object.defineProperty(resolveAssetSource,'setCustomSourceTransformer',{get:function get(){return setCustomSourceTransformer;}});var pickScale=AssetSourceResolver.pickScale;export{pickScale};","map":{"version":3,"mappings":"uEAEA,OAASA,YAAY,uBACrB,MAAOC,oBAA4C,6BAInD,GAAIC,yBAAwB,CAC5B,GAAIC,WAAqC,CACzC,GAAIC,WAAqC,CACzC,GAAIC,qBAA+C,CAEnD,QAASC,uBAAsB,GAC7B,GAAID,oBAAoB,CAAE,CACxB,MAAOA,qBAAoB,EAG7B,GAAIE,WAAU,CAAGC,gBAAgB,EAAIA,gBAAgB,CAACC,UAAU,CAChE,GAAI,CAACF,UAAU,CAAE,CACfA,UAAU,CAAGG,aAAa,EAAIA,aAAa,CAACD,UAAU,EAExDJ,oBAAoB,CAAGE,UAAU,CAACI,SAAS,CAC3C,MAAON,qBAAoB,CAC7B,CAEA,QAASO,gBAAe,GACtB,GAAIT,UAAU,GAAKU,SAAS,CAAE,CAC5B,GAAMC,oBAAmB,CAAGR,sBAAsB,EAAE,CACpD,GAAMS,MAAK,CAAGD,mBAAmB,EAAIA,mBAAmB,CAACC,KAAK,CAAC,mBAAmB,CAAC,CACnF,GAAIA,KAAK,CAAE,CAETZ,UAAU,CAAGY,KAAK,CAAC,CAAC,CAAC,EACtB,IAAM,CAELZ,UAAU,CAAG,IAAI,GAGrB,MAAOA,WAAU,CACnB,CAEA,QAASa,sBAAqB,CAACL,SAAoC,EACjE,GAAIA,SAAS,CAAE,CACb,GAAIA,SAAS,CAACM,UAAU,CAAC,WAAW,CAAC,CAAE,CAErC,MAAO,KAAI,EAEbN,SAAS,CAAGA,SAAS,CAACO,SAAS,CAAC,CAAC,CAAEP,SAAS,CAACQ,WAAW,CAAC,GAAG,CAAC,CAAG,CAAC,CAAC,CAClE,GAAI,CAACR,SAAS,CAACS,QAAQ,CAAC,KAAK,CAAC,CAAE,CAG9BT,SAAS,CAAG,SAAS,CAAGA,SAAS,GAGrC,MAAO,KAAI,CACb,CAEA,QAASU,aAAY,GACnB,GAAIjB,UAAU,GAAKS,SAAS,CAAE,CAC5BT,UAAU,CAAGY,qBAAqB,CAACV,sBAAsB,EAAE,CAAC,EAE9D,MAAOF,WAAU,CACnB,CAEA,MAAM,SAAUkB,2BAA0B,CACxCC,WAAmE,EAEnErB,wBAAwB,CAAGqB,WAAW,CACxC,CAMA,cAAc,SAAUC,mBAAkB,CAACC,MAAW,EACpD,GAAI,MAAOA,OAAM,GAAK,QAAQ,CAAE,CAC9B,MAAOA,OAAM,EAGf,GAAMC,MAAK,CAAG1B,YAAY,CAACyB,MAAM,CAAC,CAClC,GAAI,CAACC,KAAK,CAAE,CACV,MAAOb,UAAS,EAGlB,GAAMc,SAAQ,CAAG,GAAI1B,oBAAmB,CAACW,eAAe,EAAE,CAAES,YAAY,EAAE,CAAEK,KAAK,CAAC,CAClF,GAAIxB,wBAAwB,CAAE,CAC5B,MAAOA,yBAAwB,CAACyB,QAAQ,CAAC,EAE3C,MAAOA,SAAQ,CAACC,YAAY,EAAE,CAChC,CAEAC,MAAM,CAACC,cAAc,CAACN,kBAAkB,CAAE,4BAA4B,CAAE,CACtEO,GAAG,gBACD,MAAOT,2BAA0B,CACnC,EACD,CAAC,CAAC,GAEYU,UAAS,CAAK/B,mBAAmB,CAAjC+B,SAAS","names":["getAssetByID","AssetSourceResolver","_customSourceTransformer","_serverURL","_scriptURL","_sourceCodeScriptURL","getSourceCodeScriptURL","sourceCode","nativeExtensions","SourceCode","NativeModules","scriptURL","getDevServerURL","undefined","sourceCodeScriptURL","match","_coerceLocalScriptURL","startsWith","substring","lastIndexOf","includes","getScriptURL","setCustomSourceTransformer","transformer","resolveAssetSource","source","asset","resolver","defaultAsset","Object","defineProperty","get","pickScale"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/expo-asset/src/resolveAssetSource.web.ts"],"sourcesContent":["import { NativeModules } from 'react-native';\n\nimport { getAssetByID } from './AssetRegistry';\nimport AssetSourceResolver, { ResolvedAssetSource } from './AssetSourceResolver';\n\ndeclare var nativeExtensions: any;\n\nlet _customSourceTransformer;\nlet _serverURL: string | undefined | null;\nlet _scriptURL: string | undefined | null;\nlet _sourceCodeScriptURL: string | undefined | null;\n\nfunction getSourceCodeScriptURL(): string | undefined | null {\n  if (_sourceCodeScriptURL) {\n    return _sourceCodeScriptURL;\n  }\n\n  let sourceCode = nativeExtensions && nativeExtensions.SourceCode;\n  if (!sourceCode) {\n    sourceCode = NativeModules && NativeModules.SourceCode;\n  }\n  _sourceCodeScriptURL = sourceCode.scriptURL;\n  return _sourceCodeScriptURL;\n}\n\nfunction getDevServerURL(): string | null {\n  if (_serverURL === undefined) {\n    const sourceCodeScriptURL = getSourceCodeScriptURL();\n    const match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);\n    if (match) {\n      // jsBundle was loaded from network\n      _serverURL = match[0];\n    } else {\n      // jsBundle was loaded from file\n      _serverURL = null;\n    }\n  }\n  return _serverURL;\n}\n\nfunction _coerceLocalScriptURL(scriptURL: string | undefined | null): string | null {\n  if (scriptURL) {\n    if (scriptURL.startsWith('assets://')) {\n      // android: running from within assets, no offline path to use\n      return null;\n    }\n    scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);\n    if (!scriptURL.includes('://')) {\n      // Add file protocol in case we have an absolute file path and not a URL.\n      // This shouldn't really be necessary. scriptURL should be a URL.\n      scriptURL = 'file://' + scriptURL;\n    }\n  }\n  return null;\n}\n\nfunction getScriptURL(): string | null {\n  if (_scriptURL === undefined) {\n    _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());\n  }\n  return _scriptURL;\n}\n\nexport function setCustomSourceTransformer(\n  transformer: (resolver: AssetSourceResolver) => ResolvedAssetSource\n): void {\n  _customSourceTransformer = transformer;\n}\n\n/**\n * `source` is either a number (opaque type returned by require('./foo.png'))\n * or an `ImageSource` like { uri: '<http location || file path>' }\n */\nexport default function resolveAssetSource(source: any): ResolvedAssetSource | undefined {\n  if (typeof source === 'object') {\n    return source;\n  }\n\n  const asset = getAssetByID(source);\n  if (!asset) {\n    return undefined;\n  }\n\n  const resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\n\nObject.defineProperty(resolveAssetSource, 'setCustomSourceTransformer', {\n  get() {\n    return setCustomSourceTransformer;\n  },\n});\n\nexport const { pickScale } = AssetSourceResolver;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}