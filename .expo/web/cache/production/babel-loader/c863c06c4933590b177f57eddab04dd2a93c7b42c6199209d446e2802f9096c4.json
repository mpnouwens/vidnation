{"ast":null,"code":"export default function getFocusedRouteNameFromRoute(route){var _state$index;var state=route.state;var params=route.params;var routeName=state?state.routes[(_state$index=state.index)!==null&&_state$index!==void 0?_state$index:typeof state.type==='string'&&state.type!=='stack'?0:state.routes.length-1].name:typeof(params===null||params===void 0?void 0:params.screen)==='string'?params.screen:undefined;return routeName;}","map":{"version":3,"mappings":"AAMA,cAAe,SAASA,6BAAT,CACbC,KADa,CAEO,kBACpB,GAAMC,MAAK,CAAGD,KAAK,CAACC,KAApB,CACA,GAAMC,OAAM,CAAGF,KAAK,CAACE,MAArB,CAEA,GAAMC,UAAS,CAAGF,KAAK,CAEnBA,KAAK,CAACG,MAAN,eAGEH,KAAK,CAACI,KAHR,6CAIK,MAAOJ,MAAK,CAACK,IAAb,GAAsB,QAAtB,EAAkCL,KAAK,CAACK,IAAN,GAAe,OAAjD,CACG,CADH,CAEGL,KAAK,CAACG,MAAN,CAAaG,MAAb,CAAsB,CAN9B,EAOEC,IATiB,CAWrB,OAAON,MAAP,SAAOA,MAAP,iBAAOA,MAAM,CAAEO,MAAf,IAA0B,QAA1B,CACEP,MAAM,CAACO,MADT,CAEEC,SAbJ,CAeA,MAAOP,UAAP,CACD","names":["getFocusedRouteNameFromRoute","route","state","params","routeName","routes","index","type","length","name","screen","undefined"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/@react-navigation/core/lib/module/getFocusedRouteNameFromRoute.tsx"],"sourcesContent":["import type {\n  Route,\n  PartialState,\n  NavigationState,\n} from '@react-navigation/routers';\n\nexport default function getFocusedRouteNameFromRoute(\n  route: Partial<Route<string>> & { state?: PartialState<NavigationState> }\n): string | undefined {\n  const state = route.state;\n  const params = route.params as { screen?: unknown } | undefined;\n\n  const routeName = state\n    ? // Get the currently active route name in the nested navigator\n      state.routes[\n        // If we have a partial state without index, for tab/drawer, first screen will be focused one, and last for stack\n        // The type property will only exist for rehydrated state and not for state from deep link\n        state.index ??\n          (typeof state.type === 'string' && state.type !== 'stack'\n            ? 0\n            : state.routes.length - 1)\n      ].name\n    : // If state doesn't exist, we need to default to `screen` param if available\n    typeof params?.screen === 'string'\n    ? params.screen\n    : undefined;\n\n  return routeName;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}