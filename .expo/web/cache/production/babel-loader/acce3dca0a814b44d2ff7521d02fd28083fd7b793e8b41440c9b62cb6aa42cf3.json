{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import*as React from'react';import useNavigation from\"./useNavigation\";export default function useNavigationState(selector){var navigation=useNavigation();var _React$useState=React.useState(function(){return selector(navigation.dangerouslyGetState());}),_React$useState2=_slicedToArray(_React$useState,2),setResult=_React$useState2[1];var selectorRef=React.useRef(selector);React.useEffect(function(){selectorRef.current=selector;});React.useEffect(function(){var unsubscribe=navigation.addListener('state',function(e){setResult(selectorRef.current(e.data.state));});return unsubscribe;},[navigation]);return selector(navigation.dangerouslyGetState());}","map":{"version":3,"mappings":"iEAAA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,CAEA,MAAOC,cAAP,uBASA,cAAe,SAASC,mBAAT,CAA+BC,QAA/B,CAAyD,CACtE,GAAMC,WAAU,CAAGH,aAAa,EAAhC,CADsE,oBAKhDD,KAAK,CAACK,QAAN,CAAe,iBACnCF,SAAQ,CAACC,UAAU,CAACE,mBAAX,EAAD,CADY,GAAtB,oDAASC,SAAH,qBAKN,GAAMC,YAAW,CAAGR,KAAK,CAACS,MAAN,CAAaN,QAAb,CAApB,CAEAH,KAAK,CAACU,SAAN,CAAgB,UAAM,CACpBF,WAAW,CAACG,OAAZ,CAAsBR,QAAtB,CACD,CAFD,EAIAH,KAAK,CAACU,SAAN,CAAgB,UAAM,CACpB,GAAME,YAAW,CAAGR,UAAU,CAACS,WAAX,CAAuB,OAAvB,CAAiCC,UAAD,CAAO,CACzDP,SAAS,CAACC,WAAW,CAACG,OAAZ,CAAoBG,CAAC,CAACC,IAAF,CAAOC,KAA3B,CAAD,CAAT,CACD,CAFmB,CAApB,CAIA,MAAOJ,YAAP,CACD,CAND,CAMG,CAACR,UAAD,CANH,EAQA,MAAOD,SAAQ,CAACC,UAAU,CAACE,mBAAX,EAAD,CAAf,CACD","names":["React","useNavigation","useNavigationState","selector","navigation","useState","dangerouslyGetState","setResult","selectorRef","useRef","useEffect","current","unsubscribe","addListener","e","data","state"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/@react-navigation/core/lib/module/useNavigationState.tsx"],"sourcesContent":["import * as React from 'react';\nimport type { NavigationState } from '@react-navigation/routers';\nimport useNavigation from './useNavigation';\n\ntype Selector<T> = (state: NavigationState) => T;\n\n/**\n * Hook to get a value from the current navigation state using a selector.\n *\n * @param selector Selector function to get a value from the state.\n */\nexport default function useNavigationState<T>(selector: Selector<T>): T {\n  const navigation = useNavigation();\n\n  // We don't care about the state value, we run the selector again at the end\n  // The state is only to make sure that there's a re-render when we have a new value\n  const [, setResult] = React.useState(() =>\n    selector(navigation.dangerouslyGetState())\n  );\n\n  // We store the selector in a ref to avoid re-subscribing listeners every render\n  const selectorRef = React.useRef(selector);\n\n  React.useEffect(() => {\n    selectorRef.current = selector;\n  });\n\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('state', (e) => {\n      setResult(selectorRef.current(e.data.state));\n    });\n\n    return unsubscribe;\n  }, [navigation]);\n\n  return selector(navigation.dangerouslyGetState());\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}