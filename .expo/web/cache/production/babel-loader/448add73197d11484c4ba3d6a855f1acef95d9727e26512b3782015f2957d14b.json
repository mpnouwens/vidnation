{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{useEffect,useState}from'react';import{Asset}from\"./Asset\";export function useAssets(moduleIds){var _useState=useState(),_useState2=_slicedToArray(_useState,2),assets=_useState2[0],setAssets=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),error=_useState4[0],setError=_useState4[1];useEffect(function(){Asset.loadAsync(moduleIds).then(setAssets).catch(setError);},[]);return[assets,error];}","map":{"version":3,"mappings":"iEAAA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAE3C,OAASC,KAAK,eAiBd,MAAM,SAAUC,UAAS,CAACC,SAA4B,gBACxBH,QAAQ,EAAW,wCAAxCI,MAAM,eAAEC,SAAS,8BACEL,QAAQ,EAAS,yCAApCM,KAAK,eAAEC,QAAQ,eAEtBR,SAAS,CAAC,UAAK,CACbE,KAAK,CAACO,SAAS,CAACL,SAAS,CAAC,CACvBM,IAAI,CAACJ,SAAS,CAAC,CACfK,KAAK,CAACH,QAAQ,CAAC,CACpB,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAACH,MAAM,CAAEE,KAAK,CAAC,CACxB","names":["useEffect","useState","Asset","useAssets","moduleIds","assets","setAssets","error","setError","loadAsync","then","catch"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/expo-asset/src/AssetHooks.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { Asset } from './Asset';\n\n/**\n * Downloads and stores one or more assets locally.\n * After the assets are loaded, this hook returns a list of asset instances.\n * If something went wrong when loading the assets, an error is returned.\n *\n * Note, the assets are not \"reloaded\" when you dynamically change the asset list.\n *\n * @see https://docs.expo.io/versions/latest/sdk/asset/\n * @example\n * ```tsx\n * const [assets, error] = useAssets(require('path/to/asset.jpg'));\n *\n * return !assets ? null : <Image source={assets[0]} />;\n * ```\n */\nexport function useAssets(moduleIds: number | number[]): [Asset[] | undefined, Error | undefined] {\n  const [assets, setAssets] = useState<Asset[]>();\n  const [error, setError] = useState<Error>();\n\n  useEffect(() => {\n    Asset.loadAsync(moduleIds)\n      .then(setAssets)\n      .catch(setError);\n  }, []);\n\n  return [assets, error];\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}