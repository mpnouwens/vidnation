{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{nanoid}from'nanoid/non-secure';import TabRouter,{TabActions}from\"./TabRouter\";export var DrawerActions=_objectSpread(_objectSpread({},TabActions),{},{openDrawer:function openDrawer(){return{type:'OPEN_DRAWER'};},closeDrawer:function closeDrawer(){return{type:'CLOSE_DRAWER'};},toggleDrawer:function toggleDrawer(){return{type:'TOGGLE_DRAWER'};}});var isDrawerOpen=function isDrawerOpen(state){var _state$history;return Boolean((_state$history=state.history)===null||_state$history===void 0?void 0:_state$history.find(function(it){return it.type==='drawer';}));};var openDrawer=function openDrawer(state){if(isDrawerOpen(state)){return state;}return _objectSpread(_objectSpread({},state),{},{history:[].concat(_toConsumableArray(state.history),[{type:'drawer'}])});};var closeDrawer=function closeDrawer(state){if(!isDrawerOpen(state)){return state;}return _objectSpread(_objectSpread({},state),{},{history:state.history.filter(function(it){return it.type!=='drawer';})});};export default function DrawerRouter(_ref){var openByDefault=_ref.openByDefault,rest=_objectWithoutProperties(_ref,[\"openByDefault\"]);var router=TabRouter(rest);return _objectSpread(_objectSpread({},router),{},{type:'drawer',getInitialState:function getInitialState(_ref2){var routeNames=_ref2.routeNames,routeParamList=_ref2.routeParamList;var state=router.getInitialState({routeNames:routeNames,routeParamList:routeParamList});if(openByDefault){state=openDrawer(state);}return _objectSpread(_objectSpread({},state),{},{stale:false,type:'drawer',key:\"drawer-\".concat(nanoid())});},getRehydratedState:function getRehydratedState(partialState,_ref3){var routeNames=_ref3.routeNames,routeParamList=_ref3.routeParamList;if(partialState.stale===false){return partialState;}var state=router.getRehydratedState(partialState,{routeNames:routeNames,routeParamList:routeParamList});if(isDrawerOpen(partialState)){state=openDrawer(state);}return _objectSpread(_objectSpread({},state),{},{type:'drawer',key:\"drawer-\".concat(nanoid())});},getStateForRouteFocus:function getStateForRouteFocus(state,key){var result=router.getStateForRouteFocus(state,key);if(openByDefault){return openDrawer(result);}return closeDrawer(result);},getStateForAction:function getStateForAction(state,action,options){switch(action.type){case'OPEN_DRAWER':return openDrawer(state);case'CLOSE_DRAWER':return closeDrawer(state);case'TOGGLE_DRAWER':if(isDrawerOpen(state)){return closeDrawer(state);}return openDrawer(state);case'GO_BACK':if(openByDefault){if(!isDrawerOpen(state)){return openDrawer(state);}}else{if(isDrawerOpen(state)){return closeDrawer(state);}}return router.getStateForAction(state,action,options);default:return router.getStateForAction(state,action,options);}},actionCreators:DrawerActions});}","map":{"version":3,"mappings":"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","names":["nanoid","TabRouter","TabActions","DrawerActions","openDrawer","type","closeDrawer","toggleDrawer","isDrawerOpen","state","Boolean","history","_state$history","find","it","filter","DrawerRouter","openByDefault","rest","router","getInitialState","routeNames","routeParamList","stale","key","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","options","actionCreators"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/@react-navigation/routers/lib/module/DrawerRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport type {\n  PartialState,\n  CommonNavigationAction,\n  Router,\n  ParamListBase,\n} from './types';\nimport TabRouter, {\n  TabActions,\n  TabActionType,\n  TabRouterOptions,\n  TabNavigationState,\n  TabActionHelpers,\n} from './TabRouter';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  openByDefault?: boolean;\n};\n\nexport type DrawerNavigationState = Omit<\n  TabNavigationState,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: ({ type: 'route'; key: string } | { type: 'drawer' })[];\n};\n\nexport type DrawerActionHelpers<\n  ParamList extends ParamListBase\n> = TabActionHelpers<ParamList> & {\n  /**\n   * Open the drawer sidebar.\n   */\n  openDrawer(): void;\n\n  /**\n   * Close the drawer sidebar.\n   */\n  closeDrawer(): void;\n\n  /**\n   * Open the drawer sidebar if closed, or close if opened.\n   */\n  toggleDrawer(): void;\n};\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nconst isDrawerOpen = (\n  state: DrawerNavigationState | PartialState<DrawerNavigationState>\n) => Boolean(state.history?.find((it) => it.type === 'drawer'));\n\nconst openDrawer = (state: DrawerNavigationState): DrawerNavigationState => {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: [...state.history, { type: 'drawer' }],\n  };\n};\n\nconst closeDrawer = (state: DrawerNavigationState): DrawerNavigationState => {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: state.history.filter((it) => it.type !== 'drawer'),\n  };\n};\n\nexport default function DrawerRouter({\n  openByDefault,\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = (TabRouter(rest) as unknown) as Router<\n    DrawerNavigationState,\n    TabActionType | CommonNavigationAction\n  >;\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList }) {\n      let state = router.getInitialState({ routeNames, routeParamList });\n\n      if (openByDefault) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n      });\n\n      if (isDrawerOpen(partialState)) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (openByDefault) {\n        return openDrawer(result);\n      }\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return openDrawer(state);\n\n        case 'GO_BACK':\n          if (openByDefault) {\n            if (!isDrawerOpen(state)) {\n              return openDrawer(state);\n            }\n          } else {\n            if (isDrawerOpen(state)) {\n              return closeDrawer(state);\n            }\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}