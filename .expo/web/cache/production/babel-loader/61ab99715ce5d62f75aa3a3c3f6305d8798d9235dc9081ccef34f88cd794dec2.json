{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{CodedError}from'@unimodules/core';import Constants from'expo-constants';import Platform from\"react-native-web/dist/exports/Platform\";export function guardPermission(){if(!('Notification'in window)){throw new Error('The Notification API is not available on this device.');}if(!navigator.serviceWorker){throw new Error('Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.');}if(Notification.permission!=='granted'){throw new Error('Cannot use Notifications without permissions. Please request permissions with `expo-permissions`');}}export function getExponentPushTokenAsync(){var data,experienceId,tokenArguments,response;return _regeneratorRuntime.async(function getExponentPushTokenAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(!Constants.manifest.owner||!Constants.manifest.slug)){_context.next=2;break;}throw new CodedError('E_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG','You must provide `owner` and `slug` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.');case 2:_context.next=4;return _regeneratorRuntime.awrap(_subscribeUserToPushAsync());case 4:data=_context.sent;experienceId=\"@\"+Constants.manifest.owner+\"/\"+Constants.manifest.slug;tokenArguments={deviceId:Constants.installationId,experienceId:experienceId,appId:experienceId,deviceToken:JSON.stringify(data),type:'web'};_context.next=9;return _regeneratorRuntime.awrap(fetch('https://exp.host/--/api/v2/push/getExpoPushToken',{method:'POST',body:JSON.stringify(tokenArguments)}).then(function(response){if(!response.ok){throw new Error(response.statusText);}return response;}).then(function(response){return response.json();}).catch(function(error){throw new CodedError('E_NOTIFICATIONS_TOKEN_REGISTRATION_FAILED','The device was unable to register for remote notifications with Expo. ('+error+')');}));case 9:response=_context.sent;return _context.abrupt(\"return\",response.data.expoPushToken);case 11:case\"end\":return _context.stop();}}},null,null,null,Promise);}export function getDevicePushTokenAsync(){var data;return _regeneratorRuntime.async(function getDevicePushTokenAsync$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return _regeneratorRuntime.awrap(_subscribeUserToPushAsync());case 2:data=_context2.sent;return _context2.abrupt(\"return\",{type:Platform.OS,data:data});case 4:case\"end\":return _context2.stop();}}},null,null,null,Promise);}function _subscribeUserToPushAsync(){var registration,subscribeOptions,pushSubscription,pushSubscriptionJson,subscriptionObject,notificationIcon;return _regeneratorRuntime.async(function _subscribeUserToPushAsync$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!(!Constants.manifest.notification||!Constants.manifest.notification.vapidPublicKey)){_context3.next=2;break;}throw new CodedError('E_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG','You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.');case 2:guardPermission();_context3.next=5;return _regeneratorRuntime.awrap(navigator.serviceWorker.register('/expo-service-worker.js'));case 5:registration=_context3.sent;_context3.next=8;return _regeneratorRuntime.awrap(navigator.serviceWorker.ready);case 8:if(registration.active){_context3.next=10;break;}throw new Error('Notifications might not be working because the service worker API is not active.');case 10:subscribeOptions={userVisibleOnly:true,applicationServerKey:_urlBase64ToUint8Array(Constants.manifest.notification.vapidPublicKey)};_context3.next=13;return _regeneratorRuntime.awrap(registration.pushManager.subscribe(subscribeOptions).catch(function(error){throw new CodedError('E_NOTIFICATIONS_PUSH_WEB_TOKEN_REGISTRATION_FAILED','The device was unable to register for remote notifications with the browser endpoint. ('+error+')');}));case 13:pushSubscription=_context3.sent;pushSubscriptionJson=pushSubscription.toJSON();subscriptionObject={endpoint:pushSubscriptionJson.endpoint,keys:{p256dh:pushSubscriptionJson.keys.p256dh,auth:pushSubscriptionJson.keys.auth}};notificationIcon=(Constants.manifest.notification||{}).icon;_context3.next=19;return _regeneratorRuntime.awrap(registration.active.postMessage(JSON.stringify({fromExpoWebClient:{notificationIcon:notificationIcon}})));case 19:return _context3.abrupt(\"return\",subscriptionObject);case 20:case\"end\":return _context3.stop();}}},null,null,null,Promise);}function _urlBase64ToUint8Array(base64String){var padding='='.repeat((4-base64String.length%4)%4);var base64=(base64String+padding).replace(/-/g,'+').replace(/_/g,'/');var rawData=window.atob(base64);var outputArray=new Uint8Array(rawData.length);for(var i=0;i<rawData.length;++i){outputArray[i]=rawData.charCodeAt(i);}return outputArray;}","map":{"version":3,"mappings":"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","names":["CodedError","Constants","guardPermission","window","Error","navigator","serviceWorker","Notification","permission","getExponentPushTokenAsync","manifest","owner","slug","_subscribeUserToPushAsync","data","experienceId","tokenArguments","deviceId","installationId","appId","deviceToken","JSON","stringify","type","fetch","method","body","then","response","ok","statusText","json","catch","error","expoPushToken","getDevicePushTokenAsync","Platform","OS","notification","vapidPublicKey","register","registration","ready","active","subscribeOptions","userVisibleOnly","applicationServerKey","_urlBase64ToUint8Array","pushManager","subscribe","pushSubscription","pushSubscriptionJson","toJSON","subscriptionObject","endpoint","keys","p256dh","auth","notificationIcon","icon","postMessage","fromExpoWebClient","base64String","padding","repeat","length","base64","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/expo/src/Notifications/ExponentNotificationsHelper.web.ts"],"sourcesContent":["import { CodedError } from '@unimodules/core';\nimport Constants from 'expo-constants';\nimport { Platform } from 'react-native';\n\nexport function guardPermission() {\n  if (!('Notification' in window)) {\n    throw new Error('The Notification API is not available on this device.');\n  }\n  if (!navigator.serviceWorker) {\n    throw new Error(\n      'Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.'\n    );\n  }\n  if (Notification.permission !== 'granted') {\n    throw new Error(\n      'Cannot use Notifications without permissions. Please request permissions with `expo-permissions`'\n    );\n  }\n}\n\nexport async function getExponentPushTokenAsync(): Promise<string> {\n  if (!Constants.manifest.owner || !Constants.manifest.slug) {\n    throw new CodedError(\n      'E_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG',\n      'You must provide `owner` and `slug` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.'\n    );\n  }\n\n  const data = await _subscribeUserToPushAsync();\n  const experienceId = `@${Constants.manifest.owner}/${Constants.manifest.slug}`;\n  const tokenArguments: { [key: string]: string } = {\n    deviceId: Constants.installationId,\n    experienceId,\n    // Also uses `experienceId` for `appId` because there's no `appId` for web.\n    appId: experienceId,\n    deviceToken: JSON.stringify(data),\n    type: 'web',\n  };\n\n  const response = await fetch('https://exp.host/--/api/v2/push/getExpoPushToken', {\n    method: 'POST',\n    body: JSON.stringify(tokenArguments),\n  })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return response;\n    })\n    .then(response => response.json())\n    .catch(error => {\n      throw new CodedError(\n        'E_NOTIFICATIONS_TOKEN_REGISTRATION_FAILED',\n        'The device was unable to register for remote notifications with Expo. (' + error + ')'\n      );\n    });\n\n  return response.data.expoPushToken;\n}\n\nexport async function getDevicePushTokenAsync(): Promise<{ type: string; data: object }> {\n  const data = await _subscribeUserToPushAsync();\n  return { type: Platform.OS, data };\n}\n\nasync function _subscribeUserToPushAsync(): Promise<object> {\n  if (!Constants.manifest.notification || !Constants.manifest.notification.vapidPublicKey) {\n    throw new CodedError(\n      'E_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG',\n      'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.'\n    );\n  }\n  guardPermission();\n\n  const registration = await navigator.serviceWorker.register('/expo-service-worker.js');\n  await navigator.serviceWorker.ready;\n\n  if (!registration.active) {\n    throw new Error(\n      'Notifications might not be working because the service worker API is not active.'\n    );\n  }\n\n  const subscribeOptions = {\n    userVisibleOnly: true,\n    applicationServerKey: _urlBase64ToUint8Array(Constants.manifest.notification.vapidPublicKey),\n  };\n  const pushSubscription = await registration.pushManager\n    .subscribe(subscribeOptions)\n    .catch(error => {\n      throw new CodedError(\n        'E_NOTIFICATIONS_PUSH_WEB_TOKEN_REGISTRATION_FAILED',\n        'The device was unable to register for remote notifications with the browser endpoint. (' +\n          error +\n          ')'\n      );\n    });\n  const pushSubscriptionJson = pushSubscription.toJSON();\n\n  const subscriptionObject = {\n    endpoint: pushSubscriptionJson.endpoint,\n    keys: {\n      p256dh: pushSubscriptionJson.keys!.p256dh,\n      auth: pushSubscriptionJson.keys!.auth,\n    },\n  };\n\n  // Store notification icon string in service worker.\n  // This message is received by `/expo-service-worker.js`.\n  // We wrap it with `fromExpoWebClient` to make sure other message\n  // will not override content such as `notificationIcon`.\n  // https://stackoverflow.com/a/35729334/2603230\n  const notificationIcon = (Constants.manifest.notification || {}).icon;\n  await registration.active.postMessage(\n    JSON.stringify({ fromExpoWebClient: { notificationIcon } })\n  );\n\n  return subscriptionObject;\n}\n\n// https://github.com/web-push-libs/web-push#using-vapid-key-for-applicationserverkey\nfunction _urlBase64ToUint8Array(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}