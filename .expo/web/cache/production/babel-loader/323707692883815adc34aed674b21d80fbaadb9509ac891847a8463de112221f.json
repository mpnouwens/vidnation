{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import*as React from'react';import Dimensions from\"react-native-web/dist/exports/Dimensions\";export default function useWindowDimensions(){var _React$useState=React.useState(function(){var _Dimensions$get=Dimensions.get('window'),_Dimensions$get$heigh=_Dimensions$get.height,height=_Dimensions$get$heigh===void 0?0:_Dimensions$get$heigh,_Dimensions$get$width=_Dimensions$get.width,width=_Dimensions$get$width===void 0?0:_Dimensions$get$width;return{height:height,width:width};}),_React$useState2=_slicedToArray(_React$useState,2),dimensions=_React$useState2[0],setDimensions=_React$useState2[1];React.useEffect(function(){var onChange=function onChange(_ref){var window=_ref.window;var width=window.width,height=window.height;setDimensions(function(d){if(width===d.width&&height===d.height){return d;}return{width:width,height:height};});};onChange({window:Dimensions.get('window')});Dimensions.addEventListener('change',onChange);return function(){return Dimensions.removeEventListener('change',onChange);};},[]);return dimensions;}","map":{"version":3,"mappings":"iEAAA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,kEAKA,cAAe,SAASC,oBAAT,EAA+B,qBACRD,KAAK,CAACE,QAAN,CAAe,UAAM,qBAErBC,UAAU,CAACC,GAAX,CAAe,QAAf,CAAlC,uCAAQC,MAAM,CAANA,MAAM,gCAAG,CAAX,6DAAcC,KAAK,CAALA,KAAK,gCAAG,wBAE5B,MAAO,CAAED,MAAF,CAAEA,MAAF,CAAUC,WAAV,CAAP,CACD,CALmC,CAApC,oDAAOC,UAAD,qBAAaC,aAAb,qBAONR,KAAK,CAACS,SAAN,CAAgB,UAAM,CACpB,GAAMC,SAAQ,CAAG,QAAXA,SAAQ,MAA2C,IAArCC,uBACVL,MAAF,CAAoBK,MAA1B,CAAQL,KAAF,CAASD,OAAWM,MAA1B,CAAeN,OAEfG,aAAa,CAAEI,UAAD,CAAO,CACnB,GAAIN,KAAK,GAAKM,CAAC,CAACN,KAAZ,EAAqBD,MAAM,GAAKO,CAAC,CAACP,MAAtC,CAA8C,CAC5C,MAAOO,EAAP,CACD,CAED,MAAO,CAAEN,KAAF,CAAEA,KAAF,CAASD,aAAT,CAAP,CACD,CANY,CAAb,CAOD,CAVD,CAcAK,QAAQ,CAAC,CAAEC,MAAM,CAAER,UAAU,CAACC,GAAX,CAAe,QAAf,CAAV,CAAD,CAAR,CAEAD,UAAU,CAACU,gBAAX,CAA4B,QAA5B,CAAsCH,QAAtC,EAEA,MAAO,kBAAMP,WAAU,CAACW,mBAAX,CAA+B,QAA/B,CAAyCJ,QAAzC,CAAb,GACD,CApBD,CAoBG,EApBH,EAsBA,MAAOH,WAAP,CACD","names":["React","useWindowDimensions","useState","Dimensions","get","height","width","dimensions","setDimensions","useEffect","onChange","window","d","addEventListener","removeEventListener"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/@react-navigation/bottom-tabs/lib/module/utils/useWindowDimensions.tsx"],"sourcesContent":["import * as React from 'react';\nimport { ScaledSize, Dimensions } from 'react-native';\n\n// This is similar to the new useWindowDimensions hook in react-native\n// However, we have a custom implementation to support older RN versions\nexport default function useWindowDimensions() {\n  const [dimensions, setDimensions] = React.useState(() => {\n    // `height` and `width` maybe undefined during SSR, so we initialize them\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    return { height, width };\n  });\n\n  React.useEffect(() => {\n    const onChange = ({ window }: { window: ScaledSize }) => {\n      const { width, height } = window;\n\n      setDimensions((d) => {\n        if (width === d.width && height === d.height) {\n          return d;\n        }\n\n        return { width, height };\n      });\n    };\n\n    // We might have missed an update before the listener was added\n    // So make sure to update the dimensions\n    onChange({ window: Dimensions.get('window') });\n\n    Dimensions.addEventListener('change', onChange);\n\n    return () => Dimensions.removeEventListener('change', onChange);\n  }, []);\n\n  return dimensions;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}