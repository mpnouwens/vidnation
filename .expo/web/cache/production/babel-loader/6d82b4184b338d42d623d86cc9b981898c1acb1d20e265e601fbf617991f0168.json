{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import*as React from'react';import{CommonActions}from'@react-navigation/routers';export default function useNavigationCache(_ref){var state=_ref.state,getState=_ref.getState,navigation=_ref.navigation,_setOptions=_ref.setOptions,router=_ref.router,emitter=_ref.emitter;var cache=React.useMemo(function(){return{current:{}};},[getState,navigation,_setOptions,router,emitter]);var actions=_objectSpread(_objectSpread({},router.actionCreators),CommonActions);cache.current=state.routes.reduce(function(acc,route){var previous=cache.current[route.key];if(previous){acc[route.key]=previous;}else{var emit=navigation.emit,rest=_objectWithoutProperties(navigation,[\"emit\"]);var dispatch=function dispatch(action){var payload=typeof action==='function'?action(getState()):action;navigation.dispatch(typeof payload==='object'&&payload!=null?_objectSpread({source:route.key},payload):payload);};var helpers=Object.keys(actions).reduce(function(acc,name){acc[name]=function(){return dispatch(actions[name].apply(actions,arguments));};return acc;},{});acc[route.key]=_objectSpread(_objectSpread(_objectSpread(_objectSpread({},rest),helpers),emitter.create(route.key)),{},{dispatch:dispatch,setOptions:function setOptions(options){return _setOptions(function(o){return _objectSpread(_objectSpread({},o),{},_defineProperty({},route.key,_objectSpread(_objectSpread({},o[route.key]),options)));});},isFocused:function isFocused(){var state=getState();if(state.routes[state.index].key!==route.key){return false;}return navigation?navigation.isFocused():true;}});}return acc;},{});return cache.current;}","map":{"version":3,"mappings":"65BAAA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,CACA,OACEC,aADF,KAMO,2BANP,CAmCA,cAAe,SAASC,mBAAT,MAUI,IANjBC,MADA,MACAA,KADA,CAEAC,QAFA,MAEAA,QAFA,CAGAC,UAHA,MAGAA,UAHA,CAIAC,WAJA,MAIAA,UAJA,CAKAC,MALA,MAKAA,MALA,CAMAC,qBAKA,GAAMC,MAAK,CAAGT,KAAK,CAACU,OAAN,CACZ,iBAAO,CAAEC,OAAO,CAAE,EAAX,CAAP,EADY,CAGZ,CAACP,QAAD,CAAWC,UAAX,CAAuBC,WAAvB,CAAmCC,MAAnC,CAA2CC,OAA3C,CAHY,CAAd,CAMA,GAAMI,QAAO,gCACRL,MAAM,CAACM,cADI,EAEXZ,cAFL,CAKAQ,KAAK,CAACE,OAAN,CAAgBR,KAAK,CAACW,MAAN,CAAaC,MAAb,CACd,SAACC,GAAD,CAAMC,KAAN,CAAgB,CACd,GAAMC,SAAQ,CAAGT,KAAK,CAACE,OAAN,CAAcM,KAAK,CAACE,GAApB,CAAjB,CAEA,GAAID,QAAJ,CAAc,CAEZF,GAAG,CAACC,KAAK,CAACE,GAAP,CAAH,CAAiBD,QAAjB,CACD,CAHD,IAGO,IAEGE,KAAF,CAAoBf,UAA1B,CAAQe,IAAF,CAAWC,8BAAShB,UAA1B,WAEA,GAAMiB,SAAQ,CACZC,QADID,SAAQ,CACZC,MADe,CAEZ,CACH,GAAMC,QAAO,CACX,MAAOD,OAAP,GAAkB,UAAlB,CAA+BA,MAAM,CAACnB,QAAQ,EAAT,CAArC,CAAoDmB,MADtD,CAGAlB,UAAU,CAACiB,QAAX,CACE,MAAOE,QAAP,GAAmB,QAAnB,EAA+BA,OAAO,EAAI,IAA1C,gBACMC,MAAM,CAAER,KAAK,CAACE,GAAhB,EAAwBK,SACxBA,OAHN,EAKD,CAXD,CAaA,GAAME,QAAO,CAAGC,MAAM,CAACC,IAAP,CAAYhB,OAAZ,EAAqBG,MAArB,CACd,SAACC,GAAD,CAAMa,IAAN,CAAe,CAEbb,GAAG,CAACa,IAAD,CAAH,CAAY,iBAAkBP,SAAQ,CAACV,OAAO,CAACiB,IAAD,CAAP,cAAO,WAAR,CAAtC,GACA,MAAOb,IAAP,CACD,CALa,CAMd,EANc,CAAhB,CASAA,GAAG,CAACC,KAAK,CAACE,GAAP,CAAH,4DACKE,IADY,EAEZK,OAFY,EAGZlB,OAAO,CAACsB,MAAR,CAAeb,KAAK,CAACE,GAArB,CAHY,MAIfG,QAJe,CAIfA,QAJe,CAKfhB,UAAU,CAAGyB,2BAAD,QACVzB,YAAU,CAAE0B,UAAD,wCACNA,CADc,wBAEhBf,KAAK,CAACE,GAAP,gCAAkBa,CAAC,CAACf,KAAK,CAACE,GAAP,CAAN,EAAsBY,YAF3B,CANG,GAUfE,SAAS,CAAE,oBAAM,CACf,GAAM9B,MAAK,CAAGC,QAAQ,EAAtB,CAEA,GAAID,KAAK,CAACW,MAAN,CAAaX,KAAK,CAAC+B,KAAnB,EAA0Bf,GAA1B,GAAkCF,KAAK,CAACE,GAA5C,CAAiD,CAC/C,MAAO,MAAP,CACD,CAID,MAAOd,WAAU,CAAGA,UAAU,CAAC4B,SAAX,EAAH,CAA4B,IAA7C,CACD,GApBH,CAsBD,CAED,MAAOjB,IAAP,CACD,CA1Da,CA2Dd,EA3Dc,CAAhB,CA8DA,MAAOP,MAAK,CAACE,OAAb,CACD","names":["React","CommonActions","useNavigationCache","state","getState","navigation","setOptions","router","emitter","cache","useMemo","current","actions","actionCreators","routes","reduce","acc","route","previous","key","emit","rest","dispatch","action","payload","source","helpers","Object","keys","name","create","options","o","isFocused","index"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/@react-navigation/core/lib/module/useNavigationCache.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  NavigationAction,\n  ParamListBase,\n  NavigationState,\n  Router,\n} from '@react-navigation/routers';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\nimport type { EventMapBase, NavigationHelpers, NavigationProp } from './types';\n\ntype Options<State extends NavigationState> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (options: Record<string, object>) => Record<string, object>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMapBase>;\n};\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {}\n> = {\n  [key: string]: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n};\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {}\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State>) {\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, navigation, setOptions, router, emitter]\n  );\n\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions,\n  };\n\n  cache.current = state.routes.reduce<NavigationCache<State, ScreenOptions>>(\n    (acc, route) => {\n      const previous = cache.current[route.key];\n\n      if (previous) {\n        // If a cached navigation object already exists, reuse it\n        acc[route.key] = previous;\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { emit, ...rest } = navigation;\n\n        const dispatch = (\n          action: NavigationAction | ((state: State) => NavigationAction)\n        ) => {\n          const payload =\n            typeof action === 'function' ? action(getState()) : action;\n\n          navigation.dispatch(\n            typeof payload === 'object' && payload != null\n              ? { source: route.key, ...payload }\n              : payload\n          );\n        };\n\n        const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n          (acc, name) => {\n            // @ts-expect-error: name is a valid key, but TypeScript is dumb\n            acc[name] = (...args: any) => dispatch(actions[name](...args));\n            return acc;\n          },\n          {}\n        );\n\n        acc[route.key] = {\n          ...rest,\n          ...helpers,\n          ...emitter.create(route.key),\n          dispatch,\n          setOptions: (options: object) =>\n            setOptions((o) => ({\n              ...o,\n              [route.key]: { ...o[route.key], ...options },\n            })),\n          isFocused: () => {\n            const state = getState();\n\n            if (state.routes[state.index].key !== route.key) {\n              return false;\n            }\n\n            // If the current screen is focused, we also need to check if parent navigator is focused\n            // This makes sure that we return the focus state in the whole tree, not just this navigator\n            return navigation ? navigation.isFocused() : true;\n          },\n        };\n      }\n\n      return acc;\n    },\n    {}\n  );\n\n  return cache.current;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}