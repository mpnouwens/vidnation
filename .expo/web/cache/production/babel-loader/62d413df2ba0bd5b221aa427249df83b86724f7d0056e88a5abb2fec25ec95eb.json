{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _extends from\"@babel/runtime/helpers/extends\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import queryString from'query-string';import checkLegacyPathConfig from\"./checkLegacyPathConfig\";var getActiveRoute=function getActiveRoute(state){var route=typeof state.index==='number'?state.routes[state.index]:state.routes[state.routes.length-1];if(route.state){return getActiveRoute(route.state);}return route;};export default function getPathFromState(state,options){if(state==null){throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");}var _checkLegacyPathConfi=checkLegacyPathConfig(options),_checkLegacyPathConfi2=_slicedToArray(_checkLegacyPathConfi,2),legacy=_checkLegacyPathConfi2[0],compatOptions=_checkLegacyPathConfi2[1];var configs=compatOptions?createNormalizedConfigs(legacy,compatOptions.screens):{};var path='/';var current=state;var allParams={};var _loop=function _loop(){var index=typeof current.index==='number'?current.index:0;var route=current.routes[index];var pattern=void 0;var focusedParams=void 0;var focusedRoute=getActiveRoute(state);var currentOptions=configs;var nestedRouteNames=[];var hasNext=true;while(route.name in currentOptions&&hasNext){pattern=currentOptions[route.name].pattern;nestedRouteNames.push(route.name);if(route.params){(function(){var stringify=(_currentOptions$route=currentOptions[route.name])===null||_currentOptions$route===void 0?void 0:_currentOptions$route.stringify;var currentParams=fromEntries(Object.entries(route.params).map(function(_ref){var _ref2=_slicedToArray(_ref,2),key=_ref2[0],value=_ref2[1];return[key,(stringify===null||stringify===void 0?void 0:stringify[key])?stringify[key](value):String(value)];}));if(pattern){_extends(allParams,currentParams);}if(focusedRoute===route){focusedParams=_objectSpread({},currentParams);(_pattern=pattern)===null||_pattern===void 0?void 0:_pattern.split('/').filter(function(p){return p.startsWith(':');}).forEach(function(p){var name=getParamName(p);if(focusedParams){delete focusedParams[name];}});}})();}if(!currentOptions[route.name].screens||route.state===undefined){hasNext=false;}else{index=typeof route.state.index==='number'?route.state.index:route.state.routes.length-1;var nextRoute=route.state.routes[index];var nestedConfig=currentOptions[route.name].screens;if(nestedConfig&&nextRoute.name in nestedConfig){route=nextRoute;currentOptions=nestedConfig;}else{hasNext=false;}}}if(pattern===undefined){pattern=nestedRouteNames.join('/');}if(currentOptions[route.name]!==undefined){path+=pattern.split('/').map(function(p){var name=getParamName(p);if(p==='*'){if(legacy){throw new Error(\"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/configuring-links/#updating-config\");}return route.name;}if(p.startsWith(':')){var value=allParams[name];if(value===undefined&&p.endsWith('?')){return'';}return encodeURIComponent(value);}return encodeURIComponent(p);}).join('/');}else{path+=encodeURIComponent(route.name);}if(!focusedParams){focusedParams=focusedRoute.params;}if(route.state){path+='/';}else if(focusedParams){for(var param in focusedParams){if(focusedParams[param]==='undefined'){delete focusedParams[param];}}var query=queryString.stringify(focusedParams);if(query){path+=\"?\".concat(query);}}current=route.state;};while(current){var _currentOptions$route;var _pattern;_loop();}path=path.replace(/\\/+/g,'/');path=path.length>1?path.replace(/\\/$/,''):path;return path;}var fromEntries=function fromEntries(entries){return entries.reduce(function(acc,_ref3){var _ref4=_slicedToArray(_ref3,2),k=_ref4[0],v=_ref4[1];acc[k]=v;return acc;},{});};var getParamName=function getParamName(pattern){return pattern.replace(/^:/,'').replace(/\\?$/,'');};var joinPaths=function joinPaths(){var _ref5;for(var _len=arguments.length,paths=new Array(_len),_key=0;_key<_len;_key++){paths[_key]=arguments[_key];}return(_ref5=[]).concat.apply(_ref5,_toConsumableArray(paths.map(function(p){return p.split('/');}))).filter(Boolean).join('/');};var createConfigItem=function createConfigItem(legacy,config,parentPattern){var _pattern2;if(typeof config==='string'){var _pattern3=parentPattern?joinPaths(parentPattern,config):config;return{pattern:_pattern3};}var pattern;if(legacy){pattern=config.exact!==true&&parentPattern&&config.path?joinPaths(parentPattern,config.path):config.path;}else{if(config.exact&&config.path===undefined){throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");}pattern=config.exact!==true?joinPaths(parentPattern||'',config.path||''):config.path||'';}var screens=config.screens?createNormalizedConfigs(legacy,config.screens,pattern):undefined;return{pattern:(_pattern2=pattern)===null||_pattern2===void 0?void 0:_pattern2.split('/').filter(Boolean).join('/'),stringify:config.stringify,screens:screens};};var createNormalizedConfigs=function createNormalizedConfigs(legacy,options,pattern){return fromEntries(Object.entries(options).map(function(_ref6){var _ref7=_slicedToArray(_ref6,2),name=_ref7[0],c=_ref7[1];var result=createConfigItem(legacy,c,pattern);return[name,result];}));};","map":{"version":3,"mappings":"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","names":["queryString","checkLegacyPathConfig","getActiveRoute","state","route","index","routes","length","getPathFromState","options","Error","legacy","compatOptions","configs","createNormalizedConfigs","screens","path","current","allParams","pattern","focusedParams","focusedRoute","currentOptions","nestedRouteNames","hasNext","name","push","params","stringify","_currentOptions$route","currentParams","fromEntries","Object","entries","map","key","value","String","split","filter","p","startsWith","forEach","getParamName","undefined","nextRoute","nestedConfig","join","endsWith","encodeURIComponent","param","query","_pattern","replace","reduce","acc","k","v","joinPaths","paths","concat","Boolean","createConfigItem","config","parentPattern","exact","_pattern2","c","result"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/@react-navigation/core/lib/module/getPathFromState.tsx"],"sourcesContent":["import queryString from 'query-string';\nimport type {\n  NavigationState,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport checkLegacyPathConfig from './checkLegacyPathConfig';\nimport type { PathConfig, PathConfigMap } from './types';\n\ntype Options = { initialRouteName?: string; screens: PathConfigMap };\n\ntype State = NavigationState | Omit<PartialState<NavigationState>, 'stale'>;\n\ntype StringifyConfig = Record<string, (value: any) => string>;\n\ntype ConfigItem = {\n  pattern?: string;\n  stringify?: StringifyConfig;\n  screens?: Record<string, ConfigItem>;\n};\n\nconst getActiveRoute = (state: State): { name: string; params?: object } => {\n  const route =\n    typeof state.index === 'number'\n      ? state.routes[state.index]\n      : state.routes[state.routes.length - 1];\n\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n\n  return route;\n};\n\n/**\n * Utility to serialize a navigation state object to a path string.\n *\n * Example:\n * ```js\n * getPathFromState(\n *   {\n *     routes: [\n *       {\n *         name: 'Chat',\n *         params: { author: 'Jane', id: 42 },\n *       },\n *     ],\n *   },\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         stringify: { author: author => author.toLowerCase() }\n *       }\n *     }\n *   }\n * )\n * ```\n *\n * @param state Navigation state to serialize.\n * @param options Extra options to fine-tune how to serialize the path.\n * @returns Path representing the state, e.g. /foo/bar?count=42.\n */\nexport default function getPathFromState(\n  state: State,\n  options?: Options\n): string {\n  if (state == null) {\n    throw Error(\n      \"Got 'undefined' for the navigation state. You must pass a valid state object.\"\n    );\n  }\n\n  const [legacy, compatOptions] = checkLegacyPathConfig(options);\n\n  // Create a normalized configs object which will be easier to use\n  const configs: Record<string, ConfigItem> = compatOptions\n    ? createNormalizedConfigs(legacy, compatOptions.screens)\n    : {};\n\n  let path = '/';\n  let current: State | undefined = state;\n\n  const allParams: Record<string, any> = {};\n\n  while (current) {\n    let index = typeof current.index === 'number' ? current.index : 0;\n    let route = current.routes[index] as Route<string> & {\n      state?: State;\n    };\n\n    let pattern: string | undefined;\n\n    let focusedParams: Record<string, any> | undefined;\n    let focusedRoute = getActiveRoute(state);\n    let currentOptions = configs;\n\n    // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n    let nestedRouteNames = [];\n\n    let hasNext = true;\n\n    while (route.name in currentOptions && hasNext) {\n      pattern = currentOptions[route.name].pattern;\n\n      nestedRouteNames.push(route.name);\n\n      if (route.params) {\n        const stringify = currentOptions[route.name]?.stringify;\n\n        const currentParams = fromEntries(\n          Object.entries(route.params).map(([key, value]) => [\n            key,\n            stringify?.[key] ? stringify[key](value) : String(value),\n          ])\n        );\n\n        if (pattern) {\n          Object.assign(allParams, currentParams);\n        }\n\n        if (focusedRoute === route) {\n          // If this is the focused route, keep the params for later use\n          // We save it here since it's been stringified already\n          focusedParams = { ...currentParams };\n\n          pattern\n            ?.split('/')\n            .filter((p) => p.startsWith(':'))\n            // eslint-disable-next-line no-loop-func\n            .forEach((p) => {\n              const name = getParamName(p);\n\n              // Remove the params present in the pattern since we'll only use the rest for query string\n              if (focusedParams) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete focusedParams[name];\n              }\n            });\n        }\n      }\n\n      // If there is no `screens` property or no nested state, we return pattern\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        hasNext = false;\n      } else {\n        index =\n          typeof route.state.index === 'number'\n            ? route.state.index\n            : route.state.routes.length - 1;\n\n        const nextRoute = route.state.routes[index];\n        const nestedConfig = currentOptions[route.name].screens;\n\n        // if there is config for next route name, we go deeper\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute as Route<string> & { state?: State };\n          currentOptions = nestedConfig;\n        } else {\n          // If not, there is no sense in going deeper in config\n          hasNext = false;\n        }\n      }\n    }\n\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n\n    if (currentOptions[route.name] !== undefined) {\n      path += pattern\n        .split('/')\n        .map((p) => {\n          const name = getParamName(p);\n\n          // We don't know what to show for wildcard patterns\n          // Showing the route name seems ok, though whatever we show here will be incorrect\n          // Since the page doesn't actually exist\n          if (p === '*') {\n            if (legacy) {\n              throw new Error(\n                \"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/configuring-links/#updating-config\"\n              );\n            }\n\n            return route.name;\n          }\n\n          // If the path has a pattern for a param, put the param in the path\n          if (p.startsWith(':')) {\n            const value = allParams[name];\n\n            if (value === undefined && p.endsWith('?')) {\n              // Optional params without value assigned in route.params should be ignored\n              return '';\n            }\n\n            return encodeURIComponent(value);\n          }\n\n          return encodeURIComponent(p);\n        })\n        .join('/');\n    } else {\n      path += encodeURIComponent(route.name);\n    }\n\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (let param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete focusedParams[param];\n        }\n      }\n\n      const query = queryString.stringify(focusedParams);\n\n      if (query) {\n        path += `?${query}`;\n      }\n    }\n\n    current = route.state;\n  }\n\n  // Remove multiple as well as trailing slashes\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n\n  return path;\n}\n\n// Object.fromEntries is not available in older iOS versions\nconst fromEntries = <K extends string, V>(entries: (readonly [K, V])[]) =>\n  entries.reduce((acc, [k, v]) => {\n    acc[k] = v;\n    return acc;\n  }, {} as Record<K, V>);\n\nconst getParamName = (pattern: string) =>\n  pattern.replace(/^:/, '').replace(/\\?$/, '');\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst createConfigItem = (\n  legacy: boolean,\n  config: PathConfig | string,\n  parentPattern?: string\n): ConfigItem => {\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    return { pattern };\n  }\n\n  // If an object is specified as the value (e.g. Foo: { ... }),\n  // It can have `path` property and `screens` prop which has nested configs\n  let pattern: string | undefined;\n\n  if (legacy) {\n    pattern =\n      config.exact !== true && parentPattern && config.path\n        ? joinPaths(parentPattern, config.path)\n        : config.path;\n  } else {\n    if (config.exact && config.path === undefined) {\n      throw new Error(\n        \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n      );\n    }\n\n    pattern =\n      config.exact !== true\n        ? joinPaths(parentPattern || '', config.path || '')\n        : config.path || '';\n  }\n\n  const screens = config.screens\n    ? createNormalizedConfigs(legacy, config.screens, pattern)\n    : undefined;\n\n  return {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern: pattern?.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens,\n  };\n};\n\nconst createNormalizedConfigs = (\n  legacy: boolean,\n  options: PathConfigMap,\n  pattern?: string\n): Record<string, ConfigItem> =>\n  fromEntries(\n    Object.entries(options).map(([name, c]) => {\n      const result = createConfigItem(legacy, c, pattern);\n\n      return [name, result];\n    })\n  );\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}