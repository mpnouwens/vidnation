{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";function _createForOfIteratorHelperLoose(o,allowArrayLike){var it=typeof Symbol!==\"undefined\"&&o[Symbol.iterator]||o[\"@@iterator\"];if(it)return(it=it.call(o)).next.bind(it);if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length===\"number\"){if(it)o=it;var i=0;return function(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]};};}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o===\"string\")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n===\"Object\"&&o.constructor)n=o.constructor.name;if(n===\"Map\"||n===\"Set\")return Array.from(o);if(n===\"Arguments\"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen);}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i];}return arr2;}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import*as React from'react';import NavigationBuilderContext from\"./NavigationBuilderContext\";import NavigationRouteContext from\"./NavigationRouteContext\";var VISITED_ROUTE_KEYS=Symbol('VISITED_ROUTE_KEYS');export var shouldPreventRemove=function shouldPreventRemove(emitter,beforeRemoveListeners,routes,action){var _action$VISITED_ROUTE;var reversedRoutes=_toConsumableArray(routes).reverse();var visitedRouteKeys=(_action$VISITED_ROUTE=action[VISITED_ROUTE_KEYS])!==null&&_action$VISITED_ROUTE!==void 0?_action$VISITED_ROUTE:new Set();var beforeRemoveAction=_objectSpread(_objectSpread({},action),{},_defineProperty({},VISITED_ROUTE_KEYS,visitedRouteKeys));for(var _iterator=_createForOfIteratorHelperLoose(reversedRoutes),_step;!(_step=_iterator()).done;){var route=_step.value;var _beforeRemoveListener;if(visitedRouteKeys.has(route.key)){continue;}var isPrevented=(_beforeRemoveListener=beforeRemoveListeners[route.key])===null||_beforeRemoveListener===void 0?void 0:_beforeRemoveListener.call(beforeRemoveListeners,beforeRemoveAction);if(isPrevented){return true;}visitedRouteKeys.add(route.key);var event=emitter.emit({type:'beforeRemove',target:route.key,data:{action:beforeRemoveAction},canPreventDefault:true});if(event.defaultPrevented){return true;}}return false;};export default function useOnPreventRemove(_ref){var getState=_ref.getState,emitter=_ref.emitter,beforeRemoveListeners=_ref.beforeRemoveListeners;var _React$useContext=React.useContext(NavigationBuilderContext),addKeyedListener=_React$useContext.addKeyedListener;var route=React.useContext(NavigationRouteContext);var routeKey=route===null||route===void 0?void 0:route.key;React.useEffect(function(){if(routeKey){return addKeyedListener===null||addKeyedListener===void 0?void 0:addKeyedListener('beforeRemove',routeKey,function(action){var state=getState();return shouldPreventRemove(emitter,beforeRemoveListeners,state.routes,action);});}},[addKeyedListener,beforeRemoveListeners,emitter,getState,routeKey]);}","map":{"version":3,"mappings":"47DAAA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,CAMA,MAAOC,yBAAP,kCAGA,MAAOC,uBAAP,gCAUA,GAAMC,mBAAkB,CAAGC,MAAM,CAAC,oBAAD,CAAjC,CAEA,MAAO,IAAMC,oBAAmB,CAAG,QAAtBA,oBAAmB,CAC9BC,OADiC,CAEjCC,qBAFiC,CAGjCC,MAHiC,CAIjCC,MAJiC,CAK9B,2BAEH,GAAMC,eAAc,CAAG,mBAAIF,MAAJ,EAAYG,OAAZ,EAAvB,CAEA,GAAMC,iBAA6B,wBAEjCH,MAAM,CAACN,kBAAD,CAF2B,+DAEH,GAAIU,IAAJ,EAFhC,CAIA,GAAMC,mBAAkB,gCACnBL,MADsB,wBAExBN,kBAAD,CAAsBS,kBAFxB,CAKA,kDAAoBF,cAApB,mCAAoC,IAAzBK,MAAX,aAAoC,0BAClC,GAAIH,gBAAgB,CAACI,GAAjB,CAAqBD,KAAK,CAACE,GAA3B,CAAJ,CAAqC,CAEnC,SACD,CAGD,GAAMC,YAAW,wBAAGX,qBAAqB,CAACQ,KAAK,CAACE,GAAP,CAAxB,gDAAGE,gDAAqB,CAAcL,kBAAd,CAAzC,CAEA,GAAII,WAAJ,CAAiB,CACf,MAAO,KAAP,CACD,CAEDN,gBAAgB,CAACQ,GAAjB,CAAqBL,KAAK,CAACE,GAA3B,EAEA,GAAMI,MAAK,CAAGf,OAAO,CAACgB,IAAR,CAAa,CACzBC,IAAI,CAAE,cADmB,CAEzBC,MAAM,CAAET,KAAK,CAACE,GAFW,CAGzBQ,IAAI,CAAE,CAAEhB,MAAM,CAAEK,kBAAV,CAHmB,CAIzBY,iBAAiB,CAAE,IAJM,CAAb,CAAd,CAOA,GAAIL,KAAK,CAACM,gBAAV,CAA4B,CAC1B,MAAO,KAAP,CACD,CACF,CAED,MAAO,MAAP,CACD,CA9CM,CAgDP,cAAe,SAASC,mBAAT,MAIH,IAHVC,SADyC,MACzCA,QADyC,CAEzCvB,OAFyC,MAEzCA,OAFyC,CAGzCC,uEAE6BP,KAAK,CAAC8B,UAAN,CAAiB7B,wBAAjB,CAA7B,CAAQ8B,oDACR,GAAMhB,MAAK,CAAGf,KAAK,CAAC8B,UAAN,CAAiB5B,sBAAjB,CAAd,CACA,GAAM8B,SAAQ,CAAGjB,KAAH,SAAGA,KAAH,iBAAGA,KAAK,CAAEE,GAAxB,CAEAjB,KAAK,CAACiC,SAAN,CAAgB,UAAM,CACpB,GAAID,QAAJ,CAAc,CACZ,MAAOD,iBAAP,SAAOA,gBAAP,iBAAOA,gBAAgB,CAAG,cAAH,CAAmBC,QAAnB,CAA8BvB,eAAD,CAAY,CAC9D,GAAMyB,MAAK,CAAGL,QAAQ,EAAtB,CAEA,MAAOxB,oBAAmB,CACxBC,OADwB,CAExBC,qBAFwB,CAGxB2B,KAAK,CAAC1B,MAHkB,CAIxBC,MAJwB,CAA1B,CAMD,CATsB,CAAvB,CAUD,CACF,CAbD,CAaG,CAACsB,gBAAD,CAAmBxB,qBAAnB,CAA0CD,OAA1C,CAAmDuB,QAAnD,CAA6DG,QAA7D,CAbH,EAcD","names":["React","NavigationBuilderContext","NavigationRouteContext","VISITED_ROUTE_KEYS","Symbol","shouldPreventRemove","emitter","beforeRemoveListeners","routes","action","reversedRoutes","reverse","visitedRouteKeys","Set","beforeRemoveAction","route","has","key","isPrevented","_beforeRemoveListener","add","event","emit","type","target","data","canPreventDefault","defaultPrevented","useOnPreventRemove","getState","useContext","addKeyedListener","routeKey","useEffect","state"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/@react-navigation/core/lib/module/useOnPreventRemove.tsx"],"sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationState,\n  Route,\n  NavigationAction,\n} from '@react-navigation/routers';\nimport NavigationBuilderContext, {\n  ChildBeforeRemoveListener,\n} from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport type { EventMapCore } from './types';\n\ntype Options = {\n  getState: () => NavigationState;\n  emitter: NavigationEventEmitter<EventMapCore<any>>;\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>;\n};\n\nconst VISITED_ROUTE_KEYS = Symbol('VISITED_ROUTE_KEYS');\n\nexport const shouldPreventRemove = (\n  emitter: NavigationEventEmitter<EventMapCore<any>>,\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>,\n  routes: Route<string>[],\n  action: NavigationAction\n) => {\n  // Call these in reverse order so last screens handle the event first\n  const reversedRoutes = [...routes].reverse();\n\n  const visitedRouteKeys: Set<string> =\n    // @ts-expect-error: add this property to mark that we've already emitted this action\n    action[VISITED_ROUTE_KEYS] ?? new Set<string>();\n\n  const beforeRemoveAction = {\n    ...action,\n    [VISITED_ROUTE_KEYS]: visitedRouteKeys,\n  };\n\n  for (const route of reversedRoutes) {\n    if (visitedRouteKeys.has(route.key)) {\n      // Skip if we've already emitted this action for this screen\n      continue;\n    }\n\n    // First, we need to check if any child screens want to prevent it\n    const isPrevented = beforeRemoveListeners[route.key]?.(beforeRemoveAction);\n\n    if (isPrevented) {\n      return true;\n    }\n\n    visitedRouteKeys.add(route.key);\n\n    const event = emitter.emit({\n      type: 'beforeRemove',\n      target: route.key,\n      data: { action: beforeRemoveAction },\n      canPreventDefault: true,\n    });\n\n    if (event.defaultPrevented) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default function useOnPreventRemove({\n  getState,\n  emitter,\n  beforeRemoveListeners,\n}: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const routeKey = route?.key;\n\n  React.useEffect(() => {\n    if (routeKey) {\n      return addKeyedListener?.('beforeRemove', routeKey, (action) => {\n        const state = getState();\n\n        return shouldPreventRemove(\n          emitter,\n          beforeRemoveListeners,\n          state.routes,\n          action\n        );\n      });\n    }\n  }, [addKeyedListener, beforeRemoveListeners, emitter, getState, routeKey]);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}