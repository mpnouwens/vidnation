{"ast":null,"code":"import*as React from'react';import useNavigation from\"./useNavigation\";export default function useFocusEffect(effect){var navigation=useNavigation();React.useEffect(function(){var isFocused=false;var cleanup;var callback=function callback(){var destroy=effect();if(destroy===undefined||typeof destroy==='function'){return destroy;}if(process.env.NODE_ENV!=='production'){var message='An effect function must not return anything besides a function, which is used for clean-up.';if(destroy===null){message+=\" You returned 'null'. If your effect does not require clean-up, return 'undefined' (or nothing).\";}else if(typeof destroy.then==='function'){message+=\"\\n\\nIt looks like you wrote 'useFocusEffect(async () => ...)' or returned a Promise. \"+'Instead, write the async function inside your effect '+'and call it immediately:\\n\\n'+'useFocusEffect(\\n'+'  React.useCallback() => {\\n'+'    async function fetchData() {\\n'+'      // You can await here\\n'+'      const response = await MyAPI.getData(someId);\\n'+'      // ...\\n'+'    }\\n\\n'+'    fetchData();\\n'+'  }, [someId])\\n'+'};\\n\\n'+'See usage guide: https://reactnavigation.org/docs/use-focus-effect';}else{message+=\" You returned: '\".concat(JSON.stringify(destroy),\"'\");}console.error(message);}};if(navigation.isFocused()){cleanup=callback();isFocused=true;}var unsubscribeFocus=navigation.addListener('focus',function(){if(isFocused){return;}if(cleanup!==undefined){cleanup();}cleanup=callback();isFocused=true;});var unsubscribeBlur=navigation.addListener('blur',function(){if(cleanup!==undefined){cleanup();}cleanup=undefined;isFocused=false;});return function(){if(cleanup!==undefined){cleanup();}unsubscribeFocus();unsubscribeBlur();};},[effect,navigation]);}","map":{"version":3,"mappings":"AAAA,MAAO,GAAKA,MAAZ,KAAuB,OAAvB,CACA,MAAOC,cAAP,uBAWA,cAAe,SAASC,eAAT,CAAwBC,MAAxB,CAAgD,CAC7D,GAAMC,WAAU,CAAGH,aAAa,EAAhC,CAEAD,KAAK,CAACK,SAAN,CAAgB,UAAM,CACpB,GAAIC,UAAS,CAAG,KAAhB,CACA,GAAIC,QAAJ,CAEA,GAAMC,SAAQ,CAAG,QAAXA,SAAQ,EAAS,CACrB,GAAMC,QAAO,CAAGN,MAAM,EAAtB,CAEA,GAAIM,OAAO,GAAKC,SAAZ,EAAyB,MAAOD,QAAP,GAAmB,UAAhD,CAA4D,CAC1D,MAAOA,QAAP,CACD,CAED,GAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAA7B,CAA2C,CACzC,GAAIC,QAAO,CACT,6FADF,CAGA,GAAIL,OAAO,GAAK,IAAhB,CAAsB,CACpBK,OAAO,EACL,kGADF,CAED,CAHD,IAGO,IAAI,MAAQL,QAAD,CAAiBM,IAAxB,GAAiC,UAArC,CAAiD,CACtDD,OAAO,EACL,wFACA,uDADA,CAEA,8BAFA,CAGA,mBAHA,CAIA,8BAJA,CAKA,oCALA,CAMA,+BANA,CAOA,uDAPA,CAQA,gBARA,CASA,WATA,CAUA,oBAVA,CAWA,kBAXA,CAYA,QAZA,CAaA,oEAdF,CAeD,CAhBM,IAgBA,CACLA,OAAO,4BAAuBE,IAAI,CAACC,SAAL,CAAeR,OAAf,CAAvB,KAAP,CACD,CAEDS,OAAO,CAACC,KAAR,CAAcL,OAAd,EACD,CACF,CApCD,CAuCA,GAAIV,UAAU,CAACE,SAAX,EAAJ,CAA4B,CAC1BC,OAAO,CAAGC,QAAQ,EAAlB,CACAF,SAAS,CAAG,IAAZ,CACD,CAED,GAAMc,iBAAgB,CAAGhB,UAAU,CAACiB,WAAX,CAAuB,OAAvB,CAAgC,UAAM,CAG7D,GAAIf,SAAJ,CAAe,CACb,OACD,CAED,GAAIC,OAAO,GAAKG,SAAhB,CAA2B,CACzBH,OAAO,GACR,CAEDA,OAAO,CAAGC,QAAQ,EAAlB,CACAF,SAAS,CAAG,IAAZ,CACD,CAbwB,CAAzB,CAeA,GAAMgB,gBAAe,CAAGlB,UAAU,CAACiB,WAAX,CAAuB,MAAvB,CAA+B,UAAM,CAC3D,GAAId,OAAO,GAAKG,SAAhB,CAA2B,CACzBH,OAAO,GACR,CAEDA,OAAO,CAAGG,SAAV,CACAJ,SAAS,CAAG,KAAZ,CACD,CAPuB,CAAxB,CASA,MAAO,WAAM,CACX,GAAIC,OAAO,GAAKG,SAAhB,CAA2B,CACzBH,OAAO,GACR,CAEDa,gBAAgB,GAChBE,eAAe,GAChB,CAPD,CAQD,CAhFD,CAgFG,CAACnB,MAAD,CAASC,UAAT,CAhFH,EAiFD","names":["React","useNavigation","useFocusEffect","effect","navigation","useEffect","isFocused","cleanup","callback","destroy","undefined","process","env","NODE_ENV","message","then","JSON","stringify","console","error","unsubscribeFocus","addListener","unsubscribeBlur"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/@react-navigation/core/lib/module/useFocusEffect.tsx"],"sourcesContent":["import * as React from 'react';\nimport useNavigation from './useNavigation';\n\ntype EffectCallback = () => undefined | void | (() => void);\n\n/**\n * Hook to run an effect in a focused screen, similar to `React.useEffect`.\n * This can be used to perform side-effects such as fetching data or subscribing to events.\n * The passed callback should be wrapped in `React.useCallback` to avoid running the effect too often.\n *\n * @param callback Memoized callback containing the effect, should optionally return a cleanup function.\n */\nexport default function useFocusEffect(effect: EffectCallback) {\n  const navigation = useNavigation();\n\n  React.useEffect(() => {\n    let isFocused = false;\n    let cleanup: undefined | void | (() => void);\n\n    const callback = () => {\n      const destroy = effect();\n\n      if (destroy === undefined || typeof destroy === 'function') {\n        return destroy;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        let message =\n          'An effect function must not return anything besides a function, which is used for clean-up.';\n\n        if (destroy === null) {\n          message +=\n            \" You returned 'null'. If your effect does not require clean-up, return 'undefined' (or nothing).\";\n        } else if (typeof (destroy as any).then === 'function') {\n          message +=\n            \"\\n\\nIt looks like you wrote 'useFocusEffect(async () => ...)' or returned a Promise. \" +\n            'Instead, write the async function inside your effect ' +\n            'and call it immediately:\\n\\n' +\n            'useFocusEffect(\\n' +\n            '  React.useCallback() => {\\n' +\n            '    async function fetchData() {\\n' +\n            '      // You can await here\\n' +\n            '      const response = await MyAPI.getData(someId);\\n' +\n            '      // ...\\n' +\n            '    }\\n\\n' +\n            '    fetchData();\\n' +\n            '  }, [someId])\\n' +\n            '};\\n\\n' +\n            'See usage guide: https://reactnavigation.org/docs/use-focus-effect';\n        } else {\n          message += ` You returned: '${JSON.stringify(destroy)}'`;\n        }\n\n        console.error(message);\n      }\n    };\n\n    // We need to run the effect on intial render/dep changes if the screen is focused\n    if (navigation.isFocused()) {\n      cleanup = callback();\n      isFocused = true;\n    }\n\n    const unsubscribeFocus = navigation.addListener('focus', () => {\n      // If callback was already called for focus, avoid calling it again\n      // The focus event may also fire on intial render, so we guard against runing the effect twice\n      if (isFocused) {\n        return;\n      }\n\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = callback();\n      isFocused = true;\n    });\n\n    const unsubscribeBlur = navigation.addListener('blur', () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = undefined;\n      isFocused = false;\n    });\n\n    return () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [effect, navigation]);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}