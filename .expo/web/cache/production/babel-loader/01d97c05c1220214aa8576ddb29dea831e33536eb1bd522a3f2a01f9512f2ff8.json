{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import*as React from'react';import View from\"react-native-web/dist/exports/View\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import{useTheme}from'@react-navigation/native';import Card from\"./Card\";import HeaderHeightContext from\"../../utils/HeaderHeightContext\";import HeaderShownContext from\"../../utils/HeaderShownContext\";import PreviousSceneContext from\"../../utils/PreviousSceneContext\";var EPSILON=0.1;function CardContainer(_ref){var active=_ref.active,cardOverlay=_ref.cardOverlay,cardOverlayEnabled=_ref.cardOverlayEnabled,cardShadowEnabled=_ref.cardShadowEnabled,cardStyle=_ref.cardStyle,cardStyleInterpolator=_ref.cardStyleInterpolator,closing=_ref.closing,gesture=_ref.gesture,focused=_ref.focused,gestureDirection=_ref.gestureDirection,gestureEnabled=_ref.gestureEnabled,gestureResponseDistance=_ref.gestureResponseDistance,gestureVelocityImpact=_ref.gestureVelocityImpact,getPreviousScene=_ref.getPreviousScene,getFocusedRoute=_ref.getFocusedRoute,mode=_ref.mode,headerMode=_ref.headerMode,headerShown=_ref.headerShown,headerStyleInterpolator=_ref.headerStyleInterpolator,hasAbsoluteHeader=_ref.hasAbsoluteHeader,headerHeight=_ref.headerHeight,onHeaderHeightChange=_ref.onHeaderHeightChange,index=_ref.index,layout=_ref.layout,onCloseRoute=_ref.onCloseRoute,onOpenRoute=_ref.onOpenRoute,onPageChangeCancel=_ref.onPageChangeCancel,onPageChangeConfirm=_ref.onPageChangeConfirm,onPageChangeStart=_ref.onPageChangeStart,onGestureCancel=_ref.onGestureCancel,onGestureEnd=_ref.onGestureEnd,onGestureStart=_ref.onGestureStart,onTransitionEnd=_ref.onTransitionEnd,onTransitionStart=_ref.onTransitionStart,renderHeader=_ref.renderHeader,renderScene=_ref.renderScene,safeAreaInsetBottom=_ref.safeAreaInsetBottom,safeAreaInsetLeft=_ref.safeAreaInsetLeft,safeAreaInsetRight=_ref.safeAreaInsetRight,safeAreaInsetTop=_ref.safeAreaInsetTop,scene=_ref.scene,transitionSpec=_ref.transitionSpec;React.useEffect(function(){onPageChangeConfirm===null||onPageChangeConfirm===void 0?void 0:onPageChangeConfirm();},[active,onPageChangeConfirm]);var handleOpen=function handleOpen(){onTransitionEnd===null||onTransitionEnd===void 0?void 0:onTransitionEnd({route:scene.route},false);onOpenRoute({route:scene.route});};var handleClose=function handleClose(){onTransitionEnd===null||onTransitionEnd===void 0?void 0:onTransitionEnd({route:scene.route},true);onCloseRoute({route:scene.route});};var handleGestureBegin=function handleGestureBegin(){onPageChangeStart===null||onPageChangeStart===void 0?void 0:onPageChangeStart();onGestureStart===null||onGestureStart===void 0?void 0:onGestureStart({route:scene.route});};var handleGestureCanceled=function handleGestureCanceled(){onPageChangeCancel===null||onPageChangeCancel===void 0?void 0:onPageChangeCancel();onGestureCancel===null||onGestureCancel===void 0?void 0:onGestureCancel({route:scene.route});};var handleGestureEnd=function handleGestureEnd(){onGestureEnd===null||onGestureEnd===void 0?void 0:onGestureEnd({route:scene.route});};var handleTransitionStart=function handleTransitionStart(_ref2){var closing=_ref2.closing;if(active&&closing){onPageChangeConfirm===null||onPageChangeConfirm===void 0?void 0:onPageChangeConfirm();}else{onPageChangeCancel===null||onPageChangeCancel===void 0?void 0:onPageChangeCancel();}onTransitionStart===null||onTransitionStart===void 0?void 0:onTransitionStart({route:scene.route},closing);};var insets={top:safeAreaInsetTop,right:safeAreaInsetRight,bottom:safeAreaInsetBottom,left:safeAreaInsetLeft};var _useTheme=useTheme(),colors=_useTheme.colors;var _React$useState=React.useState('box-none'),_React$useState2=_slicedToArray(_React$useState,2),pointerEvents=_React$useState2[0],setPointerEvents=_React$useState2[1];React.useEffect(function(){var _scene$progress$next,_scene$progress$next$;var listener=(_scene$progress$next=scene.progress.next)===null||_scene$progress$next===void 0?void 0:(_scene$progress$next$=_scene$progress$next.addListener)===null||_scene$progress$next$===void 0?void 0:_scene$progress$next$.call(_scene$progress$next,function(_ref3){var value=_ref3.value;setPointerEvents(value<=EPSILON?'box-none':'none');});return function(){if(listener){var _scene$progress$next2,_scene$progress$next3;(_scene$progress$next2=scene.progress.next)===null||_scene$progress$next2===void 0?void 0:(_scene$progress$next3=_scene$progress$next2.removeListener)===null||_scene$progress$next3===void 0?void 0:_scene$progress$next3.call(_scene$progress$next2,listener);}};},[pointerEvents,scene.progress.next]);var isParentHeaderShown=React.useContext(HeaderShownContext);var isCurrentHeaderShown=headerMode!=='none'&&headerShown!==false;var previousScene=getPreviousScene({route:scene.route});return React.createElement(Card,{index:index,gestureDirection:gestureDirection,layout:layout,insets:insets,gesture:gesture,current:scene.progress.current,next:scene.progress.next,closing:closing,onOpen:handleOpen,onClose:handleClose,overlay:cardOverlay,overlayEnabled:cardOverlayEnabled,shadowEnabled:cardShadowEnabled,onTransitionStart:handleTransitionStart,onGestureBegin:handleGestureBegin,onGestureCanceled:handleGestureCanceled,onGestureEnd:handleGestureEnd,gestureEnabled:gestureEnabled,gestureResponseDistance:gestureResponseDistance,gestureVelocityImpact:gestureVelocityImpact,transitionSpec:transitionSpec,styleInterpolator:cardStyleInterpolator,accessibilityElementsHidden:!focused,importantForAccessibility:focused?'auto':'no-hide-descendants',pointerEvents:active?'box-none':pointerEvents,pageOverflowEnabled:headerMode==='screen'&&mode==='card',containerStyle:hasAbsoluteHeader?{marginTop:headerHeight}:null,contentStyle:[{backgroundColor:colors.background},cardStyle],style:StyleSheet.absoluteFill},React.createElement(View,{style:styles.container},React.createElement(View,{style:styles.scene},React.createElement(PreviousSceneContext.Provider,{value:previousScene},React.createElement(HeaderShownContext.Provider,{value:isParentHeaderShown||isCurrentHeaderShown},React.createElement(HeaderHeightContext.Provider,{value:headerHeight},renderScene({route:scene.route}))))),headerMode==='screen'?renderHeader({mode:'screen',layout:layout,insets:insets,scenes:[previousScene,scene],getPreviousScene:getPreviousScene,getFocusedRoute:getFocusedRoute,gestureDirection:gestureDirection,styleInterpolator:headerStyleInterpolator,onContentHeightChange:onHeaderHeightChange}):null));}export default React.memo(CardContainer);var styles=StyleSheet.create({container:{flex:1,flexDirection:'column-reverse'},scene:{flex:1}});","map":{"version":3,"mappings":"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","names":["React","useTheme","Card","HeaderHeightContext","HeaderShownContext","PreviousSceneContext","EPSILON","CardContainer","active","cardOverlay","cardOverlayEnabled","cardShadowEnabled","cardStyle","cardStyleInterpolator","closing","gesture","focused","gestureDirection","gestureEnabled","gestureResponseDistance","gestureVelocityImpact","getPreviousScene","getFocusedRoute","mode","headerMode","headerShown","headerStyleInterpolator","hasAbsoluteHeader","headerHeight","onHeaderHeightChange","index","layout","onCloseRoute","onOpenRoute","onPageChangeCancel","onPageChangeConfirm","onPageChangeStart","onGestureCancel","onGestureEnd","onGestureStart","onTransitionEnd","onTransitionStart","renderHeader","renderScene","safeAreaInsetBottom","safeAreaInsetLeft","safeAreaInsetRight","safeAreaInsetTop","scene","transitionSpec","useEffect","handleOpen","route","handleClose","handleGestureBegin","handleGestureCanceled","handleGestureEnd","handleTransitionStart","insets","top","right","bottom","left","colors","useState","pointerEvents","setPointerEvents","listener","progress","next","_scene$progress$next","addListener","_scene$progress$next$","value","removeListener","isParentHeaderShown","useContext","isCurrentHeaderShown","previousScene","current","onOpen","onClose","overlay","overlayEnabled","shadowEnabled","onGestureBegin","onGestureCanceled","styleInterpolator","accessibilityElementsHidden","importantForAccessibility","pageOverflowEnabled","containerStyle","marginTop","contentStyle","backgroundColor","background","style","StyleSheet","absoluteFill","View","styles","container","Provider","scenes","onContentHeightChange","memo","create","flex","flexDirection"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/@react-navigation/stack/lib/module/views/Stack/CardContainer.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport { Route, useTheme } from '@react-navigation/native';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\nimport HeaderHeightContext from '../../utils/HeaderHeightContext';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nimport PreviousSceneContext from '../../utils/PreviousSceneContext';\nimport type {\n  Scene,\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  TransitionPreset,\n} from '../../types';\n\ntype Props = TransitionPreset & {\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  scene: Scene<Route<string>>;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  cardOverlay?: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  cardOverlayEnabled?: boolean;\n  cardShadowEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n  getPreviousScene: (props: {\n    route: Route<string>;\n  }) => Scene<Route<string>> | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart?: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd?: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: () => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n  gestureEnabled?: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact?: number;\n  mode: StackCardMode;\n  headerMode: StackHeaderMode;\n  headerShown: boolean;\n  hasAbsoluteHeader: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  active,\n  cardOverlay,\n  cardOverlayEnabled,\n  cardShadowEnabled,\n  cardStyle,\n  cardStyleInterpolator,\n  closing,\n  gesture,\n  focused,\n  gestureDirection,\n  gestureEnabled,\n  gestureResponseDistance,\n  gestureVelocityImpact,\n  getPreviousScene,\n  getFocusedRoute,\n  mode,\n  headerMode,\n  headerShown,\n  headerStyleInterpolator,\n  hasAbsoluteHeader,\n  headerHeight,\n  onHeaderHeightChange,\n  index,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onPageChangeCancel,\n  onPageChangeConfirm,\n  onPageChangeStart,\n  onGestureCancel,\n  onGestureEnd,\n  onGestureStart,\n  onTransitionEnd,\n  onTransitionStart,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n  transitionSpec,\n}: Props) {\n  React.useEffect(() => {\n    onPageChangeConfirm?.();\n  }, [active, onPageChangeConfirm]);\n\n  const handleOpen = () => {\n    onTransitionEnd?.({ route: scene.route }, false);\n    onOpenRoute({ route: scene.route });\n  };\n\n  const handleClose = () => {\n    onTransitionEnd?.({ route: scene.route }, true);\n    onCloseRoute({ route: scene.route });\n  };\n\n  const handleGestureBegin = () => {\n    onPageChangeStart?.();\n    onGestureStart?.({ route: scene.route });\n  };\n\n  const handleGestureCanceled = () => {\n    onPageChangeCancel?.();\n    onGestureCancel?.({ route: scene.route });\n  };\n\n  const handleGestureEnd = () => {\n    onGestureEnd?.({ route: scene.route });\n  };\n\n  const handleTransitionStart = ({ closing }: { closing: boolean }) => {\n    if (active && closing) {\n      onPageChangeConfirm?.();\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route: scene.route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\n    'box-none'\n  );\n\n  React.useEffect(() => {\n    // @ts-expect-error: AnimatedInterpolation optionally has addListener, but the type defs don't think so\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        // @ts-expect-error: AnimatedInterpolation optionally has removedListener, but the type defs don't think so\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  const isParentHeaderShown = React.useContext(HeaderShownContext);\n  const isCurrentHeaderShown = headerMode !== 'none' && headerShown !== false;\n  const previousScene = getPreviousScene({ route: scene.route });\n\n  return (\n    <Card\n      index={index}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlay={cardOverlay}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransitionStart={handleTransitionStart}\n      onGestureBegin={handleGestureBegin}\n      onGestureCanceled={handleGestureCanceled}\n      onGestureEnd={handleGestureEnd}\n      gestureEnabled={gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      pageOverflowEnabled={headerMode === 'screen' && mode === 'card'}\n      containerStyle={hasAbsoluteHeader ? { marginTop: headerHeight } : null}\n      contentStyle={[{ backgroundColor: colors.background }, cardStyle]}\n      style={StyleSheet.absoluteFill}\n    >\n      <View style={styles.container}>\n        <View style={styles.scene}>\n          <PreviousSceneContext.Provider value={previousScene}>\n            <HeaderShownContext.Provider\n              value={isParentHeaderShown || isCurrentHeaderShown}\n            >\n              <HeaderHeightContext.Provider value={headerHeight}>\n                {renderScene({ route: scene.route })}\n              </HeaderHeightContext.Provider>\n            </HeaderShownContext.Provider>\n          </PreviousSceneContext.Provider>\n        </View>\n        {headerMode === 'screen'\n          ? renderHeader({\n              mode: 'screen',\n              layout,\n              insets,\n              scenes: [previousScene, scene],\n              getPreviousScene,\n              getFocusedRoute,\n              gestureDirection,\n              styleInterpolator: headerStyleInterpolator,\n              onContentHeightChange: onHeaderHeightChange,\n            })\n          : null}\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}