{"ast":null,"code":"'use strict';import invariant from'fbjs/lib/invariant';function elementsThatOverlapOffsets(offsets,itemCount,getFrameMetrics){var out=[];var outLength=0;for(var ii=0;ii<itemCount;ii++){var frame=getFrameMetrics(ii);var trailingOffset=frame.offset+frame.length;for(var kk=0;kk<offsets.length;kk++){if(out[kk]==null&&trailingOffset>=offsets[kk]){out[kk]=ii;outLength++;if(kk===offsets.length-1){invariant(outLength===offsets.length,'bad offsets input, should be in increasing order: %s',JSON.stringify(offsets));return out;}}}}return out;}function newRangeCount(prev,next){return next.last-next.first+1-Math.max(0,1+Math.min(next.last,prev.last)-Math.max(next.first,prev.first));}function computeWindowedRenderLimits(props,prev,getFrameMetricsApprox,scrollMetrics){var data=props.data,getItemCount=props.getItemCount,maxToRenderPerBatch=props.maxToRenderPerBatch,windowSize=props.windowSize;var itemCount=getItemCount(data);if(itemCount===0){return prev;}var offset=scrollMetrics.offset,velocity=scrollMetrics.velocity,visibleLength=scrollMetrics.visibleLength;var visibleBegin=Math.max(0,offset);var visibleEnd=visibleBegin+visibleLength;var overscanLength=(windowSize-1)*visibleLength;var leadFactor=0.5;var fillPreference=velocity>1?'after':velocity<-1?'before':'none';var overscanBegin=Math.max(0,visibleBegin-(1-leadFactor)*overscanLength);var overscanEnd=Math.max(0,visibleEnd+leadFactor*overscanLength);var lastItemOffset=getFrameMetricsApprox(itemCount-1).offset;if(lastItemOffset<overscanBegin){return{first:Math.max(0,itemCount-1-maxToRenderPerBatch),last:itemCount-1};}var _elementsThatOverlapO=elementsThatOverlapOffsets([overscanBegin,visibleBegin,visibleEnd,overscanEnd],props.getItemCount(props.data),getFrameMetricsApprox),overscanFirst=_elementsThatOverlapO[0],first=_elementsThatOverlapO[1],last=_elementsThatOverlapO[2],overscanLast=_elementsThatOverlapO[3];overscanFirst=overscanFirst==null?0:overscanFirst;first=first==null?Math.max(0,overscanFirst):first;overscanLast=overscanLast==null?itemCount-1:overscanLast;last=last==null?Math.min(overscanLast,first+maxToRenderPerBatch-1):last;var visible={first:first,last:last};var newCellCount=newRangeCount(prev,visible);while(true){if(first<=overscanFirst&&last>=overscanLast){break;}var maxNewCells=newCellCount>=maxToRenderPerBatch;var firstWillAddMore=first<=prev.first||first>prev.last;var firstShouldIncrement=first>overscanFirst&&(!maxNewCells||!firstWillAddMore);var lastWillAddMore=last>=prev.last||last<prev.first;var lastShouldIncrement=last<overscanLast&&(!maxNewCells||!lastWillAddMore);if(maxNewCells&&!firstShouldIncrement&&!lastShouldIncrement){break;}if(firstShouldIncrement&&!(fillPreference==='after'&&lastShouldIncrement&&lastWillAddMore)){if(firstWillAddMore){newCellCount++;}first--;}if(lastShouldIncrement&&!(fillPreference==='before'&&firstShouldIncrement&&firstWillAddMore)){if(lastWillAddMore){newCellCount++;}last++;}}if(!(last>=first&&first>=0&&last<itemCount&&first>=overscanFirst&&last<=overscanLast&&first<=visible.first&&last>=visible.last)){throw new Error('Bad window calculation '+JSON.stringify({first:first,last:last,itemCount:itemCount,overscanFirst:overscanFirst,overscanLast:overscanLast,visible:visible}));}return{first:first,last:last};}var VirtualizeUtils={computeWindowedRenderLimits:computeWindowedRenderLimits,elementsThatOverlapOffsets:elementsThatOverlapOffsets,newRangeCount:newRangeCount};export{computeWindowedRenderLimits,elementsThatOverlapOffsets,newRangeCount};export default VirtualizeUtils;","map":{"version":3,"names":["invariant","elementsThatOverlapOffsets","offsets","itemCount","getFrameMetrics","out","outLength","ii","frame","trailingOffset","offset","length","kk","JSON","stringify","newRangeCount","prev","next","last","first","Math","max","min","computeWindowedRenderLimits","props","getFrameMetricsApprox","scrollMetrics","data","getItemCount","maxToRenderPerBatch","windowSize","velocity","visibleLength","visibleBegin","visibleEnd","overscanLength","leadFactor","fillPreference","overscanBegin","overscanEnd","lastItemOffset","_elementsThatOverlapO","overscanFirst","overscanLast","visible","newCellCount","maxNewCells","firstWillAddMore","firstShouldIncrement","lastWillAddMore","lastShouldIncrement","Error","VirtualizeUtils"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/react-native-web/dist/vendor/react-native/VirtualizeUtils/index.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n'use strict';\n\nimport invariant from 'fbjs/lib/invariant';\n/**\n * Used to find the indices of the frames that overlap the given offsets. Useful for finding the\n * items that bound different windows of content, such as the visible area or the buffered overscan\n * area.\n */\n\nfunction elementsThatOverlapOffsets(offsets, itemCount, getFrameMetrics) {\n  var out = [];\n  var outLength = 0;\n\n  for (var ii = 0; ii < itemCount; ii++) {\n    var frame = getFrameMetrics(ii);\n    var trailingOffset = frame.offset + frame.length;\n\n    for (var kk = 0; kk < offsets.length; kk++) {\n      if (out[kk] == null && trailingOffset >= offsets[kk]) {\n        out[kk] = ii;\n        outLength++;\n\n        if (kk === offsets.length - 1) {\n          invariant(outLength === offsets.length, 'bad offsets input, should be in increasing order: %s', JSON.stringify(offsets));\n          return out;\n        }\n      }\n    }\n  }\n\n  return out;\n}\n/**\n * Computes the number of elements in the `next` range that are new compared to the `prev` range.\n * Handy for calculating how many new items will be rendered when the render window changes so we\n * can restrict the number of new items render at once so that content can appear on the screen\n * faster.\n */\n\n\nfunction newRangeCount(prev, next) {\n  return next.last - next.first + 1 - Math.max(0, 1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first));\n}\n/**\n * Custom logic for determining which items should be rendered given the current frame and scroll\n * metrics, as well as the previous render state. The algorithm may evolve over time, but generally\n * prioritizes the visible area first, then expands that with overscan regions ahead and behind,\n * biased in the direction of scroll.\n */\n\n\nfunction computeWindowedRenderLimits(props, prev, getFrameMetricsApprox, scrollMetrics) {\n  var data = props.data,\n      getItemCount = props.getItemCount,\n      maxToRenderPerBatch = props.maxToRenderPerBatch,\n      windowSize = props.windowSize;\n  var itemCount = getItemCount(data);\n\n  if (itemCount === 0) {\n    return prev;\n  }\n\n  var offset = scrollMetrics.offset,\n      velocity = scrollMetrics.velocity,\n      visibleLength = scrollMetrics.visibleLength; // Start with visible area, then compute maximum overscan region by expanding from there, biased\n  // in the direction of scroll. Total overscan area is capped, which should cap memory consumption\n  // too.\n\n  var visibleBegin = Math.max(0, offset);\n  var visibleEnd = visibleBegin + visibleLength;\n  var overscanLength = (windowSize - 1) * visibleLength; // Considering velocity seems to introduce more churn than it's worth.\n\n  var leadFactor = 0.5; // Math.max(0, Math.min(1, velocity / 25 + 0.5));\n\n  var fillPreference = velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';\n  var overscanBegin = Math.max(0, visibleBegin - (1 - leadFactor) * overscanLength);\n  var overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);\n  var lastItemOffset = getFrameMetricsApprox(itemCount - 1).offset;\n\n  if (lastItemOffset < overscanBegin) {\n    // Entire list is before our overscan window\n    return {\n      first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),\n      last: itemCount - 1\n    };\n  } // Find the indices that correspond to the items at the render boundaries we're targeting.\n\n\n  var _elementsThatOverlapO = elementsThatOverlapOffsets([overscanBegin, visibleBegin, visibleEnd, overscanEnd], props.getItemCount(props.data), getFrameMetricsApprox),\n      overscanFirst = _elementsThatOverlapO[0],\n      first = _elementsThatOverlapO[1],\n      last = _elementsThatOverlapO[2],\n      overscanLast = _elementsThatOverlapO[3];\n\n  overscanFirst = overscanFirst == null ? 0 : overscanFirst;\n  first = first == null ? Math.max(0, overscanFirst) : first;\n  overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;\n  last = last == null ? Math.min(overscanLast, first + maxToRenderPerBatch - 1) : last;\n  var visible = {\n    first: first,\n    last: last\n  }; // We want to limit the number of new cells we're rendering per batch so that we can fill the\n  // content on the screen quickly. If we rendered the entire overscan window at once, the user\n  // could be staring at white space for a long time waiting for a bunch of offscreen content to\n  // render.\n\n  var newCellCount = newRangeCount(prev, visible);\n\n  while (true) {\n    if (first <= overscanFirst && last >= overscanLast) {\n      // If we fill the entire overscan range, we're done.\n      break;\n    }\n\n    var maxNewCells = newCellCount >= maxToRenderPerBatch;\n    var firstWillAddMore = first <= prev.first || first > prev.last;\n    var firstShouldIncrement = first > overscanFirst && (!maxNewCells || !firstWillAddMore);\n    var lastWillAddMore = last >= prev.last || last < prev.first;\n    var lastShouldIncrement = last < overscanLast && (!maxNewCells || !lastWillAddMore);\n\n    if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {\n      // We only want to stop if we've hit maxNewCells AND we cannot increment first or last\n      // without rendering new items. This let's us preserve as many already rendered items as\n      // possible, reducing render churn and keeping the rendered overscan range as large as\n      // possible.\n      break;\n    }\n\n    if (firstShouldIncrement && !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)) {\n      if (firstWillAddMore) {\n        newCellCount++;\n      }\n\n      first--;\n    }\n\n    if (lastShouldIncrement && !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)) {\n      if (lastWillAddMore) {\n        newCellCount++;\n      }\n\n      last++;\n    }\n  }\n\n  if (!(last >= first && first >= 0 && last < itemCount && first >= overscanFirst && last <= overscanLast && first <= visible.first && last >= visible.last)) {\n    throw new Error('Bad window calculation ' + JSON.stringify({\n      first: first,\n      last: last,\n      itemCount: itemCount,\n      overscanFirst: overscanFirst,\n      overscanLast: overscanLast,\n      visible: visible\n    }));\n  }\n\n  return {\n    first: first,\n    last: last\n  };\n}\n\nvar VirtualizeUtils = {\n  computeWindowedRenderLimits: computeWindowedRenderLimits,\n  elementsThatOverlapOffsets: elementsThatOverlapOffsets,\n  newRangeCount: newRangeCount\n};\nexport { computeWindowedRenderLimits, elementsThatOverlapOffsets, newRangeCount };\nexport default VirtualizeUtils;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}