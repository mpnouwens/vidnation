{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}import React,{PureComponent}from'react';import PropTypes from'prop-types';import NativeModules from\"react-native-web/dist/exports/NativeModules\";import Platform from\"react-native-web/dist/exports/Platform\";import PixelRatio from\"react-native-web/dist/exports/PixelRatio\";import processColor from\"react-native-web/dist/exports/processColor\";import Text from\"react-native-web/dist/exports/Text\";import ensureNativeModuleAvailable from\"./ensure-native-module-available\";import createIconButtonComponent from\"./icon-button\";import createTabBarItemIOSComponent from\"./tab-bar-item-ios\";import createToolbarAndroidComponent from\"./toolbar-android\";export var NativeIconAPI=NativeModules.RNVectorIconsManager||NativeModules.RNVectorIconsModule;export var DEFAULT_ICON_SIZE=12;export var DEFAULT_ICON_COLOR='black';export default function createIconSet(glyphMap,fontFamily,fontFile,fontStyle){var fontBasename=fontFile?fontFile.replace(/\\.(otf|ttf)$/,''):fontFamily;var fontReference=Platform.select({windows:\"Assets/\"+fontFile+\"#\"+fontFamily,android:fontBasename,web:fontBasename,default:fontFamily});var IconNamePropType=PropTypes.oneOf(Object.keys(glyphMap));var Icon=function(_PureComponent){_inherits(Icon,_PureComponent);var _super=_createSuper(Icon);function Icon(){var _this;_classCallCheck(this,Icon);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.root=null;_this.handleRef=function(ref){_this.root=ref;};return _this;}_createClass(Icon,[{key:\"setNativeProps\",value:function setNativeProps(nativeProps){if(this.root){this.root.setNativeProps(nativeProps);}}},{key:\"render\",value:function render(){var _this$props=this.props,name=_this$props.name,size=_this$props.size,color=_this$props.color,style=_this$props.style,children=_this$props.children,props=_objectWithoutProperties(_this$props,[\"name\",\"size\",\"color\",\"style\",\"children\"]);var glyph=name?glyphMap[name]||'?':'';if(typeof glyph==='number'){glyph=String.fromCharCode(glyph);}var styleDefaults={fontSize:size,color:color};var styleOverrides={fontFamily:fontReference,fontWeight:'normal',fontStyle:'normal'};props.style=[styleDefaults,style,styleOverrides,fontStyle||{}];props.ref=this.handleRef;return React.createElement(Text,props,glyph,children);}}]);return Icon;}(PureComponent);Icon.propTypes={allowFontScaling:PropTypes.bool,name:IconNamePropType,size:PropTypes.number,color:PropTypes.oneOfType([PropTypes.string,PropTypes.number]),children:PropTypes.node,style:PropTypes.any};Icon.defaultProps={size:DEFAULT_ICON_SIZE,allowFontScaling:false};var imageSourceCache={};function getImageSource(name){var size=arguments.length>1&&arguments[1]!==undefined?arguments[1]:DEFAULT_ICON_SIZE;var color=arguments.length>2&&arguments[2]!==undefined?arguments[2]:DEFAULT_ICON_COLOR;ensureNativeModuleAvailable();var glyph=glyphMap[name]||'?';if(typeof glyph==='number'){glyph=String.fromCharCode(glyph);}var processedColor=processColor(color);var cacheKey=glyph+\":\"+size+\":\"+processedColor;var scale=PixelRatio.get();return new Promise(function(resolve,reject){var cached=imageSourceCache[cacheKey];if(typeof cached!=='undefined'){if(!cached||cached instanceof Error){reject(cached);}else{resolve({uri:cached,scale:scale});}}else{NativeIconAPI.getImageForFont(fontReference,glyph,size,processedColor,function(err,image){var error=typeof err==='string'?new Error(err):err;imageSourceCache[cacheKey]=image||error||false;if(!error&&image){resolve({uri:image,scale:scale});}else{reject(error);}});}});}function loadFont(){var file=arguments.length>0&&arguments[0]!==undefined?arguments[0]:fontFile;if(Platform.OS==='ios'){ensureNativeModuleAvailable();if(!file){return Promise.reject(new Error('Unable to load font, because no file was specified. '));}return NativeIconAPI.loadFontWithFileName.apply(NativeIconAPI,_toConsumableArray(file.split('.')));}return Promise.resolve();}function hasIcon(name){return Object.prototype.hasOwnProperty.call(glyphMap,name);}function getRawGlyphMap(){return glyphMap;}function getFontFamily(){return fontReference;}Icon.Button=createIconButtonComponent(Icon);Icon.TabBarItem=createTabBarItemIOSComponent(IconNamePropType,getImageSource);Icon.TabBarItemIOS=Icon.TabBarItem;Icon.ToolbarAndroid=createToolbarAndroidComponent(IconNamePropType,getImageSource);Icon.getImageSource=getImageSource;Icon.loadFont=loadFont;Icon.hasIcon=hasIcon;Icon.getRawGlyphMap=getRawGlyphMap;Icon.getFontFamily=getFontFamily;return Icon;}","map":{"version":3,"names":["React","PureComponent","PropTypes","ensureNativeModuleAvailable","createIconButtonComponent","createTabBarItemIOSComponent","createToolbarAndroidComponent","NativeIconAPI","NativeModules","RNVectorIconsManager","RNVectorIconsModule","DEFAULT_ICON_SIZE","DEFAULT_ICON_COLOR","createIconSet","glyphMap","fontFamily","fontFile","fontStyle","fontBasename","replace","fontReference","Platform","select","windows","android","web","default","IconNamePropType","oneOf","Object","keys","Icon","root","handleRef","ref","nativeProps","setNativeProps","props","name","size","color","style","children","glyph","String","fromCharCode","styleDefaults","fontSize","styleOverrides","fontWeight","propTypes","allowFontScaling","bool","number","oneOfType","string","node","any","defaultProps","imageSourceCache","getImageSource","processedColor","processColor","cacheKey","scale","PixelRatio","get","Promise","resolve","reject","cached","Error","uri","getImageForFont","err","image","error","loadFont","file","OS","loadFontWithFileName","split","hasIcon","prototype","hasOwnProperty","call","getRawGlyphMap","getFontFamily","Button","TabBarItem","TabBarItemIOS","ToolbarAndroid"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/lib/create-icon-set.js"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { NativeModules, Platform, PixelRatio, processColor, Text } from 'react-native';\n\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\nimport createIconButtonComponent from './icon-button';\nimport createTabBarItemIOSComponent from './tab-bar-item-ios';\nimport createToolbarAndroidComponent from './toolbar-android';\n\nexport const NativeIconAPI =\n  NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\n\nexport const DEFAULT_ICON_SIZE = 12;\nexport const DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(\n  glyphMap,\n  fontFamily,\n  fontFile,\n  fontStyle\n) {\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  const fontBasename = fontFile\n    ? fontFile.replace(/\\.(otf|ttf)$/, '')\n    : fontFamily;\n\n  const fontReference = Platform.select({\n    windows: `Assets/${fontFile}#${fontFamily}`,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily,\n  });\n\n  const IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  class Icon extends PureComponent {\n    static propTypes = {\n      allowFontScaling: PropTypes.bool,\n      name: IconNamePropType,\n      size: PropTypes.number,\n      color: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      children: PropTypes.node,\n      style: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n    };\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    root = null;\n\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n\n    handleRef = ref => {\n      this.root = ref;\n    };\n\n    render() {\n      const { name, size, color, style, children, ...props } = this.props;\n\n      let glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCharCode(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n      props.ref = this.handleRef;\n\n      return (\n        <Text {...props}>\n          {glyph}\n          {children}\n        </Text>\n      );\n    }\n  }\n\n  const imageSourceCache = {};\n\n  function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    let glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      glyph = String.fromCharCode(glyph);\n    }\n\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n    const scale = PixelRatio.get();\n\n    return new Promise((resolve, reject) => {\n      const cached = imageSourceCache[cacheKey];\n      if (typeof cached !== 'undefined') {\n        if (!cached || cached instanceof Error) {\n          reject(cached);\n        } else {\n          resolve({ uri: cached, scale });\n        }\n      } else {\n        NativeIconAPI.getImageForFont(\n          fontReference,\n          glyph,\n          size,\n          processedColor,\n          (err, image) => {\n            const error = typeof err === 'string' ? new Error(err) : err;\n            imageSourceCache[cacheKey] = image || error || false;\n            if (!error && image) {\n              resolve({ uri: image, scale });\n            } else {\n              reject(error);\n            }\n          }\n        );\n      }\n    });\n  }\n\n  function loadFont(file = fontFile) {\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        return Promise.reject(\n          new Error('Unable to load font, because no file was specified. ')\n        );\n      }\n      return NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n    return Promise.resolve();\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.TabBarItem = createTabBarItemIOSComponent(\n    IconNamePropType,\n    getImageSource\n  );\n  Icon.TabBarItemIOS = Icon.TabBarItem;\n  Icon.ToolbarAndroid = createToolbarAndroidComponent(\n    IconNamePropType,\n    getImageSource\n  );\n  Icon.getImageSource = getImageSource;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n\n  return Icon;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}