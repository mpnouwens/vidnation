{"ast":null,"code":"var slice=Array.prototype.slice;export default function createOrderedCSSStyleSheet(sheet){var groups={};var selectors={};if(sheet!=null){var group;slice.call(sheet.cssRules).forEach(function(cssRule,i){var cssText=cssRule.cssText;if(cssText.indexOf('stylesheet-group')>-1){group=decodeGroupRule(cssRule);groups[group]={start:i,rules:[cssText]};}else{var selectorText=getSelectorText(cssText);if(selectorText!=null){selectors[selectorText]=true;groups[group].rules.push(cssText);}}});}function sheetInsert(sheet,group,text){var orderedGroups=getOrderedGroups(groups);var groupIndex=orderedGroups.indexOf(group);var nextGroupIndex=groupIndex+1;var nextGroup=orderedGroups[nextGroupIndex];var position=nextGroup!=null&&groups[nextGroup].start!=null?groups[nextGroup].start:sheet.cssRules.length;var isInserted=insertRuleAt(sheet,text,position);if(isInserted){if(groups[group].start==null){groups[group].start=position;}for(var i=nextGroupIndex;i<orderedGroups.length;i+=1){var groupNumber=orderedGroups[i];var previousStart=groups[groupNumber].start;groups[groupNumber].start=previousStart+1;}}return isInserted;}var OrderedCSSStyleSheet={getTextContent:function getTextContent(){return getOrderedGroups(groups).map(function(group){var rules=groups[group].rules;return rules.join('\\n');}).join('\\n');},insert:function insert(cssText,groupValue){var group=Number(groupValue);if(groups[group]==null){var markerRule=encodeGroupRule(group);groups[group]={start:null,rules:[markerRule]};if(sheet!=null){sheetInsert(sheet,group,markerRule);}}var selectorText=getSelectorText(cssText);if(selectorText!=null&&selectors[selectorText]==null){selectors[selectorText]=true;groups[group].rules.push(cssText);if(sheet!=null){var isInserted=sheetInsert(sheet,group,cssText);if(!isInserted){groups[group].rules.pop();}}}}};return OrderedCSSStyleSheet;}function encodeGroupRule(group){return\"[stylesheet-group=\\\"\"+group+\"\\\"]{}\";}function decodeGroupRule(cssRule){return Number(cssRule.selectorText.split(/[\"']/)[1]);}function getOrderedGroups(obj){return Object.keys(obj).map(Number).sort(function(a,b){return a>b?1:-1;});}var pattern=/\\s*([,])\\s*/g;function getSelectorText(cssText){var selector=cssText.split('{')[0].trim();return selector!==''?selector.replace(pattern,'$1'):null;}function insertRuleAt(root,cssText,position){try{root.insertRule(cssText,position);return true;}catch(e){return false;}}","map":{"version":3,"names":["slice","Array","prototype","createOrderedCSSStyleSheet","sheet","groups","selectors","group","call","cssRules","forEach","cssRule","i","cssText","indexOf","decodeGroupRule","start","rules","selectorText","getSelectorText","push","sheetInsert","text","orderedGroups","getOrderedGroups","groupIndex","nextGroupIndex","nextGroup","position","length","isInserted","insertRuleAt","groupNumber","previousStart","OrderedCSSStyleSheet","getTextContent","map","join","insert","groupValue","Number","markerRule","encodeGroupRule","pop","split","obj","Object","keys","sort","a","b","pattern","selector","trim","replace","root","insertRule","e"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/react-native-web/dist/exports/StyleSheet/createOrderedCSSStyleSheet.js"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar slice = Array.prototype.slice;\n/**\n * Order-based insertion of CSS.\n *\n * Each rule is associated with a numerically defined group.\n * Groups are ordered within the style sheet according to their number, with the\n * lowest first.\n *\n * Groups are implemented using marker rules. The selector of the first rule of\n * each group is used only to encode the group number for hydration. An\n * alternative implementation could rely on CSSMediaRule, allowing groups to be\n * treated as a sub-sheet, but the Edge implementation of CSSMediaRule is\n * broken.\n * https://developer.mozilla.org/en-US/docs/Web/API/CSSMediaRule\n * https://gist.github.com/necolas/aa0c37846ad6bd3b05b727b959e82674\n */\n\nexport default function createOrderedCSSStyleSheet(sheet) {\n  var groups = {};\n  var selectors = {};\n  /**\n   * Hydrate approximate record from any existing rules in the sheet.\n   */\n\n  if (sheet != null) {\n    var group;\n    slice.call(sheet.cssRules).forEach(function (cssRule, i) {\n      var cssText = cssRule.cssText; // Create record of existing selectors and rules\n\n      if (cssText.indexOf('stylesheet-group') > -1) {\n        group = decodeGroupRule(cssRule);\n        groups[group] = {\n          start: i,\n          rules: [cssText]\n        };\n      } else {\n        var selectorText = getSelectorText(cssText);\n\n        if (selectorText != null) {\n          selectors[selectorText] = true;\n          groups[group].rules.push(cssText);\n        }\n      }\n    });\n  }\n\n  function sheetInsert(sheet, group, text) {\n    var orderedGroups = getOrderedGroups(groups);\n    var groupIndex = orderedGroups.indexOf(group);\n    var nextGroupIndex = groupIndex + 1;\n    var nextGroup = orderedGroups[nextGroupIndex]; // Insert rule before the next group, or at the end of the stylesheet\n\n    var position = nextGroup != null && groups[nextGroup].start != null ? groups[nextGroup].start : sheet.cssRules.length;\n    var isInserted = insertRuleAt(sheet, text, position);\n\n    if (isInserted) {\n      // Set the starting index of the new group\n      if (groups[group].start == null) {\n        groups[group].start = position;\n      } // Increment the starting index of all subsequent groups\n\n\n      for (var i = nextGroupIndex; i < orderedGroups.length; i += 1) {\n        var groupNumber = orderedGroups[i];\n        var previousStart = groups[groupNumber].start;\n        groups[groupNumber].start = previousStart + 1;\n      }\n    }\n\n    return isInserted;\n  }\n\n  var OrderedCSSStyleSheet = {\n    /**\n     * The textContent of the style sheet.\n     */\n    getTextContent: function getTextContent() {\n      return getOrderedGroups(groups).map(function (group) {\n        var rules = groups[group].rules;\n        return rules.join('\\n');\n      }).join('\\n');\n    },\n\n    /**\n     * Insert a rule into the style sheet\n     */\n    insert: function insert(cssText, groupValue) {\n      var group = Number(groupValue); // Create a new group.\n\n      if (groups[group] == null) {\n        var markerRule = encodeGroupRule(group); // Create the internal record.\n\n        groups[group] = {\n          start: null,\n          rules: [markerRule]\n        }; // Update CSSOM.\n\n        if (sheet != null) {\n          sheetInsert(sheet, group, markerRule);\n        }\n      } // selectorText is more reliable than cssText for insertion checks. The\n      // browser excludes vendor-prefixed properties and rewrites certain values\n      // making cssText more likely to be different from what was inserted.\n\n\n      var selectorText = getSelectorText(cssText);\n\n      if (selectorText != null && selectors[selectorText] == null) {\n        // Update the internal records.\n        selectors[selectorText] = true;\n        groups[group].rules.push(cssText); // Update CSSOM.\n\n        if (sheet != null) {\n          var isInserted = sheetInsert(sheet, group, cssText);\n\n          if (!isInserted) {\n            // Revert internal record change if a rule was rejected (e.g.,\n            // unrecognized pseudo-selector)\n            groups[group].rules.pop();\n          }\n        }\n      }\n    }\n  };\n  return OrderedCSSStyleSheet;\n}\n/**\n * Helper functions\n */\n\nfunction encodeGroupRule(group) {\n  return \"[stylesheet-group=\\\"\" + group + \"\\\"]{}\";\n}\n\nfunction decodeGroupRule(cssRule) {\n  return Number(cssRule.selectorText.split(/[\"']/)[1]);\n}\n\nfunction getOrderedGroups(obj) {\n  return Object.keys(obj).map(Number).sort(function (a, b) {\n    return a > b ? 1 : -1;\n  });\n}\n\nvar pattern = /\\s*([,])\\s*/g;\n\nfunction getSelectorText(cssText) {\n  var selector = cssText.split('{')[0].trim();\n  return selector !== '' ? selector.replace(pattern, '$1') : null;\n}\n\nfunction insertRuleAt(root, cssText, position) {\n  try {\n    // $FlowFixMe: Flow is missing CSSOM types needed to type 'root'.\n    root.insertRule(cssText, position);\n    return true;\n  } catch (e) {\n    // JSDOM doesn't support `CSSSMediaRule#insertRule`.\n    // Also ignore errors that occur from attempting to insert vendor-prefixed selectors.\n    return false;\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}