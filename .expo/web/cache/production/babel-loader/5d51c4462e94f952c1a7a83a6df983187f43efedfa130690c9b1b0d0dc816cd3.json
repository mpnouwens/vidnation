{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{CodedError,UnavailabilityError}from'@unimodules/core';import ExpoFontLoader from\"./ExpoFontLoader\";import{FontDisplay}from\"./Font.types\";import{getAssetForSource,loadSingleFontAsync,fontFamilyNeedsScoping,getNativeFontName}from\"./FontLoader\";var loaded={};var loadPromises={};export function processFontFamily(fontFamily){if(!fontFamily||!fontFamilyNeedsScoping(fontFamily)){return fontFamily;}if(!isLoaded(fontFamily)){if(__DEV__){if(isLoading(fontFamily)){console.error(\"You started loading the font \\\"\"+fontFamily+\"\\\", but used it before it finished loading.\\n\\n- You need to wait for Font.loadAsync to complete before using the font.\\n\\n- We recommend loading all fonts before rendering the app, and rendering only Expo.AppLoading while waiting for loading to complete.\");}else{console.error(\"fontFamily \\\"\"+fontFamily+\"\\\" is not a system font and has not been loaded through Font.loadAsync.\\n\\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\\n- If this is a custom font, be sure to load it with Font.loadAsync.\");}}return'System';}return\"ExpoFont-\"+getNativeFontName(fontFamily);}export function isLoaded(fontFamily){return fontFamily in loaded;}export function isLoading(fontFamily){return fontFamily in loadPromises;}export function loadAsync(fontFamilyOrFontMap,source){var fontMap,names;return _regeneratorRuntime.async(function loadAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(typeof fontFamilyOrFontMap==='object')){_context.next=8;break;}if(!source){_context.next=3;break;}throw new CodedError(\"ERR_FONT_API\",\"No fontFamily can be used for the provided source: \"+source+\". The second argument of `loadAsync()` can only be used with a `string` value as the first argument.\");case 3:fontMap=fontFamilyOrFontMap;names=Object.keys(fontMap);_context.next=7;return _regeneratorRuntime.awrap(Promise.all(names.map(function(name){return loadFontInNamespaceAsync(name,fontMap[name]);})));case 7:return _context.abrupt(\"return\");case 8:_context.next=10;return _regeneratorRuntime.awrap(loadFontInNamespaceAsync(fontFamilyOrFontMap,source));case 10:return _context.abrupt(\"return\",_context.sent);case 11:case\"end\":return _context.stop();}}},null,null,null,Promise);}function loadFontInNamespaceAsync(fontFamily,source){var asset;return _regeneratorRuntime.async(function loadFontInNamespaceAsync$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(source){_context3.next=2;break;}throw new CodedError(\"ERR_FONT_SOURCE\",\"Cannot load null or undefined font source: { \\\"\"+fontFamily+\"\\\": \"+source+\" }. Expected asset of type `FontSource` for fontFamily of name: \\\"\"+fontFamily+\"\\\"\");case 2:if(!loaded[fontFamily]){_context3.next=4;break;}return _context3.abrupt(\"return\");case 4:if(!loadPromises[fontFamily]){_context3.next=6;break;}return _context3.abrupt(\"return\",loadPromises[fontFamily]);case 6:asset=getAssetForSource(source);loadPromises[fontFamily]=function _callee(){return _regeneratorRuntime.async(function _callee$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return _regeneratorRuntime.awrap(loadSingleFontAsync(fontFamily,asset));case 3:loaded[fontFamily]=true;case 4:_context2.prev=4;delete loadPromises[fontFamily];return _context2.finish(4);case 7:case\"end\":return _context2.stop();}}},null,null,[[0,,4,7]],Promise);}();_context3.next=10;return _regeneratorRuntime.awrap(loadPromises[fontFamily]);case 10:case\"end\":return _context3.stop();}}},null,null,null,Promise);}export function unloadAllAsync(){var _i,_Object$keys,fontFamily;return _regeneratorRuntime.async(function unloadAllAsync$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(ExpoFontLoader.unloadAllAsync){_context4.next=2;break;}throw new UnavailabilityError('expo-font','unloadAllAsync');case 2:if(!Object.keys(loadPromises).length){_context4.next=4;break;}throw new CodedError(\"ERR_UNLOAD\",\"Cannot unload fonts while they're still loading: \"+Object.keys(loadPromises).join(', '));case 4:for(_i=0,_Object$keys=Object.keys(loaded);_i<_Object$keys.length;_i++){fontFamily=_Object$keys[_i];delete loaded[fontFamily];}_context4.next=7;return _regeneratorRuntime.awrap(ExpoFontLoader.unloadAllAsync());case 7:case\"end\":return _context4.stop();}}},null,null,null,Promise);}export function unloadAsync(fontFamilyOrFontMap,options){var fontMap,names;return _regeneratorRuntime.async(function unloadAsync$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:if(ExpoFontLoader.unloadAsync){_context5.next=2;break;}throw new UnavailabilityError('expo-font','unloadAsync');case 2:if(!(typeof fontFamilyOrFontMap==='object')){_context5.next=10;break;}if(!options){_context5.next=5;break;}throw new CodedError(\"ERR_FONT_API\",\"No fontFamily can be used for the provided options: \"+options+\". The second argument of `unloadAsync()` can only be used with a `string` value as the first argument.\");case 5:fontMap=fontFamilyOrFontMap;names=Object.keys(fontMap);_context5.next=9;return _regeneratorRuntime.awrap(Promise.all(names.map(function(name){return unloadFontInNamespaceAsync(name,fontMap[name]);})));case 9:return _context5.abrupt(\"return\");case 10:_context5.next=12;return _regeneratorRuntime.awrap(unloadFontInNamespaceAsync(fontFamilyOrFontMap,options));case 12:return _context5.abrupt(\"return\",_context5.sent);case 13:case\"end\":return _context5.stop();}}},null,null,null,Promise);}function unloadFontInNamespaceAsync(fontFamily,options){var nativeFontName;return _regeneratorRuntime.async(function unloadFontInNamespaceAsync$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:if(loaded[fontFamily]){_context6.next=4;break;}return _context6.abrupt(\"return\");case 4:delete loaded[fontFamily];case 5:nativeFontName=getNativeFontName(fontFamily);if(nativeFontName){_context6.next=8;break;}throw new CodedError(\"ERR_FONT_FAMILY\",\"Cannot unload an empty name\");case 8:_context6.next=10;return _regeneratorRuntime.awrap(ExpoFontLoader.unloadAsync(nativeFontName,options));case 10:case\"end\":return _context6.stop();}}},null,null,null,Promise);}export{FontDisplay};","map":{"version":3,"mappings":"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","names":["CodedError","UnavailabilityError","ExpoFontLoader","FontDisplay","getAssetForSource","loadSingleFontAsync","fontFamilyNeedsScoping","getNativeFontName","loaded","loadPromises","processFontFamily","fontFamily","isLoaded","__DEV__","isLoading","console","error","loadAsync","fontFamilyOrFontMap","source","fontMap","names","Object","keys","Promise","all","map","loadFontInNamespaceAsync","name","asset","unloadAllAsync","length","join","unloadAsync","options","unloadFontInNamespaceAsync","nativeFontName"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/expo-font/src/Font.ts"],"sourcesContent":["import { CodedError, UnavailabilityError } from '@unimodules/core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay, FontSource, FontResource, UnloadFontOptions } from './Font.types';\nimport {\n  getAssetForSource,\n  loadSingleFontAsync,\n  fontFamilyNeedsScoping,\n  getNativeFontName,\n} from './FontLoader';\n\nconst loaded: { [name: string]: boolean } = {};\nconst loadPromises: { [name: string]: Promise<void> } = {};\n\n/**\n * Used to transform font family names to the scoped name. This does not need to\n * be called in standalone or bare apps but it will return unscoped font family\n * names if it is called in those contexts.\n * note(brentvatne): at some point we may want to warn if this is called\n * outside of a managed app.\n *\n * @param fontFamily name to process\n * @returns a name processed for use with the [current workflow](https://docs.expo.io/versions/latest/introduction/managed-vs-bare/)\n */\nexport function processFontFamily(fontFamily: string | null): string | null {\n  if (!fontFamily || !fontFamilyNeedsScoping(fontFamily)) {\n    return fontFamily;\n  }\n\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.error(\n          `You started loading the font \"${fontFamily}\", but used it before it finished loading.\\n\n- You need to wait for Font.loadAsync to complete before using the font.\\n\n- We recommend loading all fonts before rendering the app, and rendering only Expo.AppLoading while waiting for loading to complete.`\n        );\n      } else {\n        console.error(\n          `fontFamily \"${fontFamily}\" is not a system font and has not been loaded through Font.loadAsync.\\n\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\n- If this is a custom font, be sure to load it with Font.loadAsync.`\n        );\n      }\n    }\n\n    return 'System';\n  }\n\n  return `ExpoFont-${getNativeFontName(fontFamily)}`;\n}\n\n/**\n * Synchronously detect if the font for `fontFamily` has finished loading\n *\n * @param fontFamily the name used to load the `FontResource`.\n * @returns `true` if the the font has fully loaded.\n */\nexport function isLoaded(fontFamily: string): boolean {\n  return fontFamily in loaded;\n}\n\n/**\n * Synchronously detect if the font for `fontFamily` is still being loaded\n *\n * @param fontFamily the name used to load the `FontResource`.\n * @returns `true` if the the font is still loading.\n */\nexport function isLoading(fontFamily: string): boolean {\n  return fontFamily in loadPromises;\n}\n\n/**\n * Natively load a font for use with Text elements.\n * @param fontFamilyOrFontMap string or map of values that can be used as the [`fontFamily`](https://reactnative.dev/docs/text#style) style prop with React Native Text elements.\n * @param source the font asset that should be loaded into the `fontFamily` namespace.\n */\nexport async function loadAsync(\n  fontFamilyOrFontMap: string | { [fontFamily: string]: FontSource },\n  source?: FontSource\n): Promise<void> {\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (source) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map(name => loadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n}\n\nasync function loadFontInNamespaceAsync(\n  fontFamily: string,\n  source?: FontSource | null\n): Promise<void> {\n  if (!source) {\n    throw new CodedError(\n      `ERR_FONT_SOURCE`,\n      `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`\n    );\n  }\n\n  if (loaded[fontFamily]) {\n    return;\n  }\n\n  if (loadPromises[fontFamily]) {\n    return loadPromises[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const asset = getAssetForSource(source);\n  loadPromises[fontFamily] = (async () => {\n    try {\n      await loadSingleFontAsync(fontFamily, asset);\n      loaded[fontFamily] = true;\n    } finally {\n      delete loadPromises[fontFamily];\n    }\n  })();\n\n  await loadPromises[fontFamily];\n}\n\n/**\n * Unloads all of the custom fonts. This is used for testing.\n */\nexport async function unloadAllAsync(): Promise<void> {\n  if (!ExpoFontLoader.unloadAllAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAllAsync');\n  }\n\n  if (Object.keys(loadPromises).length) {\n    throw new CodedError(\n      `ERR_UNLOAD`,\n      `Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`\n    );\n  }\n\n  for (const fontFamily of Object.keys(loaded)) {\n    delete loaded[fontFamily];\n  }\n\n  await ExpoFontLoader.unloadAllAsync();\n}\n\n/**\n * Unload custom fonts matching the `fontFamily`s and display values provided.\n * Because fonts are automatically unloaded on every platform this is mostly used for testing.\n *\n * @param fontFamilyOrFontMap the names of the custom fonts that will be unloaded.\n * @param source when `fontFamilyOrFontMap` is a string, this should be the font source used to load the custom font originally.\n */\nexport async function unloadAsync(\n  fontFamilyOrFontMap: string | { [fontFamily: string]: UnloadFontOptions },\n  options?: UnloadFontOptions\n): Promise<void> {\n  if (!ExpoFontLoader.unloadAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAsync');\n  }\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (options) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map(name => unloadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n}\n\nasync function unloadFontInNamespaceAsync(\n  fontFamily: string,\n  options?: UnloadFontOptions | null\n): Promise<void> {\n  if (!loaded[fontFamily]) {\n    return;\n  } else {\n    delete loaded[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const nativeFontName = getNativeFontName(fontFamily);\n\n  if (!nativeFontName) {\n    throw new CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n  }\n\n  await ExpoFontLoader.unloadAsync(nativeFontName, options);\n}\n\nexport { FontDisplay, FontSource, FontResource, UnloadFontOptions };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}