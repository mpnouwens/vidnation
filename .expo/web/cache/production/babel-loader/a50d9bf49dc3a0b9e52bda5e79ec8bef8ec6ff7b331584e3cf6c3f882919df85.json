{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";import*as React from'react';import{getStateFromPath as getStateFromPathDefault,getPathFromState as getPathFromStateDefault,getActionFromState}from'@react-navigation/core';import{nanoid}from'nanoid/non-secure';import ServerContext from\"./ServerContext\";var createMemoryHistory=function createMemoryHistory(){var index=0;var items=[];var pending=[];var interrupt=function interrupt(){pending.forEach(function(it){var cb=it.cb;it.cb=function(){return cb(true);};});};var history={get index(){var _window$history$state;var id=(_window$history$state=window.history.state)===null||_window$history$state===void 0?void 0:_window$history$state.id;if(id){var _index=items.findIndex(function(item){return item.id===id;});return _index>-1?_index:0;}return 0;},get:function get(index){return items[index];},backIndex:function backIndex(_ref){var path=_ref.path;for(var i=index-1;i>=0;i--){var item=items[i];if(item.path===path){return i;}}return-1;},push:function push(_ref2){var path=_ref2.path,state=_ref2.state;interrupt();var id=nanoid();items=items.slice(0,index+1);items.push({path:path,state:state,id:id});index=items.length-1;window.history.pushState({id:id},'',path);},replace:function replace(_ref3){var path=_ref3.path,state=_ref3.state;var _window$history$state2,_window$history$state3;interrupt();var id=(_window$history$state2=(_window$history$state3=window.history.state)===null||_window$history$state3===void 0?void 0:_window$history$state3.id)!==null&&_window$history$state2!==void 0?_window$history$state2:nanoid();if(items.length){items[index]={path:path,state:state,id:id};}else{items.push({path:path,state:state,id:id});}window.history.replaceState({id:id},'',path);},go:function go(n){interrupt();if(n>0){n=Math.min(n,items.length-1);}else if(n<0){n=index+n<0?-index:n;}if(n===0){return;}index+=n;return new Promise(function(resolve,reject){var done=function done(interrupted){clearTimeout(timer);if(interrupted){reject(new Error('History was changed during navigation.'));return;}var title=window.document.title;window.document.title='';window.document.title=title;resolve();};pending.push({ref:done,cb:done});var timer=setTimeout(function(){var index=pending.findIndex(function(it){return it.ref===done;});if(index>-1){pending[index].cb();pending.splice(index,1);}},100);var onPopState=function onPopState(){var last=pending.pop();window.removeEventListener('popstate',onPopState);last===null||last===void 0?void 0:last.cb();};window.addEventListener('popstate',onPopState);window.history.go(n);});},listen:function listen(listener){var onPopState=function onPopState(){if(pending.length){return;}listener();};window.addEventListener('popstate',onPopState);return function(){return window.removeEventListener('popstate',onPopState);};}};return history;};var findMatchingState=function findMatchingState(a,b){if(a===undefined||b===undefined||a.key!==b.key){return[undefined,undefined];}var aHistoryLength=a.history?a.history.length:a.routes.length;var bHistoryLength=b.history?b.history.length:b.routes.length;var aRoute=a.routes[a.index];var bRoute=b.routes[b.index];var aChildState=aRoute.state;var bChildState=bRoute.state;if(aHistoryLength!==bHistoryLength||aRoute.key!==bRoute.key||aChildState===undefined||bChildState===undefined||aChildState.key!==bChildState.key){return[a,b];}return findMatchingState(aChildState,bChildState);};var series=function series(cb){var handling=false;var queue=[];var callback=function callback(){var last;return _regeneratorRuntime.async(function callback$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;if(!handling){_context.next=4;break;}queue.unshift(callback);return _context.abrupt(\"return\");case 4:handling=true;_context.next=7;return _regeneratorRuntime.awrap(cb());case 7:_context.prev=7;handling=false;if(queue.length){last=queue.pop();last===null||last===void 0?void 0:last();}return _context.finish(7);case 11:case\"end\":return _context.stop();}}},null,null,[[0,,7,11]],Promise);};return callback;};var isUsingLinking=false;export default function useLinking(ref,_ref4){var _ref4$enabled=_ref4.enabled,enabled=_ref4$enabled===void 0?true:_ref4$enabled,config=_ref4.config,_ref4$getStateFromPat=_ref4.getStateFromPath,getStateFromPath=_ref4$getStateFromPat===void 0?getStateFromPathDefault:_ref4$getStateFromPat,_ref4$getPathFromStat=_ref4.getPathFromState,getPathFromState=_ref4$getPathFromStat===void 0?getPathFromStateDefault:_ref4$getPathFromStat;React.useEffect(function(){if(enabled!==false&&isUsingLinking){throw new Error(['Looks like you have configured linking in multiple places. This is likely an error since URL integration should only be handled in one place to avoid conflicts. Make sure that:',\"- You are not using both 'linking' prop and 'useLinking'\",\"- You don't have 'useLinking' in multiple components\"].join('\\n').trim());}else{isUsingLinking=enabled!==false;}return function(){isUsingLinking=false;};});var _React$useState=React.useState(createMemoryHistory),_React$useState2=_slicedToArray(_React$useState,1),history=_React$useState2[0];var enabledRef=React.useRef(enabled);var configRef=React.useRef(config);var getStateFromPathRef=React.useRef(getStateFromPath);var getPathFromStateRef=React.useRef(getPathFromState);React.useEffect(function(){enabledRef.current=enabled;configRef.current=config;getStateFromPathRef.current=getStateFromPath;getPathFromStateRef.current=getPathFromState;},[config,enabled,getPathFromState,getStateFromPath]);var server=React.useContext(ServerContext);var getInitialState=React.useCallback(function(){var value;if(enabledRef.current){var _server$location;var _location=(_server$location=server===null||server===void 0?void 0:server.location)!==null&&_server$location!==void 0?_server$location:typeof window!=='undefined'?window.location:undefined;var path=_location?_location.pathname+_location.search:undefined;if(path){value=getStateFromPathRef.current(path,configRef.current);}}var thenable={then:function then(onfulfilled){return Promise.resolve(onfulfilled?onfulfilled(value):value);},catch:function _catch(){return thenable;}};return thenable;},[]);var previousIndexRef=React.useRef(undefined);var previousStateRef=React.useRef(undefined);var pendingPopStatePathRef=React.useRef(undefined);React.useEffect(function(){previousIndexRef.current=history.index;return history.listen(function(){var _previousIndexRef$cur;var navigation=ref.current;if(!navigation||!enabled){return;}var path=location.pathname+location.search;var index=history.index;var previousIndex=(_previousIndexRef$cur=previousIndexRef.current)!==null&&_previousIndexRef$cur!==void 0?_previousIndexRef$cur:0;previousIndexRef.current=index;pendingPopStatePathRef.current=path;var record=history.get(index);if((record===null||record===void 0?void 0:record.path)===path&&(record===null||record===void 0?void 0:record.state)){navigation.resetRoot(record.state);return;}var state=getStateFromPathRef.current(path,configRef.current);if(state&&index>previousIndex){var action=getActionFromState(state);if(action!==undefined){navigation.dispatch(action);}else{navigation.resetRoot(state);}}else{navigation.resetRoot(state);}});},[enabled,history,ref]);React.useEffect(function(){var _ref$current;if(!enabled){return;}if(ref.current){var state=ref.current.getRootState();var path=getPathFromStateRef.current(state,configRef.current);if(previousStateRef.current===undefined){previousStateRef.current=state;}history.replace({path:path,state:state});}var onStateChange=function onStateChange(){var navigation,previousState,state,pendingPath,path,_findMatchingState,_findMatchingState2,previousFocusedState,focusedState,historyDelta,nextIndex,currentIndex;return _regeneratorRuntime.async(function onStateChange$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:navigation=ref.current;if(!(!navigation||!enabled)){_context2.next=3;break;}return _context2.abrupt(\"return\");case 3:previousState=previousStateRef.current;state=navigation.getRootState();pendingPath=pendingPopStatePathRef.current;path=getPathFromStateRef.current(state,configRef.current);previousStateRef.current=state;pendingPopStatePathRef.current=undefined;_findMatchingState=findMatchingState(previousState,state),_findMatchingState2=_slicedToArray(_findMatchingState,2),previousFocusedState=_findMatchingState2[0],focusedState=_findMatchingState2[1];if(!(previousFocusedState&&focusedState&&path!==pendingPath)){_context2.next=37;break;}historyDelta=(focusedState.history?focusedState.history.length:focusedState.routes.length)-(previousFocusedState.history?previousFocusedState.history.length:previousFocusedState.routes.length);if(!(historyDelta>0)){_context2.next=16;break;}history.push({path:path,state:state});_context2.next=35;break;case 16:if(!(historyDelta<0)){_context2.next=34;break;}nextIndex=history.backIndex({path:path});currentIndex=history.index;_context2.prev=19;if(!(nextIndex!==-1&&nextIndex<currentIndex)){_context2.next=25;break;}_context2.next=23;return _regeneratorRuntime.awrap(history.go(nextIndex-currentIndex));case 23:_context2.next=27;break;case 25:_context2.next=27;return _regeneratorRuntime.awrap(history.go(historyDelta));case 27:history.replace({path:path,state:state});_context2.next=32;break;case 30:_context2.prev=30;_context2.t0=_context2[\"catch\"](19);case 32:_context2.next=35;break;case 34:history.replace({path:path,state:state});case 35:_context2.next=38;break;case 37:history.replace({path:path,state:state});case 38:case\"end\":return _context2.stop();}}},null,null,[[19,30]],Promise);};return(_ref$current=ref.current)===null||_ref$current===void 0?void 0:_ref$current.addListener('state',series(onStateChange));});return{getInitialState:getInitialState};}","map":{"version":3,"mappings":"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","names":["React","getStateFromPath","getStateFromPathDefault","getPathFromState","getPathFromStateDefault","getActionFromState","nanoid","ServerContext","createMemoryHistory","index","items","pending","interrupt","forEach","it","cb","history","id","window","state","_window$history$state","findIndex","item","get","backIndex","path","i","push","slice","length","pushState","replace","_window$history$state3","replaceState","go","n","Math","min","Promise","resolve","reject","done","interrupted","clearTimeout","timer","Error","title","document","ref","setTimeout","splice","onPopState","last","pop","removeEventListener","addEventListener","listen","listener","findMatchingState","a","b","undefined","key","aHistoryLength","routes","bHistoryLength","aRoute","bRoute","aChildState","bChildState","series","handling","queue","callback","unshift","isUsingLinking","useLinking","enabled","config","useEffect","join","trim","useState","enabledRef","useRef","configRef","getStateFromPathRef","getPathFromStateRef","current","server","useContext","getInitialState","useCallback","value","location","pathname","search","thenable","then","onfulfilled","catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","navigation","previousIndex","record","resetRoot","action","dispatch","getRootState","onStateChange","previousState","pendingPath","previousFocusedState","focusedState","historyDelta","nextIndex","currentIndex","_ref$current","addListener"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/@react-navigation/native/lib/module/useLinking.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  getStateFromPath as getStateFromPathDefault,\n  getPathFromState as getPathFromStateDefault,\n  NavigationContainerRef,\n  NavigationState,\n  getActionFromState,\n} from '@react-navigation/core';\nimport { nanoid } from 'nanoid/non-secure';\nimport ServerContext from './ServerContext';\nimport type { LinkingOptions } from './types';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\ntype HistoryRecord = {\n  // Unique identifier for this record to match it with window.history.state\n  id: string;\n  // Navigation state object for the history entry\n  state: NavigationState;\n  // Path of the history entry\n  path: string;\n};\n\nconst createMemoryHistory = () => {\n  let index = 0;\n  let items: HistoryRecord[] = [];\n\n  // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n  const pending: { ref: unknown; cb: (interrupted?: boolean) => void }[] = [];\n\n  const interrupt = () => {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach((it) => {\n      const cb = it.cb;\n      it.cb = () => cb(true);\n    });\n  };\n\n  const history = {\n    get index(): number {\n      // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n      const id = window.history.state?.id;\n\n      if (id) {\n        const index = items.findIndex((item) => item.id === id);\n\n        return index > -1 ? index : 0;\n      }\n\n      return 0;\n    },\n\n    get(index: number) {\n      return items[index];\n    },\n\n    backIndex({ path }: { path: string }) {\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    push({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = nanoid();\n\n      // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n      items = items.slice(0, index + 1);\n\n      items.push({ path, state, id });\n      index = items.length - 1;\n\n      // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n      window.history.pushState({ id }, '', path);\n    },\n\n    replace({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = window.history.state?.id ?? nanoid();\n\n      if (items.length) {\n        items[index] = { path, state, id };\n      } else {\n        // This is the first time any state modifications are done\n        // So we need to push the entry as there's nothing to replace\n        items.push({ path, state, id });\n      }\n\n      window.history.replaceState({ id }, '', path);\n    },\n\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n: number) {\n      interrupt();\n\n      if (n > 0) {\n        // We shouldn't go forward more than available index\n        n = Math.min(n, items.length - 1);\n      } else if (n < 0) {\n        // We shouldn't go back more than the 0 index\n        // Otherwise we'll exit the page\n        n = index + n < 0 ? -index : n;\n      }\n\n      if (n === 0) {\n        return;\n      }\n\n      index += n;\n\n      // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n      return new Promise((resolve, reject) => {\n        const done = (interrupted?: boolean) => {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n\n          // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n          const { title } = window.document;\n\n          window.document.title = '';\n          window.document.title = title;\n\n          resolve();\n        };\n\n        pending.push({ ref: done, cb: done });\n\n        // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n        const timer = setTimeout(() => {\n          const index = pending.findIndex((it) => it.ref === done);\n\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n\n        const onPopState = () => {\n          const last = pending.pop();\n\n          window.removeEventListener('popstate', onPopState);\n          last?.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener: () => void) {\n      const onPopState = () => {\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n\n      return () => window.removeEventListener('popstate', onPopState);\n    },\n  };\n\n  return history;\n};\n\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\nconst findMatchingState = <T extends NavigationState>(\n  a: T | undefined,\n  b: T | undefined\n): [T | undefined, T | undefined] => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n\n  const aChildState = aRoute.state as T | undefined;\n  const bChildState = bRoute.state as T | undefined;\n\n  // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n  if (\n    aHistoryLength !== bHistoryLength ||\n    aRoute.key !== bRoute.key ||\n    aChildState === undefined ||\n    bChildState === undefined ||\n    aChildState.key !== bChildState.key\n  ) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\n/**\n * Run async function in series as it's called.\n */\nconst series = (cb: () => Promise<void>) => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue: (() => Promise<void>)[] = [];\n\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n\n      handling = true;\n\n      await cb();\n    } finally {\n      handling = false;\n\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n\n        last?.();\n      }\n    }\n  };\n\n  return callback;\n};\n\nlet isUsingLinking = false;\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef>,\n  {\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n  }: LinkingOptions\n) {\n  React.useEffect(() => {\n    if (enabled !== false && isUsingLinking) {\n      throw new Error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since URL integration should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You are not using both 'linking' prop and 'useLinking'\",\n          \"- You don't have 'useLinking' in multiple components\",\n        ]\n          .join('\\n')\n          .trim()\n      );\n    } else {\n      isUsingLinking = enabled !== false;\n    }\n\n    return () => {\n      isUsingLinking = false;\n    };\n  });\n\n  const [history] = React.useState(createMemoryHistory);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n  }, [config, enabled, getPathFromState, getStateFromPath]);\n\n  const server = React.useContext(ServerContext);\n\n  const getInitialState = React.useCallback(() => {\n    let value: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const location =\n        server?.location ??\n        (typeof window !== 'undefined' ? window.location : undefined);\n\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    // Make it a thenable to keep consistent with the native impl\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const previousIndexRef = React.useRef<number | undefined>(undefined);\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\n\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n\n    return history.listen(() => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const path = location.pathname + location.search;\n      const index = history.index;\n\n      const previousIndex = previousIndexRef.current ?? 0;\n\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n      const record = history.get(index);\n\n      if (record?.path === path && record?.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n      if (state && index > previousIndex) {\n        const action = getActionFromState(state);\n\n        if (action !== undefined) {\n          navigation.dispatch(action);\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n      const path = getPathFromStateRef.current(state, configRef.current);\n\n      if (previousStateRef.current === undefined) {\n        previousStateRef.current = state;\n      }\n\n      history.replace({ path, state });\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n\n      const pendingPath = pendingPopStatePathRef.current;\n      const path = getPathFromStateRef.current(state, configRef.current);\n\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n\n      // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n      const [previousFocusedState, focusedState] = findMatchingState(\n        previousState,\n        state\n      );\n\n      if (\n        previousFocusedState &&\n        focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath\n      ) {\n        const historyDelta =\n          (focusedState.history\n            ? focusedState.history.length\n            : focusedState.routes.length) -\n          (previousFocusedState.history\n            ? previousFocusedState.history.length\n            : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({ path, state });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n\n          const nextIndex = history.backIndex({ path });\n          const currentIndex = history.index;\n\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            }\n\n            // Store the updated state as well as fix the path if incorrect\n            history.replace({ path, state });\n          } catch (e) {\n            // The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({ path, state });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({ path, state });\n      }\n    };\n\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n    return ref.current?.addListener('state', series(onStateChange));\n  });\n\n  return {\n    getInitialState,\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}