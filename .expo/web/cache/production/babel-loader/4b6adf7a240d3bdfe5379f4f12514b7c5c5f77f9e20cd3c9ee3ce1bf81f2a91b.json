{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/extends\";import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}import*as Font from\"expo-font\";import React from\"react\";import Text from\"react-native-web/dist/exports/Text\";import createIconSet from\"./vendor/react-native-vector-icons/lib/create-icon-set\";import createIconButtonComponent from\"./vendor/react-native-vector-icons/lib/icon-button\";export{DEFAULT_ICON_COLOR,DEFAULT_ICON_SIZE}from\"./vendor/react-native-vector-icons/lib/create-icon-set\";export default function(glyphMap,fontName,expoAssetId,fontStyle){var _a;var font=_defineProperty({},fontName,expoAssetId);var RNVIconComponent=createIconSet(glyphMap,fontName,null,fontStyle);return _a=function(_React$Component){_inherits(Icon,_React$Component);var _super=_createSuper(Icon);function Icon(){var _this;_classCallCheck(this,Icon);_this=_super.apply(this,arguments);_this._mounted=false;_this.state={fontIsLoaded:Font.isLoaded(fontName)};return _this;}_createClass(Icon,[{key:\"componentDidMount\",value:function componentDidMount(){return _regeneratorRuntime.async(function componentDidMount$(_context){while(1){switch(_context.prev=_context.next){case 0:this._mounted=true;if(this.state.fontIsLoaded){_context.next=5;break;}_context.next=4;return _regeneratorRuntime.awrap(Font.loadAsync(font));case 4:this._mounted&&this.setState({fontIsLoaded:true});case 5:case\"end\":return _context.stop();}}},null,this,null,Promise);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){this._mounted=false;}},{key:\"setNativeProps\",value:function setNativeProps(props){if(this._icon){this._icon.setNativeProps(props);}}},{key:\"render\",value:function render(){var _this2=this;if(!this.state.fontIsLoaded){return React.createElement(Text,null);}return React.createElement(RNVIconComponent,_extends({ref:function ref(view){_this2._icon=view;}},this.props));}}]);return Icon;}(React.Component),_a.propTypes=RNVIconComponent.propTypes,_a.defaultProps=RNVIconComponent.defaultProps,_a.Button=createIconButtonComponent(_a),_a.glyphMap=glyphMap,_a.getRawGlyphMap=function(){return glyphMap;},_a.getFontFamily=function(){return fontName;},_a.loadFont=function(){return Font.loadAsync(font);},_a.font=font,_a;}","map":{"version":3,"mappings":"yrCAAA,MAAO,GAAKA,KAAI,KAAM,WAAW,CACjC,MAAOC,MAAyB,KAAM,OAAO,CAAC,qDAG9C,MAAOC,cAAa,8DACpB,MAAOC,0BAAyB,0DAEhC,OACEC,kBAAkB,CAClBC,iBAAiB,8DA+DnB,cAAc,UACZC,QAAqB,CACrBC,QAAY,CACZC,WAAW,CACXC,SAAe,SAEf,GAAMC,KAAI,oBAAMH,QAAQ,CAAGC,WAAW,CAAE,CACxC,GAAMG,iBAAgB,CAAGT,aAAa,CAACI,QAAQ,CAAEC,QAAQ,CAAE,IAAI,CAAEE,SAAS,CAAC,CAE3E,oGAAO,wFAUL,cAAQ,CAAG,KAAK,CAGhB,WAAK,CAAG,CACNG,YAAY,CAAEZ,IAAI,CAACa,QAAQ,CAACN,QAAQ,EACrC,CAAC,aAkCJ,CAAC,0MA/BG,IAAI,CAACO,QAAQ,CAAG,IAAI,CAAC,GAChB,IAAI,CAACC,KAAK,CAACH,YAAY,0EACpBZ,IAAI,CAACgB,SAAS,CAACN,IAAI,CAAC,SAC1B,IAAI,CAACI,QAAQ,EAAI,IAAI,CAACG,QAAQ,CAAC,CAAEL,YAAY,CAAE,IAAI,CAAE,CAAC,CAAC,wIAIvC,CAClB,IAAI,CAACE,QAAQ,CAAG,KAAK,CACvB,CAAC,sDAEcI,KAAK,EAClB,GAAI,IAAI,CAACC,KAAK,CAAE,CACd,IAAI,CAACA,KAAK,CAACC,cAAc,CAACF,KAAK,CAAC,EAEpC,CAAC,uCAEK,iBACJ,GAAI,CAAC,IAAI,CAACH,KAAK,CAACH,YAAY,CAAE,CAC5B,MAAO,qBAAC,IAAI,MAAG,EAGjB,MACE,qBAAC,gBAAgB,WACf,GAAG,CAAE,iBAAI,CAAG,CACV,MAAI,CAACO,KAAK,CAAGE,IAAI,CACnB,CAAE,EACE,IAAI,CAACH,KAAK,EACd,CAEN,CAAC,kBAhDuBjB,KAAK,CAACqB,SAAuB,CAiDtD,CAhDQC,YAAS,CAAGZ,gBAAgB,CAACa,SAAU,CACvCD,eAAY,CAAGZ,gBAAgB,CAACc,YAAa,CAC7CF,SAAM,CAAGpB,yBAAyB,CAACoB,EAAI,CAAE,CACzCA,WAAQ,CAAGjB,QAAS,CACpBiB,iBAAc,CAAG,iBAAMjB,SAAS,GAChCiB,gBAAa,CAAG,iBAAMhB,SAAS,GAC/BgB,WAAQ,CAAG,iBAAMvB,KAAI,CAACgB,SAAS,CAACN,IAAI,CAAE,GACtCa,OAAI,CAAGb,IAAK,IA0CvB","names":["Font","React","createIconSet","createIconButtonComponent","DEFAULT_ICON_COLOR","DEFAULT_ICON_SIZE","glyphMap","fontName","expoAssetId","fontStyle","font","RNVIconComponent","fontIsLoaded","isLoaded","_mounted","state","loadAsync","setState","props","_icon","setNativeProps","view","Component","_a","propTypes","defaultProps"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/@expo/vector-icons/src/createIconSet.tsx"],"sourcesContent":["import * as Font from \"expo-font\";\nimport React, { ComponentClass } from \"react\";\nimport { Text, TextProps, TouchableHighlightProps, ViewProps } from \"react-native\";\n\nimport createIconSet from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nimport createIconButtonComponent from \"./vendor/react-native-vector-icons/lib/icon-button\";\n\nexport {\n  DEFAULT_ICON_COLOR,\n  DEFAULT_ICON_SIZE\n} from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\n\nexport interface IconButtonProps<GLYPHS extends string> extends ViewProps, TouchableHighlightProps {\n  /**\n   * Size of the icon, can also be passed as fontSize in the style object.\n   *\n   * @default 12\n   */\n  size?: number;\n\n  /**\n   * Name of the icon to show\n   *\n   * See Icon Explorer app\n   * {@link https://expo.github.io/vector-icons/}\n   */\n  name: GLYPHS;\n\n  /**\n   * Color of the icon\n   *\n   */\n  color?: string;\n}\n\nexport interface IconProps<GLYPHS extends string> extends TextProps {\n  /**\n   * Size of the icon, can also be passed as fontSize in the style object.\n   *\n   * @default 12\n   */\n  size?: number;\n\n  /**\n   * Name of the icon to show\n   *\n   * See Icon Explorer app\n   * {@link https://expo.github.io/vector-icons/}\n   */\n  name: GLYPHS;\n\n  /**\n   * Color of the icon\n   *\n   */\n  color?: string;\n}\n\nexport type GlyphMap<G extends string> = { [K in G]: number }\n\nexport interface Icon<G extends string, FN extends string> {\n  propTypes: any;\n  defaultProps: any;\n  Button: ComponentClass<IconButtonProps<G>>;\n  glyphMap: GlyphMap<G>;\n  getRawGlyphMap: () => GlyphMap<G>;\n  getFontFamily: () => FN;\n  loadFont: () => Promise<void>;\n  font: { [x: string]: any };\n  new (props: IconProps<G>): React.Component<IconProps<G>>;\n}\n\nexport default function<G extends string, FN extends string>(\n  glyphMap: GlyphMap<G>,\n  fontName: FN,\n  expoAssetId,\n  fontStyle?: any\n): Icon<G, FN> {\n  const font = { [fontName]: expoAssetId };\n  const RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n\n  return class Icon extends React.Component<IconProps<G>> {\n    static propTypes = RNVIconComponent.propTypes;\n    static defaultProps = RNVIconComponent.defaultProps;\n    static Button = createIconButtonComponent(Icon);\n    static glyphMap = glyphMap;\n    static getRawGlyphMap = () => glyphMap;\n    static getFontFamily = () => fontName;\n    static loadFont = () => Font.loadAsync(font);\n    static font = font;\n\n    _mounted = false;\n    _icon?: any;\n\n    state = {\n      fontIsLoaded: Font.isLoaded(fontName)\n    };\n\n    async componentDidMount() {\n      this._mounted = true;\n      if (!this.state.fontIsLoaded) {\n        await Font.loadAsync(font);\n        this._mounted && this.setState({ fontIsLoaded: true });\n      }\n    }\n\n    componentWillUnmount() {\n      this._mounted = false;\n    }\n\n    setNativeProps(props) {\n      if (this._icon) {\n        this._icon.setNativeProps(props);\n      }\n    }\n\n    render() {\n      if (!this.state.fontIsLoaded) {\n        return <Text />;\n      }\n\n      return (\n        <RNVIconComponent\n          ref={view => {\n            this._icon = view;\n          }}\n          {...this.props}\n        />\n      );\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}