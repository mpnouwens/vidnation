{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import{useNavigationBuilder,createNavigatorFactory,StackRouter,StackActions}from'@react-navigation/native';import StackView from\"../views/Stack/StackView\";function StackNavigator(_ref){var initialRouteName=_ref.initialRouteName,children=_ref.children,screenOptions=_ref.screenOptions,rest=_objectWithoutProperties(_ref,[\"initialRouteName\",\"children\",\"screenOptions\"]);var defaultOptions={gestureEnabled:Platform.OS==='ios',animationEnabled:Platform.OS!=='web'&&Platform.OS!=='windows'&&Platform.OS!=='macos'};var _useNavigationBuilder=useNavigationBuilder(StackRouter,{initialRouteName:initialRouteName,children:children,screenOptions:typeof screenOptions==='function'?function(){return _objectSpread(_objectSpread({},defaultOptions),screenOptions.apply(void 0,arguments));}:_objectSpread(_objectSpread({},defaultOptions),screenOptions)}),state=_useNavigationBuilder.state,descriptors=_useNavigationBuilder.descriptors,navigation=_useNavigationBuilder.navigation;React.useEffect(function(){var _navigation$addListen;return(_navigation$addListen=navigation.addListener)===null||_navigation$addListen===void 0?void 0:_navigation$addListen.call(navigation,'tabPress',function(e){var isFocused=navigation.isFocused();requestAnimationFrame(function(){if(state.index>0&&isFocused&&!e.defaultPrevented){navigation.dispatch(_objectSpread(_objectSpread({},StackActions.popToTop()),{},{target:state.key}));}});});},[navigation,state.index,state.key]);return React.createElement(StackView,_extends({},rest,{state:state,descriptors:descriptors,navigation:navigation}));}export default createNavigatorFactory(StackNavigator);","map":{"version":3,"sources":["createStackNavigator.tsx"],"names":["rest","defaultOptions","gestureEnabled","Platform","animationEnabled","navigation","useNavigationBuilder","initialRouteName","children","screenOptions","React","e","isFocused","requestAnimationFrame","state","StackActions","target","key","createNavigatorFactory"],"mappings":"2sCAAA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,C,6DAEA,OAAA,oBAAA,CAAA,sBAAA,CAAA,WAAA,CAAA,YAAA,KAAA,0BAAA,CAUA,MAAA,CAAA,SAAA,gCAWA,QAAA,CAAA,cAAA,MAKU,IALc,CAAA,gBAKd,MALc,gBAKd,CALc,QAKd,MALc,QAKd,CALc,aAKd,MALc,aAKd,CADLA,IACK,gFACR,GAAMC,CAAAA,cAAc,CAAG,CACrBC,cAAc,CAAEC,QAAQ,CAARA,EAAAA,GADK,KAAA,CAErBC,gBAAgB,CACdD,QAAQ,CAARA,EAAAA,GAAAA,KAAAA,EACAA,QAAQ,CAARA,EAAAA,GADAA,SAAAA,EAEAA,QAAQ,CAARA,EAAAA,GAAgB,OALG,CAAvB,CADQ,0BASmCG,oBAAoB,CAAA,WAAA,CAKhD,CACbC,gBADa,CACbA,gBADa,CAEbC,QAFa,CAEbA,QAFa,CAGbC,aAAa,CACX,MAAA,CAAA,aAAA,GAAA,UAAA,CACI,iDAAc,cAAd,EAEKA,aAAa,MAAbA,kBAFL,GADJ,gCAKI,cALJ,EAOSA,aAPT,CAJW,CALgD,CATvD,CASF,KATE,uBASF,KATE,CASF,WATE,uBASF,WATE,CASoBJ,UATpB,uBASoBA,UATpB,CA6BRK,KAAK,CAALA,SAAAA,CACE,UAAA,CAAA,GAAA,CAAA,qBAAA,CAAA,MAAA,CAAA,qBAAA,CACEL,UAAU,CADZ,WAAA,IAAA,IAAA,EAAA,qBAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CACEA,qBAAAA,CAAAA,IAAAA,CAAAA,UAAAA,CAAU,UAAVA,CAAsCM,SAAAA,CAAD,CAAO,CAC1C,GAAMC,CAAAA,SAAS,CAAGP,UAAU,CADc,SACxBA,EAAlB,CAIAQ,qBAAqB,CAAC,UAAM,CAC1B,GACEC,KAAK,CAALA,KAAAA,CAAAA,CAAAA,EAAAA,SAAAA,EAEA,CAAEH,CAAD,CAHH,gBAAA,CAIE,CAGAN,UAAU,CAAVA,QAAAA,gCACKU,YAAY,CADG,QACfA,EADLV,MAEEW,MAAM,CAAEF,KAAK,CAACG,GAFhBZ,IAID,CAZHQ,CAAqB,CAArBA,CANJ,CACER,CADF,CADFK,CAAAA,CAsBE,CAAA,UAAA,CAAaI,KAAK,CAAlB,KAAA,CAA0BA,KAAK,CAtBjCJ,GAsBE,CAtBFA,EAyBA,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,SAAA,CAAA,QAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAEE,KAAK,CAFP,KAAA,CAGE,WAAW,CAHb,WAAA,CAIE,UAAU,CAAEL,UAJd,CAAA,CAAA,CADF,CAQD,CAED,cAAea,CAAAA,sBAAsB,CAArC,cAAqC,CAArC","sourcesContent":["import * as React from 'react';\nimport { Platform } from 'react-native';\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  EventArg,\n  StackRouter,\n  StackRouterOptions,\n  StackNavigationState,\n  StackActions,\n} from '@react-navigation/native';\nimport StackView from '../views/Stack/StackView';\nimport type {\n  StackNavigationConfig,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n} from '../types';\n\ntype Props = DefaultNavigatorOptions<StackNavigationOptions> &\n  StackRouterOptions &\n  StackNavigationConfig;\n\nfunction StackNavigator({\n  initialRouteName,\n  children,\n  screenOptions,\n  ...rest\n}: Props) {\n  const defaultOptions = {\n    gestureEnabled: Platform.OS === 'ios',\n    animationEnabled:\n      Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n  };\n\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState,\n    StackRouterOptions,\n    StackNavigationOptions,\n    StackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions:\n      typeof screenOptions === 'function'\n        ? (...args) => ({\n            ...defaultOptions,\n            ...screenOptions(...args),\n          })\n        : {\n            ...defaultOptions,\n            ...screenOptions,\n          },\n  });\n\n  React.useEffect(\n    () =>\n      navigation.addListener?.('tabPress', (e) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <StackView\n      {...rest}\n      state={state}\n      descriptors={descriptors}\n      navigation={navigation}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n  typeof StackNavigator\n>(StackNavigator);\n"]},"metadata":{},"sourceType":"module"}