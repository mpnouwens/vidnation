{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{createModel}from'@rematch/core';export var search=createModel()({state:{},reducers:{searchText:function searchText(state,_searchText){return{state:state,searchText:_searchText};}},effects:function effects(dispatch){return{searchAsync:function searchAsync(payload,state){return _regeneratorRuntime.async(function searchAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:console.log('This is current root state',payload);console.log('This is current root state',state);_context.next=4;return _regeneratorRuntime.awrap(new Promise(function(resolve){return setTimeout(resolve,1000);}));case 4:dispatch.search.searchText(payload);case 5:case\"end\":return _context.stop();}}},null,null,null,Promise);}};}});","map":{"version":3,"sources":["/Users/michaelnouwens/Documents/GitHub/vidnation/store/search.ts"],"names":["createModel","search","state","reducers","searchText","effects","dispatch","searchAsync","payload","console","log","Promise","resolve","setTimeout"],"mappings":"4DAAA,OAASA,WAAT,KAAqC,eAArC,CAGA,MAAO,IAAMC,CAAAA,MAAM,CAAGD,WAAW,GAAc,CAC3CE,KAAK,CAAE,EADoC,CAE3CC,QAAQ,CAAE,CACNC,UADM,qBACKF,KADL,CACYE,WADZ,CACgC,CAClC,MAAO,CACHF,KAAK,CAALA,KADG,CAEHE,UAAU,CAAVA,WAFG,CAAP,CAIH,CANK,CAFiC,CAU3CC,OAAO,CAAE,iBAACC,QAAD,QAAe,CAGdC,WAHc,sBAGFC,OAHE,CAGeN,KAHf,uHAIhBO,OAAO,CAACC,GAAR,CAAY,4BAAZ,CAA0CF,OAA1C,EACAC,OAAO,CAACC,GAAR,CAAY,4BAAZ,CAA0CR,KAA1C,EALgB,iDAMV,GAAIS,CAAAA,OAAJ,CAAY,SAAAC,OAAO,QAAIC,CAAAA,UAAU,CAACD,OAAD,CAAU,IAAV,CAAd,EAAnB,CANU,SAOhBN,QAAQ,CAACL,MAAT,CAAgBG,UAAhB,CAA2BI,OAA3B,EAPgB,sEAAf,EAVkC,CAAd,CAA1B","sourcesContent":["import { createModel, Reducer } from '@rematch/core'\nimport { RootModel } from './models'\n\nexport const search = createModel<RootModel>()({\n    state: {},\n    reducers: {\n        searchText(state, searchText: string) {\n            return {\n                state,\n                searchText\n            }\n        }\n    },\n    effects: (dispatch) => ({\n        // handle state changes with impure functions.\n        // use async/await for async actions\n        async searchAsync(payload: string, state) {\n            console.log('This is current root state', payload);\n            console.log('This is current root state', state);\n            await new Promise(resolve => setTimeout(resolve, 1000))\n            dispatch.search.searchText(payload)\n        },\n    })\n})\n"]},"metadata":{},"sourceType":"module"}