{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import{CodedError}from'@unimodules/core';import ExpoFontLoader from\"./ExpoFontLoader\";import{FontDisplay}from\"./Font\";function uriFromFontSource(asset){if(typeof asset==='string'){return asset||null;}else if(typeof asset==='object'){return asset.uri||asset.localUri||null;}return null;}function displayFromFontSource(asset){return asset.display||FontDisplay.AUTO;}export function fontFamilyNeedsScoping(name){return false;}export function getAssetForSource(source){var uri=uriFromFontSource(source);var display=displayFromFontSource(source);if(!uri||typeof uri!=='string'){throwInvalidSourceError(uri);}return{uri:uri,display:display};}function throwInvalidSourceError(source){var type=typeof source;if(type==='object')type=JSON.stringify(source,null,2);throw new CodedError(\"ERR_FONT_SOURCE\",\"Expected font asset of type `string | FontResource | Asset` (number is not supported on web) instead got: \"+type);}export function loadSingleFontAsync(name,input){return _regeneratorRuntime.async(function loadSingleFontAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:if(typeof input!=='object'||typeof input.uri!=='string'||input.downloadAsync){throwInvalidSourceError(input);}_context.next=3;return _regeneratorRuntime.awrap(ExpoFontLoader.loadAsync(name,input));case 3:case\"end\":return _context.stop();}}},null,null,null,Promise);}export function getNativeFontName(name){return name;}","map":{"version":3,"mappings":"4DAAA,OAASA,UAAU,KAAQ,kBAAkB,CAG7C,MAAOC,eAAc,wBACrB,OAASC,WAAW,cAGpB,QAASC,kBAAiB,CAACC,KAAU,EACnC,GAAI,MAAOA,MAAK,GAAK,QAAQ,CAAE,CAC7B,MAAOA,MAAK,EAAI,IAAI,EACrB,IAAM,IAAI,MAAOA,MAAK,GAAK,QAAQ,CAAE,CACpC,MAAOA,MAAK,CAACC,GAAG,EAAID,KAAK,CAACE,QAAQ,EAAI,IAAI,EAE5C,MAAO,KAAI,CACb,CAEA,QAASC,sBAAqB,CAACH,KAAU,EACvC,MAAOA,MAAK,CAACI,OAAO,EAAIN,WAAW,CAACO,IAAI,CAC1C,CAEA,MAAM,SAAUC,uBAAsB,CAACC,IAAY,EACjD,MAAO,MAAK,CACd,CAEA,MAAM,SAAUC,kBAAiB,CAACC,MAAkB,EAClD,GAAMR,IAAG,CAAGF,iBAAiB,CAACU,MAAM,CAAC,CACrC,GAAML,QAAO,CAAGD,qBAAqB,CAACM,MAAM,CAAC,CAE7C,GAAI,CAACR,GAAG,EAAI,MAAOA,IAAG,GAAK,QAAQ,CAAE,CACnCS,uBAAuB,CAACT,GAAG,CAAC,EAG9B,MAAO,CACLA,GAAG,CAAEA,GAAI,CACTG,OAAO,CAAPA,QACD,CACH,CAEA,QAASM,wBAAuB,CAACD,MAAW,EAC1C,GAAIE,KAAI,CAAW,MAAOF,OAAM,CAChC,GAAIE,IAAI,GAAK,QAAQ,CAAEA,IAAI,CAAGC,IAAI,CAACC,SAAS,CAACJ,MAAM,CAAE,IAAI,CAAE,CAAC,CAAC,CAC7D,KAAM,IAAIb,WAAU,gIAE6Fe,IAAI,CACpH,CACH,CAEA,MAAO,SAAeG,oBAAmB,CACvCP,IAAY,CACZQ,KAA2B,+HAE3B,GAAI,MAAOA,MAAK,GAAK,QAAQ,EAAI,MAAOA,MAAK,CAACd,GAAG,GAAK,QAAQ,EAAKc,KAAa,CAACC,aAAa,CAAE,CAC9FN,uBAAuB,CAACK,KAAK,CAAC,EAC/B,iDAEKlB,cAAc,CAACoB,SAAS,CAACV,IAAI,CAAEQ,KAAK,CAAC,uEAG7C,MAAM,SAAUG,kBAAiB,CAACX,IAAY,EAC5C,MAAOA,KAAI,CACb","names":["CodedError","ExpoFontLoader","FontDisplay","uriFromFontSource","asset","uri","localUri","displayFromFontSource","display","AUTO","fontFamilyNeedsScoping","name","getAssetForSource","source","throwInvalidSourceError","type","JSON","stringify","loadSingleFontAsync","input","downloadAsync","loadAsync","getNativeFontName"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/node_modules/expo-font/src/FontLoader.web.ts"],"sourcesContent":["import { CodedError } from '@unimodules/core';\nimport { Asset } from 'expo-asset';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay } from './Font';\nimport { FontResource, FontSource } from './Font.types';\n\nfunction uriFromFontSource(asset: any): string | null {\n  if (typeof asset === 'string') {\n    return asset || null;\n  } else if (typeof asset === 'object') {\n    return asset.uri || asset.localUri || null;\n  }\n  return null;\n}\n\nfunction displayFromFontSource(asset: any): FontDisplay | undefined {\n  return asset.display || FontDisplay.AUTO;\n}\n\nexport function fontFamilyNeedsScoping(name: string): boolean {\n  return false;\n}\n\nexport function getAssetForSource(source: FontSource): Asset | FontResource {\n  const uri = uriFromFontSource(source);\n  const display = displayFromFontSource(source);\n\n  if (!uri || typeof uri !== 'string') {\n    throwInvalidSourceError(uri);\n  }\n\n  return {\n    uri: uri!,\n    display,\n  };\n}\n\nfunction throwInvalidSourceError(source: any): never {\n  let type: string = typeof source;\n  if (type === 'object') type = JSON.stringify(source, null, 2);\n  throw new CodedError(\n    `ERR_FONT_SOURCE`,\n    `Expected font asset of type \\`string | FontResource | Asset\\` (number is not supported on web) instead got: ${type}`\n  );\n}\n\nexport async function loadSingleFontAsync(\n  name: string,\n  input: Asset | FontResource\n): Promise<void> {\n  if (typeof input !== 'object' || typeof input.uri !== 'string' || (input as any).downloadAsync) {\n    throwInvalidSourceError(input);\n  }\n\n  await ExpoFontLoader.loadAsync(name, input);\n}\n\nexport function getNativeFontName(name: string): string {\n  return name;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}