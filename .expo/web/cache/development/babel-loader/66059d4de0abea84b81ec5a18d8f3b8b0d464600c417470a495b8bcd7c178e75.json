{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { createModel } from \"@rematch/core\";\nexport var search = createModel()({\n  state: {\n    searchMoviesText: \"\",\n    searchMoviesData: [],\n    searchSeriesText: \"\",\n    searchSeriesData: [],\n    masterDetailData: {}\n  },\n  reducers: {\n    searchMoviesText: function searchMoviesText(state, _searchMoviesText) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        searchMoviesText: _searchMoviesText\n      });\n    },\n    searchMoviesData: function searchMoviesData(state, payload) {\n      return _objectSpread(_objectSpread({}, state), payload);\n    },\n    searchSeriesText: function searchSeriesText(state, _searchSeriesText) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        searchSeriesText: _searchSeriesText\n      });\n    },\n    searchSeriesData: function searchSeriesData(state, payload) {\n      return _objectSpread(_objectSpread({}, state), payload);\n    },\n    masterDetailData: function masterDetailData(state, payload) {\n      return _objectSpread(_objectSpread({}, state), payload);\n    }\n  },\n  effects: function effects(dispatch) {\n    return {\n      searchSeriesAsync: function searchSeriesAsync(payload, state) {\n        var response;\n        return _regeneratorRuntime.async(function searchSeriesAsync$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regeneratorRuntime.awrap(fetch(\"https://www.omdbapi.com/?apikey=597bf54e&s=\" + payload + \"&type=series\").then(function (response) {\n                  return response.json();\n                }).then(function (responseJson) {\n                  dispatch.search.searchSeriesData({\n                    searchSeriesData: responseJson\n                  });\n                }).catch(function (error) {\n                  alert(\"error!\");\n                }));\n              case 2:\n                response = _context.sent;\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      searchMoviesAsync: function searchMoviesAsync(payload, state) {\n        var response;\n        return _regeneratorRuntime.async(function searchMoviesAsync$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _regeneratorRuntime.awrap(fetch(\"https://www.omdbapi.com/?apikey=597bf54e&s=\" + payload + \"&type=movie\").then(function (response) {\n                  return response.json();\n                }).then(function (responseJson) {\n                  dispatch.search.searchMoviesData({\n                    searchMoviesData: responseJson\n                  });\n                }).catch(function (error) {\n                  alert(\"error!\");\n                }));\n              case 2:\n                response = _context2.sent;\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      masterDetailAsync: function masterDetailAsync(payload, state) {\n        var response;\n        return _regeneratorRuntime.async(function masterDetailAsync$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return _regeneratorRuntime.awrap(fetch(\"https://www.omdbapi.com/?apikey=597bf54e&i=\" + payload + \"&plot=full\").then(function (response) {\n                  return response.json();\n                }).then(function (responseJson) {\n                  console.log(\"responseJson\", responseJson);\n                  dispatch.search.masterDetailData({\n                    masterDetailData: responseJson\n                  });\n                }).catch(function (error) {\n                  alert(\"error!\");\n                }));\n              case 2:\n                response = _context3.sent;\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    };\n  }\n});","map":{"version":3,"names":["createModel","search","state","searchMoviesText","searchMoviesData","searchSeriesText","searchSeriesData","masterDetailData","reducers","payload","effects","dispatch","searchSeriesAsync","fetch","then","response","json","responseJson","catch","error","alert","searchMoviesAsync","masterDetailAsync","console","log"],"sources":["/Users/michaeladmin/Documents/GitHub/vidnation/store/search.ts"],"sourcesContent":["import { createModel, Reducer } from \"@rematch/core\";\nimport { RootModel } from \"./models\";\n\nexport const search = createModel<RootModel>()({\n  state: {\n    searchMoviesText: \"\",\n    searchMoviesData: [],\n    searchSeriesText: \"\",\n    searchSeriesData: [],\n    masterDetailData: {},\n  },\n  reducers: {\n    searchMoviesText(state, searchMoviesText: string) {\n      return {\n        ...state,\n        searchMoviesText,\n      };\n    },\n    searchMoviesData(state, payload: Object) {\n      return { ...state, ...payload };\n    },\n    searchSeriesText(state, searchSeriesText: string) {\n      return {\n        ...state,\n        searchSeriesText,\n      };\n    },\n    searchSeriesData(state, payload: Object) {\n      return { ...state, ...payload };\n    },\n    masterDetailData(state, payload: Object) {\n      return { ...state, ...payload };\n    },\n  },\n  effects: (dispatch) => ({\n    async searchSeriesAsync(payload: string, state) {\n      const response = await fetch(\n        `https://www.omdbapi.com/?apikey=597bf54e&s=${payload}&type=series`\n      )\n        .then((response) => response.json())\n        .then((responseJson) => {\n          dispatch.search.searchSeriesData({ searchSeriesData: responseJson });\n        })\n        .catch((error) => {\n          alert(\"error!\");\n        });\n    },\n    async searchMoviesAsync(payload: string, state) {\n      const response = await fetch(\n        `https://www.omdbapi.com/?apikey=597bf54e&s=${payload}&type=movie`\n      )\n        .then((response) => response.json())\n        .then((responseJson) => {\n          dispatch.search.searchMoviesData({ searchMoviesData: responseJson });\n        })\n        .catch((error) => {\n          alert(\"error!\");\n        });\n    },\n    async masterDetailAsync(payload: string, state) {\n      const response = await fetch(\n        `https://www.omdbapi.com/?apikey=597bf54e&i=${payload}&plot=full`\n      )\n        .then((response) => response.json())\n        .then((responseJson) => {\n          console.log(\"responseJson\", responseJson);\n          dispatch.search.masterDetailData({ masterDetailData: responseJson });\n        })\n        .catch((error) => {\n          alert(\"error!\");\n        });\n    },\n  }),\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}