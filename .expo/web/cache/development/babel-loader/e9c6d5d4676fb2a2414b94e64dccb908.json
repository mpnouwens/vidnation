{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createModel } from '@rematch/core';\nexport var search = createModel()({\n  state: {\n    searchText: '',\n    searchData: [],\n    seriesText: '',\n    seriesData: {}\n  },\n  reducers: {\n    searchText: function searchText(state, _searchText) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        searchText: _searchText\n      });\n    },\n    searchData: function searchData(state, payload) {\n      return _objectSpread(_objectSpread({}, state), payload);\n    },\n    seriesData: function seriesData(state, payload) {\n      return _objectSpread(_objectSpread({}, state), payload);\n    }\n  },\n  effects: function effects(dispatch) {\n    return {\n      searchAsync: function searchAsync(payload, state) {\n        var response;\n        return _regeneratorRuntime.async(function searchAsync$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regeneratorRuntime.awrap(fetch(\"http://www.omdbapi.com/?apikey=597bf54e&s=\" + payload + \"&type=series\").then(function (response) {\n                  return response.json();\n                }).then(function (responseJson) {\n                  dispatch.search.searchData({\n                    searchData: responseJson\n                  });\n                }).catch(function (error) {\n                  alert('error!');\n                }));\n\n              case 2:\n                response = _context.sent;\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      seriesDetailAsync: function seriesDetailAsync(payload, state) {\n        var response;\n        return _regeneratorRuntime.async(function seriesDetailAsync$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _regeneratorRuntime.awrap(fetch(\"http://www.omdbapi.com/?apikey=597bf54e&i=\" + payload + \"&plot=full\").then(function (response) {\n                  return response.json();\n                }).then(function (responseJson) {\n                  console.log('responseJson', responseJson);\n                  dispatch.search.seriesData({\n                    seriesData: responseJson\n                  });\n                }).catch(function (error) {\n                  alert('error!');\n                }));\n\n              case 2:\n                response = _context2.sent;\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    };\n  }\n});","map":{"version":3,"sources":["/Users/michaelnouwens/Documents/GitHub/vidnation/store/search.ts"],"names":["createModel","search","state","searchText","searchData","seriesText","seriesData","reducers","payload","effects","dispatch","searchAsync","fetch","then","response","json","responseJson","catch","error","alert","seriesDetailAsync","console","log"],"mappings":";;;;;;;AAAA,SAASA,WAAT,QAAqC,eAArC;AAGA,OAAO,IAAMC,MAAM,GAAGD,WAAW,GAAc;AAC3CE,EAAAA,KAAK,EAAE;AACHC,IAAAA,UAAU,EAAE,EADT;AAEHC,IAAAA,UAAU,EAAE,EAFT;AAGHC,IAAAA,UAAU,EAAE,EAHT;AAIHC,IAAAA,UAAU,EAAE;AAJT,GADoC;AAO3CC,EAAAA,QAAQ,EAAE;AACNJ,IAAAA,UADM,sBACKD,KADL,EACYC,WADZ,EACgC;AAClC,6CACOD,KADP;AAEIC,QAAAA,UAAU,EAAVA;AAFJ;AAIH,KANK;AAONC,IAAAA,UAPM,sBAOKF,KAPL,EAOYM,OAPZ,EAO6B;AAC/B,6CAAYN,KAAZ,GAAsBM,OAAtB;AACH,KATK;AAUNF,IAAAA,UAVM,sBAUKJ,KAVL,EAUYM,OAVZ,EAU6B;AAC/B,6CAAYN,KAAZ,GAAsBM,OAAtB;AACH;AAZK,GAPiC;AAqB3CC,EAAAA,OAAO,EAAE,iBAACC,QAAD;AAAA,WAAe;AAGdC,MAAAA,WAHc,uBAGFH,OAHE,EAGeN,KAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAKOU,KAAK,gDAA8CJ,OAA9C,kBAAL,CAGlBK,IAHkB,CAGb,UAACC,QAAD;AAAA,yBAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,iBAHa,EAIlBF,IAJkB,CAIb,UAACG,YAAD,EAAkB;AACpBN,kBAAAA,QAAQ,CAACT,MAAT,CAAgBG,UAAhB,CAA2B;AAAEA,oBAAAA,UAAU,EAAEY;AAAd,mBAA3B;AACH,iBANkB,EAMhBC,KANgB,CAMV,UAACC,KAAD,EAAW;AAChBC,kBAAAA,KAAK,CAAC,QAAD,CAAL;AACH,iBARkB,CALP;;AAAA;AAKVL,gBAAAA,QALU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBdM,MAAAA,iBApBc,6BAoBIZ,OApBJ,EAoBqBN,KApBrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAqBOU,KAAK,gDAA8CJ,OAA9C,gBAAL,CAGlBK,IAHkB,CAGb,UAACC,QAAD;AAAA,yBAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,iBAHa,EAIlBF,IAJkB,CAIb,UAACG,YAAD,EAAkB;AACpBK,kBAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BN,YAA5B;AACAN,kBAAAA,QAAQ,CAACT,MAAT,CAAgBK,UAAhB,CAA2B;AAAEA,oBAAAA,UAAU,EAAEU;AAAd,mBAA3B;AACH,iBAPkB,EAOhBC,KAPgB,CAOV,UAACC,KAAD,EAAW;AAChBC,kBAAAA,KAAK,CAAC,QAAD,CAAL;AACH,iBATkB,CArBP;;AAAA;AAqBVL,gBAAAA,QArBU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAf;AAAA;AArBkC,CAAd,CAA1B","sourcesContent":["import { createModel, Reducer } from '@rematch/core'\nimport { RootModel } from './models'\n\nexport const search = createModel<RootModel>()({\n    state: {\n        searchText: '',\n        searchData: [],\n        seriesText: '',\n        seriesData: {}\n    },\n    reducers: {\n        searchText(state, searchText: string) {\n            return {\n                ...state,\n                searchText\n            }\n        },\n        searchData(state, payload: Object) {\n            return { ...state, ...payload };\n        },\n        seriesData(state, payload: Object) {\n            return { ...state, ...payload };\n        }\n    },\n    effects: (dispatch) => ({\n        // handle state changes with impure functions.\n        // use async/await for async actions\n        async searchAsync(payload: string, state) {\n            // wait for data to load\n            const response = await fetch(`http://www.omdbapi.com/?apikey=597bf54e&s=${payload}&type=series`)\n                // const data = await response.json()\n\n                .then((response) => response.json())\n                .then((responseJson) => {\n                    dispatch.search.searchData({ searchData: responseJson });\n                }).catch((error) => {\n                    alert('error!');\n                });\n            // pass the result to a local reducer\n\n            // await new Promise(resolve => setTimeout(resolve, 1000))\n            // dispatch.search.searchData({ searchData: data });\n\n        },\n        async seriesDetailAsync(payload: string, state) {\n            const response = await fetch(`http://www.omdbapi.com/?apikey=597bf54e&i=${payload}&plot=full`)\n                // const data = await response.json()\n\n                .then((response) => response.json())\n                .then((responseJson) => {\n                    console.log('responseJson', responseJson)\n                    dispatch.search.seriesData({ seriesData: responseJson });\n                }).catch((error) => {\n                    alert('error!');\n                });\n        }\n    })\n})\n"]},"metadata":{},"sourceType":"module"}