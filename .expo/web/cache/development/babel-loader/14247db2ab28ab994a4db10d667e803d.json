{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createModel } from '@rematch/core';\nexport var search = createModel()({\n  state: {\n    searchText: '',\n    searchData: []\n  },\n  reducers: {\n    searchText: function searchText(state, _searchText) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        searchText: _searchText\n      });\n    },\n    searchData: function searchData(state, payload) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        payload: payload\n      });\n    }\n  },\n  effects: function effects(dispatch) {\n    return {\n      searchAsync: function searchAsync(payload, state) {\n        var response;\n        return _regeneratorRuntime.async(function searchAsync$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regeneratorRuntime.awrap(fetch(\"http://www.omdbapi.com/?apikey=597bf54e&s=\" + payload + \"&type=series\").then(function (response) {\n                  return response.json();\n                }).then(function (responseJson) {\n                  dispatch.search.searchData({\n                    searchData: responseJson\n                  });\n                }).catch(function (error) {\n                  alert('error!');\n                }));\n\n              case 2:\n                response = _context.sent;\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    };\n  }\n});","map":{"version":3,"sources":["/Users/michaelnouwens/Documents/GitHub/vidnation/store/search.ts"],"names":["createModel","search","state","searchText","searchData","reducers","payload","effects","dispatch","searchAsync","fetch","then","response","json","responseJson","catch","error","alert"],"mappings":";;;;;;;AAAA,SAASA,WAAT,QAAqC,eAArC;AAGA,OAAO,IAAMC,MAAM,GAAGD,WAAW,GAAc;AAC3CE,EAAAA,KAAK,EAAE;AACHC,IAAAA,UAAU,EAAE,EADT;AAEHC,IAAAA,UAAU,EAAE;AAFT,GADoC;AAK3CC,EAAAA,QAAQ,EAAE;AACNF,IAAAA,UADM,sBACKD,KADL,EACYC,WADZ,EACgC;AAClC,6CACOD,KADP;AAEIC,QAAAA,UAAU,EAAVA;AAFJ;AAIH,KANK;AAONC,IAAAA,UAPM,sBAOKF,KAPL,EAOYI,OAPZ,EAO6B;AAC/B,6CAAYJ,KAAZ;AAAmBI,QAAAA,OAAO,EAAPA;AAAnB;AACD;AATG,GALiC;AAgB3CC,EAAAA,OAAO,EAAE,iBAACC,QAAD;AAAA,WAAe;AAGdC,MAAAA,WAHc,uBAGFH,OAHE,EAGeJ,KAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAKOQ,KAAK,gDAA8CJ,OAA9C,kBAAL,CAGtBK,IAHsB,CAGjB,UAACC,QAAD;AAAA,yBAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,iBAHiB,EAItBF,IAJsB,CAIjB,UAACG,YAAD,EAAkB;AACpBN,kBAAAA,QAAQ,CAACP,MAAT,CAAgBG,UAAhB,CAA2B;AAAEA,oBAAAA,UAAU,EAAEU;AAAd,mBAA3B;AACH,iBANsB,EAMpBC,KANoB,CAMd,UAACC,KAAD,EAAW;AAClBC,kBAAAA,KAAK,CAAC,QAAD,CAAL;AACD,iBARsB,CALP;;AAAA;AAKVL,gBAAAA,QALU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAf;AAAA;AAhBkC,CAAd,CAA1B","sourcesContent":["import { createModel, Reducer } from '@rematch/core'\nimport { RootModel } from './models'\n\nexport const search = createModel<RootModel>()({\n    state: {\n        searchText: '',\n        searchData: []\n    },\n    reducers: {\n        searchText(state, searchText: string) {\n            return {\n                ...state,\n                searchText\n            }\n        },\n        searchData(state, payload: Object) {\n            return { ...state, payload };\n          }\n    },\n    effects: (dispatch) => ({\n        // handle state changes with impure functions.\n        // use async/await for async actions\n        async searchAsync(payload: string, state) {\n            // wait for data to load\n            const response = await fetch(`http://www.omdbapi.com/?apikey=597bf54e&s=${payload}&type=series`)\n            // const data = await response.json()\n\n            .then((response) => response.json())\n            .then((responseJson) => {\n                dispatch.search.searchData({ searchData: responseJson });\n            }).catch((error) => {\n              alert('error!');\n            });\n            // pass the result to a local reducer\n\n            // await new Promise(resolve => setTimeout(resolve, 1000))\n            // dispatch.search.searchData({ searchData: data });\n\n        }\n    })\n})\n"]},"metadata":{},"sourceType":"module"}